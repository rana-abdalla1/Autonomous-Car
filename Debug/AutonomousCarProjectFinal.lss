
AutonomousCarProjectFinal.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003dd8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000134  00800060  00003dd8  00003e6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  00800194  00800194  00003fa0  2**0
                  ALLOC
  3 .stab         0000309c  00000000  00000000  00003fa0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000151d  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  00008559  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000232  00000000  00000000  00008739  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002891  00000000  00000000  0000896b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001628  00000000  00000000  0000b1fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000013de  00000000  00000000  0000c824  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000200  00000000  00000000  0000dc04  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000030f  00000000  00000000  0000de04  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a56  00000000  00000000  0000e113  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000eb69  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 94 15 	jmp	0x2b28	; 0x2b28 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 9c 0e 	jmp	0x1d38	; 0x1d38 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ed       	ldi	r30, 0xD8	; 216
      68:	fd e3       	ldi	r31, 0x3D	; 61
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 39       	cpi	r26, 0x94	; 148
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e9       	ldi	r26, 0x94	; 148
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 3a       	cpi	r26, 0xAE	; 174
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <main>
      8a:	0c 94 ea 1e 	jmp	0x3dd4	; 0x3dd4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b3 1e 	jmp	0x3d66	; 0x3d66 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac e8       	ldi	r26, 0x8C	; 140
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 cf 1e 	jmp	0x3d9e	; 0x3d9e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 bf 1e 	jmp	0x3d7e	; 0x3d7e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 db 1e 	jmp	0x3db6	; 0x3db6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 bf 1e 	jmp	0x3d7e	; 0x3d7e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 db 1e 	jmp	0x3db6	; 0x3db6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b3 1e 	jmp	0x3d66	; 0x3d66 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c e8       	ldi	r24, 0x8C	; 140
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 cf 1e 	jmp	0x3d9e	; 0x3d9e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 bb 1e 	jmp	0x3d76	; 0x3d76 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6c e8       	ldi	r22, 0x8C	; 140
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 d7 1e 	jmp	0x3dae	; 0x3dae <__epilogue_restores__+0x10>

0000078a <__eqsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 bf 1e 	jmp	0x3d7e	; 0x3d7e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__eqsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__eqsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__eqsf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 db 1e 	jmp	0x3db6	; 0x3db6 <__epilogue_restores__+0x18>

000007ea <__gtsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 bf 1e 	jmp	0x3d7e	; 0x3d7e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gtsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gtsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gtsf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 db 1e 	jmp	0x3db6	; 0x3db6 <__epilogue_restores__+0x18>

0000084a <__gesf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 bf 1e 	jmp	0x3d7e	; 0x3d7e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 db 1e 	jmp	0x3db6	; 0x3db6 <__epilogue_restores__+0x18>

000008aa <__ltsf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 bf 1e 	jmp	0x3d7e	; 0x3d7e <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__ltsf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__ltsf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__ltsf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 db 1e 	jmp	0x3db6	; 0x3db6 <__epilogue_restores__+0x18>

0000090a <__floatsisf>:
     90a:	a8 e0       	ldi	r26, 0x08	; 8
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 bc 1e 	jmp	0x3d78	; 0x3d78 <__prologue_saves__+0x12>
     916:	9b 01       	movw	r18, r22
     918:	ac 01       	movw	r20, r24
     91a:	83 e0       	ldi	r24, 0x03	; 3
     91c:	89 83       	std	Y+1, r24	; 0x01
     91e:	da 01       	movw	r26, r20
     920:	c9 01       	movw	r24, r18
     922:	88 27       	eor	r24, r24
     924:	b7 fd       	sbrc	r27, 7
     926:	83 95       	inc	r24
     928:	99 27       	eor	r25, r25
     92a:	aa 27       	eor	r26, r26
     92c:	bb 27       	eor	r27, r27
     92e:	b8 2e       	mov	r11, r24
     930:	21 15       	cp	r18, r1
     932:	31 05       	cpc	r19, r1
     934:	41 05       	cpc	r20, r1
     936:	51 05       	cpc	r21, r1
     938:	19 f4       	brne	.+6      	; 0x940 <__floatsisf+0x36>
     93a:	82 e0       	ldi	r24, 0x02	; 2
     93c:	89 83       	std	Y+1, r24	; 0x01
     93e:	3a c0       	rjmp	.+116    	; 0x9b4 <__floatsisf+0xaa>
     940:	88 23       	and	r24, r24
     942:	a9 f0       	breq	.+42     	; 0x96e <__floatsisf+0x64>
     944:	20 30       	cpi	r18, 0x00	; 0
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	38 07       	cpc	r19, r24
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	48 07       	cpc	r20, r24
     94e:	80 e8       	ldi	r24, 0x80	; 128
     950:	58 07       	cpc	r21, r24
     952:	29 f4       	brne	.+10     	; 0x95e <__floatsisf+0x54>
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	9f ec       	ldi	r25, 0xCF	; 207
     95c:	30 c0       	rjmp	.+96     	; 0x9be <__floatsisf+0xb4>
     95e:	ee 24       	eor	r14, r14
     960:	ff 24       	eor	r15, r15
     962:	87 01       	movw	r16, r14
     964:	e2 1a       	sub	r14, r18
     966:	f3 0a       	sbc	r15, r19
     968:	04 0b       	sbc	r16, r20
     96a:	15 0b       	sbc	r17, r21
     96c:	02 c0       	rjmp	.+4      	; 0x972 <__floatsisf+0x68>
     96e:	79 01       	movw	r14, r18
     970:	8a 01       	movw	r16, r20
     972:	8e e1       	ldi	r24, 0x1E	; 30
     974:	c8 2e       	mov	r12, r24
     976:	d1 2c       	mov	r13, r1
     978:	dc 82       	std	Y+4, r13	; 0x04
     97a:	cb 82       	std	Y+3, r12	; 0x03
     97c:	ed 82       	std	Y+5, r14	; 0x05
     97e:	fe 82       	std	Y+6, r15	; 0x06
     980:	0f 83       	std	Y+7, r16	; 0x07
     982:	18 87       	std	Y+8, r17	; 0x08
     984:	c8 01       	movw	r24, r16
     986:	b7 01       	movw	r22, r14
     988:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     98c:	01 97       	sbiw	r24, 0x01	; 1
     98e:	18 16       	cp	r1, r24
     990:	19 06       	cpc	r1, r25
     992:	84 f4       	brge	.+32     	; 0x9b4 <__floatsisf+0xaa>
     994:	08 2e       	mov	r0, r24
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatsisf+0x96>
     998:	ee 0c       	add	r14, r14
     99a:	ff 1c       	adc	r15, r15
     99c:	00 1f       	adc	r16, r16
     99e:	11 1f       	adc	r17, r17
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatsisf+0x8e>
     9a4:	ed 82       	std	Y+5, r14	; 0x05
     9a6:	fe 82       	std	Y+6, r15	; 0x06
     9a8:	0f 83       	std	Y+7, r16	; 0x07
     9aa:	18 87       	std	Y+8, r17	; 0x08
     9ac:	c8 1a       	sub	r12, r24
     9ae:	d9 0a       	sbc	r13, r25
     9b0:	dc 82       	std	Y+4, r13	; 0x04
     9b2:	cb 82       	std	Y+3, r12	; 0x03
     9b4:	ba 82       	std	Y+2, r11	; 0x02
     9b6:	ce 01       	movw	r24, r28
     9b8:	01 96       	adiw	r24, 0x01	; 1
     9ba:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     9be:	28 96       	adiw	r28, 0x08	; 8
     9c0:	e9 e0       	ldi	r30, 0x09	; 9
     9c2:	0c 94 d8 1e 	jmp	0x3db0	; 0x3db0 <__epilogue_restores__+0x12>

000009c6 <__fixsfsi>:
     9c6:	ac e0       	ldi	r26, 0x0C	; 12
     9c8:	b0 e0       	ldi	r27, 0x00	; 0
     9ca:	e9 ee       	ldi	r30, 0xE9	; 233
     9cc:	f4 e0       	ldi	r31, 0x04	; 4
     9ce:	0c 94 c3 1e 	jmp	0x3d86	; 0x3d86 <__prologue_saves__+0x20>
     9d2:	69 83       	std	Y+1, r22	; 0x01
     9d4:	7a 83       	std	Y+2, r23	; 0x02
     9d6:	8b 83       	std	Y+3, r24	; 0x03
     9d8:	9c 83       	std	Y+4, r25	; 0x04
     9da:	ce 01       	movw	r24, r28
     9dc:	01 96       	adiw	r24, 0x01	; 1
     9de:	be 01       	movw	r22, r28
     9e0:	6b 5f       	subi	r22, 0xFB	; 251
     9e2:	7f 4f       	sbci	r23, 0xFF	; 255
     9e4:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     9e8:	8d 81       	ldd	r24, Y+5	; 0x05
     9ea:	82 30       	cpi	r24, 0x02	; 2
     9ec:	61 f1       	breq	.+88     	; 0xa46 <__fixsfsi+0x80>
     9ee:	82 30       	cpi	r24, 0x02	; 2
     9f0:	50 f1       	brcs	.+84     	; 0xa46 <__fixsfsi+0x80>
     9f2:	84 30       	cpi	r24, 0x04	; 4
     9f4:	21 f4       	brne	.+8      	; 0x9fe <__fixsfsi+0x38>
     9f6:	8e 81       	ldd	r24, Y+6	; 0x06
     9f8:	88 23       	and	r24, r24
     9fa:	51 f1       	breq	.+84     	; 0xa50 <__fixsfsi+0x8a>
     9fc:	2e c0       	rjmp	.+92     	; 0xa5a <__fixsfsi+0x94>
     9fe:	2f 81       	ldd	r18, Y+7	; 0x07
     a00:	38 85       	ldd	r19, Y+8	; 0x08
     a02:	37 fd       	sbrc	r19, 7
     a04:	20 c0       	rjmp	.+64     	; 0xa46 <__fixsfsi+0x80>
     a06:	6e 81       	ldd	r22, Y+6	; 0x06
     a08:	2f 31       	cpi	r18, 0x1F	; 31
     a0a:	31 05       	cpc	r19, r1
     a0c:	1c f0       	brlt	.+6      	; 0xa14 <__fixsfsi+0x4e>
     a0e:	66 23       	and	r22, r22
     a10:	f9 f0       	breq	.+62     	; 0xa50 <__fixsfsi+0x8a>
     a12:	23 c0       	rjmp	.+70     	; 0xa5a <__fixsfsi+0x94>
     a14:	8e e1       	ldi	r24, 0x1E	; 30
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	82 1b       	sub	r24, r18
     a1a:	93 0b       	sbc	r25, r19
     a1c:	29 85       	ldd	r18, Y+9	; 0x09
     a1e:	3a 85       	ldd	r19, Y+10	; 0x0a
     a20:	4b 85       	ldd	r20, Y+11	; 0x0b
     a22:	5c 85       	ldd	r21, Y+12	; 0x0c
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__fixsfsi+0x68>
     a26:	56 95       	lsr	r21
     a28:	47 95       	ror	r20
     a2a:	37 95       	ror	r19
     a2c:	27 95       	ror	r18
     a2e:	8a 95       	dec	r24
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__fixsfsi+0x60>
     a32:	66 23       	and	r22, r22
     a34:	b1 f0       	breq	.+44     	; 0xa62 <__fixsfsi+0x9c>
     a36:	50 95       	com	r21
     a38:	40 95       	com	r20
     a3a:	30 95       	com	r19
     a3c:	21 95       	neg	r18
     a3e:	3f 4f       	sbci	r19, 0xFF	; 255
     a40:	4f 4f       	sbci	r20, 0xFF	; 255
     a42:	5f 4f       	sbci	r21, 0xFF	; 255
     a44:	0e c0       	rjmp	.+28     	; 0xa62 <__fixsfsi+0x9c>
     a46:	20 e0       	ldi	r18, 0x00	; 0
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	40 e0       	ldi	r20, 0x00	; 0
     a4c:	50 e0       	ldi	r21, 0x00	; 0
     a4e:	09 c0       	rjmp	.+18     	; 0xa62 <__fixsfsi+0x9c>
     a50:	2f ef       	ldi	r18, 0xFF	; 255
     a52:	3f ef       	ldi	r19, 0xFF	; 255
     a54:	4f ef       	ldi	r20, 0xFF	; 255
     a56:	5f e7       	ldi	r21, 0x7F	; 127
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <__fixsfsi+0x9c>
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	40 e0       	ldi	r20, 0x00	; 0
     a60:	50 e8       	ldi	r21, 0x80	; 128
     a62:	b9 01       	movw	r22, r18
     a64:	ca 01       	movw	r24, r20
     a66:	2c 96       	adiw	r28, 0x0c	; 12
     a68:	e2 e0       	ldi	r30, 0x02	; 2
     a6a:	0c 94 df 1e 	jmp	0x3dbe	; 0x3dbe <__epilogue_restores__+0x20>

00000a6e <__floatunsisf>:
     a6e:	a8 e0       	ldi	r26, 0x08	; 8
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	ed e3       	ldi	r30, 0x3D	; 61
     a74:	f5 e0       	ldi	r31, 0x05	; 5
     a76:	0c 94 bb 1e 	jmp	0x3d76	; 0x3d76 <__prologue_saves__+0x10>
     a7a:	7b 01       	movw	r14, r22
     a7c:	8c 01       	movw	r16, r24
     a7e:	61 15       	cp	r22, r1
     a80:	71 05       	cpc	r23, r1
     a82:	81 05       	cpc	r24, r1
     a84:	91 05       	cpc	r25, r1
     a86:	19 f4       	brne	.+6      	; 0xa8e <__floatunsisf+0x20>
     a88:	82 e0       	ldi	r24, 0x02	; 2
     a8a:	89 83       	std	Y+1, r24	; 0x01
     a8c:	60 c0       	rjmp	.+192    	; 0xb4e <__floatunsisf+0xe0>
     a8e:	83 e0       	ldi	r24, 0x03	; 3
     a90:	89 83       	std	Y+1, r24	; 0x01
     a92:	8e e1       	ldi	r24, 0x1E	; 30
     a94:	c8 2e       	mov	r12, r24
     a96:	d1 2c       	mov	r13, r1
     a98:	dc 82       	std	Y+4, r13	; 0x04
     a9a:	cb 82       	std	Y+3, r12	; 0x03
     a9c:	ed 82       	std	Y+5, r14	; 0x05
     a9e:	fe 82       	std	Y+6, r15	; 0x06
     aa0:	0f 83       	std	Y+7, r16	; 0x07
     aa2:	18 87       	std	Y+8, r17	; 0x08
     aa4:	c8 01       	movw	r24, r16
     aa6:	b7 01       	movw	r22, r14
     aa8:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     aac:	fc 01       	movw	r30, r24
     aae:	31 97       	sbiw	r30, 0x01	; 1
     ab0:	f7 ff       	sbrs	r31, 7
     ab2:	3b c0       	rjmp	.+118    	; 0xb2a <__floatunsisf+0xbc>
     ab4:	22 27       	eor	r18, r18
     ab6:	33 27       	eor	r19, r19
     ab8:	2e 1b       	sub	r18, r30
     aba:	3f 0b       	sbc	r19, r31
     abc:	57 01       	movw	r10, r14
     abe:	68 01       	movw	r12, r16
     ac0:	02 2e       	mov	r0, r18
     ac2:	04 c0       	rjmp	.+8      	; 0xacc <__floatunsisf+0x5e>
     ac4:	d6 94       	lsr	r13
     ac6:	c7 94       	ror	r12
     ac8:	b7 94       	ror	r11
     aca:	a7 94       	ror	r10
     acc:	0a 94       	dec	r0
     ace:	d2 f7       	brpl	.-12     	; 0xac4 <__floatunsisf+0x56>
     ad0:	40 e0       	ldi	r20, 0x00	; 0
     ad2:	50 e0       	ldi	r21, 0x00	; 0
     ad4:	60 e0       	ldi	r22, 0x00	; 0
     ad6:	70 e0       	ldi	r23, 0x00	; 0
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	04 c0       	rjmp	.+8      	; 0xaea <__floatunsisf+0x7c>
     ae2:	88 0f       	add	r24, r24
     ae4:	99 1f       	adc	r25, r25
     ae6:	aa 1f       	adc	r26, r26
     ae8:	bb 1f       	adc	r27, r27
     aea:	2a 95       	dec	r18
     aec:	d2 f7       	brpl	.-12     	; 0xae2 <__floatunsisf+0x74>
     aee:	01 97       	sbiw	r24, 0x01	; 1
     af0:	a1 09       	sbc	r26, r1
     af2:	b1 09       	sbc	r27, r1
     af4:	8e 21       	and	r24, r14
     af6:	9f 21       	and	r25, r15
     af8:	a0 23       	and	r26, r16
     afa:	b1 23       	and	r27, r17
     afc:	00 97       	sbiw	r24, 0x00	; 0
     afe:	a1 05       	cpc	r26, r1
     b00:	b1 05       	cpc	r27, r1
     b02:	21 f0       	breq	.+8      	; 0xb0c <__floatunsisf+0x9e>
     b04:	41 e0       	ldi	r20, 0x01	; 1
     b06:	50 e0       	ldi	r21, 0x00	; 0
     b08:	60 e0       	ldi	r22, 0x00	; 0
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	4a 29       	or	r20, r10
     b0e:	5b 29       	or	r21, r11
     b10:	6c 29       	or	r22, r12
     b12:	7d 29       	or	r23, r13
     b14:	4d 83       	std	Y+5, r20	; 0x05
     b16:	5e 83       	std	Y+6, r21	; 0x06
     b18:	6f 83       	std	Y+7, r22	; 0x07
     b1a:	78 87       	std	Y+8, r23	; 0x08
     b1c:	8e e1       	ldi	r24, 0x1E	; 30
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	8e 1b       	sub	r24, r30
     b22:	9f 0b       	sbc	r25, r31
     b24:	9c 83       	std	Y+4, r25	; 0x04
     b26:	8b 83       	std	Y+3, r24	; 0x03
     b28:	12 c0       	rjmp	.+36     	; 0xb4e <__floatunsisf+0xe0>
     b2a:	30 97       	sbiw	r30, 0x00	; 0
     b2c:	81 f0       	breq	.+32     	; 0xb4e <__floatunsisf+0xe0>
     b2e:	0e 2e       	mov	r0, r30
     b30:	04 c0       	rjmp	.+8      	; 0xb3a <__floatunsisf+0xcc>
     b32:	ee 0c       	add	r14, r14
     b34:	ff 1c       	adc	r15, r15
     b36:	00 1f       	adc	r16, r16
     b38:	11 1f       	adc	r17, r17
     b3a:	0a 94       	dec	r0
     b3c:	d2 f7       	brpl	.-12     	; 0xb32 <__floatunsisf+0xc4>
     b3e:	ed 82       	std	Y+5, r14	; 0x05
     b40:	fe 82       	std	Y+6, r15	; 0x06
     b42:	0f 83       	std	Y+7, r16	; 0x07
     b44:	18 87       	std	Y+8, r17	; 0x08
     b46:	ce 1a       	sub	r12, r30
     b48:	df 0a       	sbc	r13, r31
     b4a:	dc 82       	std	Y+4, r13	; 0x04
     b4c:	cb 82       	std	Y+3, r12	; 0x03
     b4e:	1a 82       	std	Y+2, r1	; 0x02
     b50:	ce 01       	movw	r24, r28
     b52:	01 96       	adiw	r24, 0x01	; 1
     b54:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     b58:	28 96       	adiw	r28, 0x08	; 8
     b5a:	ea e0       	ldi	r30, 0x0A	; 10
     b5c:	0c 94 d7 1e 	jmp	0x3dae	; 0x3dae <__epilogue_restores__+0x10>

00000b60 <__clzsi2>:
     b60:	ef 92       	push	r14
     b62:	ff 92       	push	r15
     b64:	0f 93       	push	r16
     b66:	1f 93       	push	r17
     b68:	7b 01       	movw	r14, r22
     b6a:	8c 01       	movw	r16, r24
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	e8 16       	cp	r14, r24
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	f8 06       	cpc	r15, r24
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	08 07       	cpc	r16, r24
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	18 07       	cpc	r17, r24
     b7c:	88 f4       	brcc	.+34     	; 0xba0 <__clzsi2+0x40>
     b7e:	8f ef       	ldi	r24, 0xFF	; 255
     b80:	e8 16       	cp	r14, r24
     b82:	f1 04       	cpc	r15, r1
     b84:	01 05       	cpc	r16, r1
     b86:	11 05       	cpc	r17, r1
     b88:	31 f0       	breq	.+12     	; 0xb96 <__clzsi2+0x36>
     b8a:	28 f0       	brcs	.+10     	; 0xb96 <__clzsi2+0x36>
     b8c:	88 e0       	ldi	r24, 0x08	; 8
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	a0 e0       	ldi	r26, 0x00	; 0
     b92:	b0 e0       	ldi	r27, 0x00	; 0
     b94:	17 c0       	rjmp	.+46     	; 0xbc4 <__clzsi2+0x64>
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	a0 e0       	ldi	r26, 0x00	; 0
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	12 c0       	rjmp	.+36     	; 0xbc4 <__clzsi2+0x64>
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	e8 16       	cp	r14, r24
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	f8 06       	cpc	r15, r24
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	08 07       	cpc	r16, r24
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	18 07       	cpc	r17, r24
     bb0:	28 f0       	brcs	.+10     	; 0xbbc <__clzsi2+0x5c>
     bb2:	88 e1       	ldi	r24, 0x18	; 24
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	a0 e0       	ldi	r26, 0x00	; 0
     bb8:	b0 e0       	ldi	r27, 0x00	; 0
     bba:	04 c0       	rjmp	.+8      	; 0xbc4 <__clzsi2+0x64>
     bbc:	80 e1       	ldi	r24, 0x10	; 16
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	a0 e0       	ldi	r26, 0x00	; 0
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	20 e2       	ldi	r18, 0x20	; 32
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	40 e0       	ldi	r20, 0x00	; 0
     bca:	50 e0       	ldi	r21, 0x00	; 0
     bcc:	28 1b       	sub	r18, r24
     bce:	39 0b       	sbc	r19, r25
     bd0:	4a 0b       	sbc	r20, r26
     bd2:	5b 0b       	sbc	r21, r27
     bd4:	04 c0       	rjmp	.+8      	; 0xbde <__clzsi2+0x7e>
     bd6:	16 95       	lsr	r17
     bd8:	07 95       	ror	r16
     bda:	f7 94       	ror	r15
     bdc:	e7 94       	ror	r14
     bde:	8a 95       	dec	r24
     be0:	d2 f7       	brpl	.-12     	; 0xbd6 <__clzsi2+0x76>
     be2:	f7 01       	movw	r30, r14
     be4:	ec 56       	subi	r30, 0x6C	; 108
     be6:	ff 4f       	sbci	r31, 0xFF	; 255
     be8:	80 81       	ld	r24, Z
     bea:	28 1b       	sub	r18, r24
     bec:	31 09       	sbc	r19, r1
     bee:	41 09       	sbc	r20, r1
     bf0:	51 09       	sbc	r21, r1
     bf2:	c9 01       	movw	r24, r18
     bf4:	1f 91       	pop	r17
     bf6:	0f 91       	pop	r16
     bf8:	ff 90       	pop	r15
     bfa:	ef 90       	pop	r14
     bfc:	08 95       	ret

00000bfe <__pack_f>:
     bfe:	df 92       	push	r13
     c00:	ef 92       	push	r14
     c02:	ff 92       	push	r15
     c04:	0f 93       	push	r16
     c06:	1f 93       	push	r17
     c08:	fc 01       	movw	r30, r24
     c0a:	e4 80       	ldd	r14, Z+4	; 0x04
     c0c:	f5 80       	ldd	r15, Z+5	; 0x05
     c0e:	06 81       	ldd	r16, Z+6	; 0x06
     c10:	17 81       	ldd	r17, Z+7	; 0x07
     c12:	d1 80       	ldd	r13, Z+1	; 0x01
     c14:	80 81       	ld	r24, Z
     c16:	82 30       	cpi	r24, 0x02	; 2
     c18:	48 f4       	brcc	.+18     	; 0xc2c <__pack_f+0x2e>
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	a0 e1       	ldi	r26, 0x10	; 16
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	e8 2a       	or	r14, r24
     c24:	f9 2a       	or	r15, r25
     c26:	0a 2b       	or	r16, r26
     c28:	1b 2b       	or	r17, r27
     c2a:	a5 c0       	rjmp	.+330    	; 0xd76 <__pack_f+0x178>
     c2c:	84 30       	cpi	r24, 0x04	; 4
     c2e:	09 f4       	brne	.+2      	; 0xc32 <__pack_f+0x34>
     c30:	9f c0       	rjmp	.+318    	; 0xd70 <__pack_f+0x172>
     c32:	82 30       	cpi	r24, 0x02	; 2
     c34:	21 f4       	brne	.+8      	; 0xc3e <__pack_f+0x40>
     c36:	ee 24       	eor	r14, r14
     c38:	ff 24       	eor	r15, r15
     c3a:	87 01       	movw	r16, r14
     c3c:	05 c0       	rjmp	.+10     	; 0xc48 <__pack_f+0x4a>
     c3e:	e1 14       	cp	r14, r1
     c40:	f1 04       	cpc	r15, r1
     c42:	01 05       	cpc	r16, r1
     c44:	11 05       	cpc	r17, r1
     c46:	19 f4       	brne	.+6      	; 0xc4e <__pack_f+0x50>
     c48:	e0 e0       	ldi	r30, 0x00	; 0
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	96 c0       	rjmp	.+300    	; 0xd7a <__pack_f+0x17c>
     c4e:	62 81       	ldd	r22, Z+2	; 0x02
     c50:	73 81       	ldd	r23, Z+3	; 0x03
     c52:	9f ef       	ldi	r25, 0xFF	; 255
     c54:	62 38       	cpi	r22, 0x82	; 130
     c56:	79 07       	cpc	r23, r25
     c58:	0c f0       	brlt	.+2      	; 0xc5c <__pack_f+0x5e>
     c5a:	5b c0       	rjmp	.+182    	; 0xd12 <__pack_f+0x114>
     c5c:	22 e8       	ldi	r18, 0x82	; 130
     c5e:	3f ef       	ldi	r19, 0xFF	; 255
     c60:	26 1b       	sub	r18, r22
     c62:	37 0b       	sbc	r19, r23
     c64:	2a 31       	cpi	r18, 0x1A	; 26
     c66:	31 05       	cpc	r19, r1
     c68:	2c f0       	brlt	.+10     	; 0xc74 <__pack_f+0x76>
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	40 e0       	ldi	r20, 0x00	; 0
     c70:	50 e0       	ldi	r21, 0x00	; 0
     c72:	2a c0       	rjmp	.+84     	; 0xcc8 <__pack_f+0xca>
     c74:	b8 01       	movw	r22, r16
     c76:	a7 01       	movw	r20, r14
     c78:	02 2e       	mov	r0, r18
     c7a:	04 c0       	rjmp	.+8      	; 0xc84 <__pack_f+0x86>
     c7c:	76 95       	lsr	r23
     c7e:	67 95       	ror	r22
     c80:	57 95       	ror	r21
     c82:	47 95       	ror	r20
     c84:	0a 94       	dec	r0
     c86:	d2 f7       	brpl	.-12     	; 0xc7c <__pack_f+0x7e>
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	a0 e0       	ldi	r26, 0x00	; 0
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	04 c0       	rjmp	.+8      	; 0xc9a <__pack_f+0x9c>
     c92:	88 0f       	add	r24, r24
     c94:	99 1f       	adc	r25, r25
     c96:	aa 1f       	adc	r26, r26
     c98:	bb 1f       	adc	r27, r27
     c9a:	2a 95       	dec	r18
     c9c:	d2 f7       	brpl	.-12     	; 0xc92 <__pack_f+0x94>
     c9e:	01 97       	sbiw	r24, 0x01	; 1
     ca0:	a1 09       	sbc	r26, r1
     ca2:	b1 09       	sbc	r27, r1
     ca4:	8e 21       	and	r24, r14
     ca6:	9f 21       	and	r25, r15
     ca8:	a0 23       	and	r26, r16
     caa:	b1 23       	and	r27, r17
     cac:	00 97       	sbiw	r24, 0x00	; 0
     cae:	a1 05       	cpc	r26, r1
     cb0:	b1 05       	cpc	r27, r1
     cb2:	21 f0       	breq	.+8      	; 0xcbc <__pack_f+0xbe>
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	a0 e0       	ldi	r26, 0x00	; 0
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	9a 01       	movw	r18, r20
     cbe:	ab 01       	movw	r20, r22
     cc0:	28 2b       	or	r18, r24
     cc2:	39 2b       	or	r19, r25
     cc4:	4a 2b       	or	r20, r26
     cc6:	5b 2b       	or	r21, r27
     cc8:	da 01       	movw	r26, r20
     cca:	c9 01       	movw	r24, r18
     ccc:	8f 77       	andi	r24, 0x7F	; 127
     cce:	90 70       	andi	r25, 0x00	; 0
     cd0:	a0 70       	andi	r26, 0x00	; 0
     cd2:	b0 70       	andi	r27, 0x00	; 0
     cd4:	80 34       	cpi	r24, 0x40	; 64
     cd6:	91 05       	cpc	r25, r1
     cd8:	a1 05       	cpc	r26, r1
     cda:	b1 05       	cpc	r27, r1
     cdc:	39 f4       	brne	.+14     	; 0xcec <__pack_f+0xee>
     cde:	27 ff       	sbrs	r18, 7
     ce0:	09 c0       	rjmp	.+18     	; 0xcf4 <__pack_f+0xf6>
     ce2:	20 5c       	subi	r18, 0xC0	; 192
     ce4:	3f 4f       	sbci	r19, 0xFF	; 255
     ce6:	4f 4f       	sbci	r20, 0xFF	; 255
     ce8:	5f 4f       	sbci	r21, 0xFF	; 255
     cea:	04 c0       	rjmp	.+8      	; 0xcf4 <__pack_f+0xf6>
     cec:	21 5c       	subi	r18, 0xC1	; 193
     cee:	3f 4f       	sbci	r19, 0xFF	; 255
     cf0:	4f 4f       	sbci	r20, 0xFF	; 255
     cf2:	5f 4f       	sbci	r21, 0xFF	; 255
     cf4:	e0 e0       	ldi	r30, 0x00	; 0
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	20 30       	cpi	r18, 0x00	; 0
     cfa:	a0 e0       	ldi	r26, 0x00	; 0
     cfc:	3a 07       	cpc	r19, r26
     cfe:	a0 e0       	ldi	r26, 0x00	; 0
     d00:	4a 07       	cpc	r20, r26
     d02:	a0 e4       	ldi	r26, 0x40	; 64
     d04:	5a 07       	cpc	r21, r26
     d06:	10 f0       	brcs	.+4      	; 0xd0c <__pack_f+0x10e>
     d08:	e1 e0       	ldi	r30, 0x01	; 1
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	79 01       	movw	r14, r18
     d0e:	8a 01       	movw	r16, r20
     d10:	27 c0       	rjmp	.+78     	; 0xd60 <__pack_f+0x162>
     d12:	60 38       	cpi	r22, 0x80	; 128
     d14:	71 05       	cpc	r23, r1
     d16:	64 f5       	brge	.+88     	; 0xd70 <__pack_f+0x172>
     d18:	fb 01       	movw	r30, r22
     d1a:	e1 58       	subi	r30, 0x81	; 129
     d1c:	ff 4f       	sbci	r31, 0xFF	; 255
     d1e:	d8 01       	movw	r26, r16
     d20:	c7 01       	movw	r24, r14
     d22:	8f 77       	andi	r24, 0x7F	; 127
     d24:	90 70       	andi	r25, 0x00	; 0
     d26:	a0 70       	andi	r26, 0x00	; 0
     d28:	b0 70       	andi	r27, 0x00	; 0
     d2a:	80 34       	cpi	r24, 0x40	; 64
     d2c:	91 05       	cpc	r25, r1
     d2e:	a1 05       	cpc	r26, r1
     d30:	b1 05       	cpc	r27, r1
     d32:	39 f4       	brne	.+14     	; 0xd42 <__pack_f+0x144>
     d34:	e7 fe       	sbrs	r14, 7
     d36:	0d c0       	rjmp	.+26     	; 0xd52 <__pack_f+0x154>
     d38:	80 e4       	ldi	r24, 0x40	; 64
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	a0 e0       	ldi	r26, 0x00	; 0
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	04 c0       	rjmp	.+8      	; 0xd4a <__pack_f+0x14c>
     d42:	8f e3       	ldi	r24, 0x3F	; 63
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	a0 e0       	ldi	r26, 0x00	; 0
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e8 0e       	add	r14, r24
     d4c:	f9 1e       	adc	r15, r25
     d4e:	0a 1f       	adc	r16, r26
     d50:	1b 1f       	adc	r17, r27
     d52:	17 ff       	sbrs	r17, 7
     d54:	05 c0       	rjmp	.+10     	; 0xd60 <__pack_f+0x162>
     d56:	16 95       	lsr	r17
     d58:	07 95       	ror	r16
     d5a:	f7 94       	ror	r15
     d5c:	e7 94       	ror	r14
     d5e:	31 96       	adiw	r30, 0x01	; 1
     d60:	87 e0       	ldi	r24, 0x07	; 7
     d62:	16 95       	lsr	r17
     d64:	07 95       	ror	r16
     d66:	f7 94       	ror	r15
     d68:	e7 94       	ror	r14
     d6a:	8a 95       	dec	r24
     d6c:	d1 f7       	brne	.-12     	; 0xd62 <__pack_f+0x164>
     d6e:	05 c0       	rjmp	.+10     	; 0xd7a <__pack_f+0x17c>
     d70:	ee 24       	eor	r14, r14
     d72:	ff 24       	eor	r15, r15
     d74:	87 01       	movw	r16, r14
     d76:	ef ef       	ldi	r30, 0xFF	; 255
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	6e 2f       	mov	r22, r30
     d7c:	67 95       	ror	r22
     d7e:	66 27       	eor	r22, r22
     d80:	67 95       	ror	r22
     d82:	90 2f       	mov	r25, r16
     d84:	9f 77       	andi	r25, 0x7F	; 127
     d86:	d7 94       	ror	r13
     d88:	dd 24       	eor	r13, r13
     d8a:	d7 94       	ror	r13
     d8c:	8e 2f       	mov	r24, r30
     d8e:	86 95       	lsr	r24
     d90:	49 2f       	mov	r20, r25
     d92:	46 2b       	or	r20, r22
     d94:	58 2f       	mov	r21, r24
     d96:	5d 29       	or	r21, r13
     d98:	b7 01       	movw	r22, r14
     d9a:	ca 01       	movw	r24, r20
     d9c:	1f 91       	pop	r17
     d9e:	0f 91       	pop	r16
     da0:	ff 90       	pop	r15
     da2:	ef 90       	pop	r14
     da4:	df 90       	pop	r13
     da6:	08 95       	ret

00000da8 <__unpack_f>:
     da8:	fc 01       	movw	r30, r24
     daa:	db 01       	movw	r26, r22
     dac:	40 81       	ld	r20, Z
     dae:	51 81       	ldd	r21, Z+1	; 0x01
     db0:	22 81       	ldd	r18, Z+2	; 0x02
     db2:	62 2f       	mov	r22, r18
     db4:	6f 77       	andi	r22, 0x7F	; 127
     db6:	70 e0       	ldi	r23, 0x00	; 0
     db8:	22 1f       	adc	r18, r18
     dba:	22 27       	eor	r18, r18
     dbc:	22 1f       	adc	r18, r18
     dbe:	93 81       	ldd	r25, Z+3	; 0x03
     dc0:	89 2f       	mov	r24, r25
     dc2:	88 0f       	add	r24, r24
     dc4:	82 2b       	or	r24, r18
     dc6:	28 2f       	mov	r18, r24
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	99 1f       	adc	r25, r25
     dcc:	99 27       	eor	r25, r25
     dce:	99 1f       	adc	r25, r25
     dd0:	11 96       	adiw	r26, 0x01	; 1
     dd2:	9c 93       	st	X, r25
     dd4:	11 97       	sbiw	r26, 0x01	; 1
     dd6:	21 15       	cp	r18, r1
     dd8:	31 05       	cpc	r19, r1
     dda:	a9 f5       	brne	.+106    	; 0xe46 <__unpack_f+0x9e>
     ddc:	41 15       	cp	r20, r1
     dde:	51 05       	cpc	r21, r1
     de0:	61 05       	cpc	r22, r1
     de2:	71 05       	cpc	r23, r1
     de4:	11 f4       	brne	.+4      	; 0xdea <__unpack_f+0x42>
     de6:	82 e0       	ldi	r24, 0x02	; 2
     de8:	37 c0       	rjmp	.+110    	; 0xe58 <__unpack_f+0xb0>
     dea:	82 e8       	ldi	r24, 0x82	; 130
     dec:	9f ef       	ldi	r25, 0xFF	; 255
     dee:	13 96       	adiw	r26, 0x03	; 3
     df0:	9c 93       	st	X, r25
     df2:	8e 93       	st	-X, r24
     df4:	12 97       	sbiw	r26, 0x02	; 2
     df6:	9a 01       	movw	r18, r20
     df8:	ab 01       	movw	r20, r22
     dfa:	67 e0       	ldi	r22, 0x07	; 7
     dfc:	22 0f       	add	r18, r18
     dfe:	33 1f       	adc	r19, r19
     e00:	44 1f       	adc	r20, r20
     e02:	55 1f       	adc	r21, r21
     e04:	6a 95       	dec	r22
     e06:	d1 f7       	brne	.-12     	; 0xdfc <__unpack_f+0x54>
     e08:	83 e0       	ldi	r24, 0x03	; 3
     e0a:	8c 93       	st	X, r24
     e0c:	0d c0       	rjmp	.+26     	; 0xe28 <__unpack_f+0x80>
     e0e:	22 0f       	add	r18, r18
     e10:	33 1f       	adc	r19, r19
     e12:	44 1f       	adc	r20, r20
     e14:	55 1f       	adc	r21, r21
     e16:	12 96       	adiw	r26, 0x02	; 2
     e18:	8d 91       	ld	r24, X+
     e1a:	9c 91       	ld	r25, X
     e1c:	13 97       	sbiw	r26, 0x03	; 3
     e1e:	01 97       	sbiw	r24, 0x01	; 1
     e20:	13 96       	adiw	r26, 0x03	; 3
     e22:	9c 93       	st	X, r25
     e24:	8e 93       	st	-X, r24
     e26:	12 97       	sbiw	r26, 0x02	; 2
     e28:	20 30       	cpi	r18, 0x00	; 0
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	38 07       	cpc	r19, r24
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	48 07       	cpc	r20, r24
     e32:	80 e4       	ldi	r24, 0x40	; 64
     e34:	58 07       	cpc	r21, r24
     e36:	58 f3       	brcs	.-42     	; 0xe0e <__unpack_f+0x66>
     e38:	14 96       	adiw	r26, 0x04	; 4
     e3a:	2d 93       	st	X+, r18
     e3c:	3d 93       	st	X+, r19
     e3e:	4d 93       	st	X+, r20
     e40:	5c 93       	st	X, r21
     e42:	17 97       	sbiw	r26, 0x07	; 7
     e44:	08 95       	ret
     e46:	2f 3f       	cpi	r18, 0xFF	; 255
     e48:	31 05       	cpc	r19, r1
     e4a:	79 f4       	brne	.+30     	; 0xe6a <__unpack_f+0xc2>
     e4c:	41 15       	cp	r20, r1
     e4e:	51 05       	cpc	r21, r1
     e50:	61 05       	cpc	r22, r1
     e52:	71 05       	cpc	r23, r1
     e54:	19 f4       	brne	.+6      	; 0xe5c <__unpack_f+0xb4>
     e56:	84 e0       	ldi	r24, 0x04	; 4
     e58:	8c 93       	st	X, r24
     e5a:	08 95       	ret
     e5c:	64 ff       	sbrs	r22, 4
     e5e:	03 c0       	rjmp	.+6      	; 0xe66 <__unpack_f+0xbe>
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	8c 93       	st	X, r24
     e64:	12 c0       	rjmp	.+36     	; 0xe8a <__unpack_f+0xe2>
     e66:	1c 92       	st	X, r1
     e68:	10 c0       	rjmp	.+32     	; 0xe8a <__unpack_f+0xe2>
     e6a:	2f 57       	subi	r18, 0x7F	; 127
     e6c:	30 40       	sbci	r19, 0x00	; 0
     e6e:	13 96       	adiw	r26, 0x03	; 3
     e70:	3c 93       	st	X, r19
     e72:	2e 93       	st	-X, r18
     e74:	12 97       	sbiw	r26, 0x02	; 2
     e76:	83 e0       	ldi	r24, 0x03	; 3
     e78:	8c 93       	st	X, r24
     e7a:	87 e0       	ldi	r24, 0x07	; 7
     e7c:	44 0f       	add	r20, r20
     e7e:	55 1f       	adc	r21, r21
     e80:	66 1f       	adc	r22, r22
     e82:	77 1f       	adc	r23, r23
     e84:	8a 95       	dec	r24
     e86:	d1 f7       	brne	.-12     	; 0xe7c <__unpack_f+0xd4>
     e88:	70 64       	ori	r23, 0x40	; 64
     e8a:	14 96       	adiw	r26, 0x04	; 4
     e8c:	4d 93       	st	X+, r20
     e8e:	5d 93       	st	X+, r21
     e90:	6d 93       	st	X+, r22
     e92:	7c 93       	st	X, r23
     e94:	17 97       	sbiw	r26, 0x07	; 7
     e96:	08 95       	ret

00000e98 <__fpcmp_parts_f>:
     e98:	1f 93       	push	r17
     e9a:	dc 01       	movw	r26, r24
     e9c:	fb 01       	movw	r30, r22
     e9e:	9c 91       	ld	r25, X
     ea0:	92 30       	cpi	r25, 0x02	; 2
     ea2:	08 f4       	brcc	.+2      	; 0xea6 <__fpcmp_parts_f+0xe>
     ea4:	47 c0       	rjmp	.+142    	; 0xf34 <__fpcmp_parts_f+0x9c>
     ea6:	80 81       	ld	r24, Z
     ea8:	82 30       	cpi	r24, 0x02	; 2
     eaa:	08 f4       	brcc	.+2      	; 0xeae <__fpcmp_parts_f+0x16>
     eac:	43 c0       	rjmp	.+134    	; 0xf34 <__fpcmp_parts_f+0x9c>
     eae:	94 30       	cpi	r25, 0x04	; 4
     eb0:	51 f4       	brne	.+20     	; 0xec6 <__fpcmp_parts_f+0x2e>
     eb2:	11 96       	adiw	r26, 0x01	; 1
     eb4:	1c 91       	ld	r17, X
     eb6:	84 30       	cpi	r24, 0x04	; 4
     eb8:	99 f5       	brne	.+102    	; 0xf20 <__fpcmp_parts_f+0x88>
     eba:	81 81       	ldd	r24, Z+1	; 0x01
     ebc:	68 2f       	mov	r22, r24
     ebe:	70 e0       	ldi	r23, 0x00	; 0
     ec0:	61 1b       	sub	r22, r17
     ec2:	71 09       	sbc	r23, r1
     ec4:	3f c0       	rjmp	.+126    	; 0xf44 <__fpcmp_parts_f+0xac>
     ec6:	84 30       	cpi	r24, 0x04	; 4
     ec8:	21 f0       	breq	.+8      	; 0xed2 <__fpcmp_parts_f+0x3a>
     eca:	92 30       	cpi	r25, 0x02	; 2
     ecc:	31 f4       	brne	.+12     	; 0xeda <__fpcmp_parts_f+0x42>
     ece:	82 30       	cpi	r24, 0x02	; 2
     ed0:	b9 f1       	breq	.+110    	; 0xf40 <__fpcmp_parts_f+0xa8>
     ed2:	81 81       	ldd	r24, Z+1	; 0x01
     ed4:	88 23       	and	r24, r24
     ed6:	89 f1       	breq	.+98     	; 0xf3a <__fpcmp_parts_f+0xa2>
     ed8:	2d c0       	rjmp	.+90     	; 0xf34 <__fpcmp_parts_f+0x9c>
     eda:	11 96       	adiw	r26, 0x01	; 1
     edc:	1c 91       	ld	r17, X
     ede:	11 97       	sbiw	r26, 0x01	; 1
     ee0:	82 30       	cpi	r24, 0x02	; 2
     ee2:	f1 f0       	breq	.+60     	; 0xf20 <__fpcmp_parts_f+0x88>
     ee4:	81 81       	ldd	r24, Z+1	; 0x01
     ee6:	18 17       	cp	r17, r24
     ee8:	d9 f4       	brne	.+54     	; 0xf20 <__fpcmp_parts_f+0x88>
     eea:	12 96       	adiw	r26, 0x02	; 2
     eec:	2d 91       	ld	r18, X+
     eee:	3c 91       	ld	r19, X
     ef0:	13 97       	sbiw	r26, 0x03	; 3
     ef2:	82 81       	ldd	r24, Z+2	; 0x02
     ef4:	93 81       	ldd	r25, Z+3	; 0x03
     ef6:	82 17       	cp	r24, r18
     ef8:	93 07       	cpc	r25, r19
     efa:	94 f0       	brlt	.+36     	; 0xf20 <__fpcmp_parts_f+0x88>
     efc:	28 17       	cp	r18, r24
     efe:	39 07       	cpc	r19, r25
     f00:	bc f0       	brlt	.+46     	; 0xf30 <__fpcmp_parts_f+0x98>
     f02:	14 96       	adiw	r26, 0x04	; 4
     f04:	8d 91       	ld	r24, X+
     f06:	9d 91       	ld	r25, X+
     f08:	0d 90       	ld	r0, X+
     f0a:	bc 91       	ld	r27, X
     f0c:	a0 2d       	mov	r26, r0
     f0e:	24 81       	ldd	r18, Z+4	; 0x04
     f10:	35 81       	ldd	r19, Z+5	; 0x05
     f12:	46 81       	ldd	r20, Z+6	; 0x06
     f14:	57 81       	ldd	r21, Z+7	; 0x07
     f16:	28 17       	cp	r18, r24
     f18:	39 07       	cpc	r19, r25
     f1a:	4a 07       	cpc	r20, r26
     f1c:	5b 07       	cpc	r21, r27
     f1e:	18 f4       	brcc	.+6      	; 0xf26 <__fpcmp_parts_f+0x8e>
     f20:	11 23       	and	r17, r17
     f22:	41 f0       	breq	.+16     	; 0xf34 <__fpcmp_parts_f+0x9c>
     f24:	0a c0       	rjmp	.+20     	; 0xf3a <__fpcmp_parts_f+0xa2>
     f26:	82 17       	cp	r24, r18
     f28:	93 07       	cpc	r25, r19
     f2a:	a4 07       	cpc	r26, r20
     f2c:	b5 07       	cpc	r27, r21
     f2e:	40 f4       	brcc	.+16     	; 0xf40 <__fpcmp_parts_f+0xa8>
     f30:	11 23       	and	r17, r17
     f32:	19 f0       	breq	.+6      	; 0xf3a <__fpcmp_parts_f+0xa2>
     f34:	61 e0       	ldi	r22, 0x01	; 1
     f36:	70 e0       	ldi	r23, 0x00	; 0
     f38:	05 c0       	rjmp	.+10     	; 0xf44 <__fpcmp_parts_f+0xac>
     f3a:	6f ef       	ldi	r22, 0xFF	; 255
     f3c:	7f ef       	ldi	r23, 0xFF	; 255
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <__fpcmp_parts_f+0xac>
     f40:	60 e0       	ldi	r22, 0x00	; 0
     f42:	70 e0       	ldi	r23, 0x00	; 0
     f44:	cb 01       	movw	r24, r22
     f46:	1f 91       	pop	r17
     f48:	08 95       	ret

00000f4a <M_DIO_Void_SetPinDirection>:
#include "DIO_Private.h"
#include "DIO_Interface.h"


void M_DIO_Void_SetPinDirection(u8 Copy_U8_Num ,u8 Copy_U8_State)
{
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62
     f52:	2a 97       	sbiw	r28, 0x0a	; 10
     f54:	0f b6       	in	r0, 0x3f	; 63
     f56:	f8 94       	cli
     f58:	de bf       	out	0x3e, r29	; 62
     f5a:	0f be       	out	0x3f, r0	; 63
     f5c:	cd bf       	out	0x3d, r28	; 61
     f5e:	8b 83       	std	Y+3, r24	; 0x03
     f60:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_U8_Pin  = Copy_U8_Num % 10;
     f62:	8b 81       	ldd	r24, Y+3	; 0x03
     f64:	9a e0       	ldi	r25, 0x0A	; 10
     f66:	69 2f       	mov	r22, r25
     f68:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <__udivmodqi4>
     f6c:	89 2f       	mov	r24, r25
     f6e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Port = Copy_U8_Num / 10;
     f70:	8b 81       	ldd	r24, Y+3	; 0x03
     f72:	9a e0       	ldi	r25, 0x0A	; 10
     f74:	69 2f       	mov	r22, r25
     f76:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <__udivmodqi4>
     f7a:	89 83       	std	Y+1, r24	; 0x01
			switch(Copy_U8_State)
     f7c:	8c 81       	ldd	r24, Y+4	; 0x04
     f7e:	28 2f       	mov	r18, r24
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	3a 87       	std	Y+10, r19	; 0x0a
     f84:	29 87       	std	Y+9, r18	; 0x09
     f86:	89 85       	ldd	r24, Y+9	; 0x09
     f88:	9a 85       	ldd	r25, Y+10	; 0x0a
     f8a:	00 97       	sbiw	r24, 0x00	; 0
     f8c:	39 f0       	breq	.+14     	; 0xf9c <M_DIO_Void_SetPinDirection+0x52>
     f8e:	29 85       	ldd	r18, Y+9	; 0x09
     f90:	3a 85       	ldd	r19, Y+10	; 0x0a
     f92:	21 30       	cpi	r18, 0x01	; 1
     f94:	31 05       	cpc	r19, r1
     f96:	09 f4       	brne	.+2      	; 0xf9a <M_DIO_Void_SetPinDirection+0x50>
     f98:	76 c0       	rjmp	.+236    	; 0x1086 <M_DIO_Void_SetPinDirection+0x13c>
     f9a:	e4 c0       	rjmp	.+456    	; 0x1164 <M_DIO_Void_SetPinDirection+0x21a>
			{
			case INPUT :
				switch(Local_U8_Port)
     f9c:	89 81       	ldd	r24, Y+1	; 0x01
     f9e:	28 2f       	mov	r18, r24
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	38 87       	std	Y+8, r19	; 0x08
     fa4:	2f 83       	std	Y+7, r18	; 0x07
     fa6:	8f 81       	ldd	r24, Y+7	; 0x07
     fa8:	98 85       	ldd	r25, Y+8	; 0x08
     faa:	82 30       	cpi	r24, 0x02	; 2
     fac:	91 05       	cpc	r25, r1
     fae:	61 f1       	breq	.+88     	; 0x1008 <M_DIO_Void_SetPinDirection+0xbe>
     fb0:	2f 81       	ldd	r18, Y+7	; 0x07
     fb2:	38 85       	ldd	r19, Y+8	; 0x08
     fb4:	23 30       	cpi	r18, 0x03	; 3
     fb6:	31 05       	cpc	r19, r1
     fb8:	34 f4       	brge	.+12     	; 0xfc6 <M_DIO_Void_SetPinDirection+0x7c>
     fba:	8f 81       	ldd	r24, Y+7	; 0x07
     fbc:	98 85       	ldd	r25, Y+8	; 0x08
     fbe:	81 30       	cpi	r24, 0x01	; 1
     fc0:	91 05       	cpc	r25, r1
     fc2:	69 f0       	breq	.+26     	; 0xfde <M_DIO_Void_SetPinDirection+0x94>
     fc4:	cf c0       	rjmp	.+414    	; 0x1164 <M_DIO_Void_SetPinDirection+0x21a>
     fc6:	2f 81       	ldd	r18, Y+7	; 0x07
     fc8:	38 85       	ldd	r19, Y+8	; 0x08
     fca:	23 30       	cpi	r18, 0x03	; 3
     fcc:	31 05       	cpc	r19, r1
     fce:	89 f1       	breq	.+98     	; 0x1032 <M_DIO_Void_SetPinDirection+0xe8>
     fd0:	8f 81       	ldd	r24, Y+7	; 0x07
     fd2:	98 85       	ldd	r25, Y+8	; 0x08
     fd4:	84 30       	cpi	r24, 0x04	; 4
     fd6:	91 05       	cpc	r25, r1
     fd8:	09 f4       	brne	.+2      	; 0xfdc <M_DIO_Void_SetPinDirection+0x92>
     fda:	40 c0       	rjmp	.+128    	; 0x105c <M_DIO_Void_SetPinDirection+0x112>
     fdc:	c3 c0       	rjmp	.+390    	; 0x1164 <M_DIO_Void_SetPinDirection+0x21a>
				{
				case 1: CLR_BIT(DDRA_REG,Local_U8_Pin); break;
     fde:	aa e3       	ldi	r26, 0x3A	; 58
     fe0:	b0 e0       	ldi	r27, 0x00	; 0
     fe2:	ea e3       	ldi	r30, 0x3A	; 58
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	48 2f       	mov	r20, r24
     fea:	8a 81       	ldd	r24, Y+2	; 0x02
     fec:	28 2f       	mov	r18, r24
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	02 2e       	mov	r0, r18
     ff6:	02 c0       	rjmp	.+4      	; 0xffc <M_DIO_Void_SetPinDirection+0xb2>
     ff8:	88 0f       	add	r24, r24
     ffa:	99 1f       	adc	r25, r25
     ffc:	0a 94       	dec	r0
     ffe:	e2 f7       	brpl	.-8      	; 0xff8 <M_DIO_Void_SetPinDirection+0xae>
    1000:	80 95       	com	r24
    1002:	84 23       	and	r24, r20
    1004:	8c 93       	st	X, r24
    1006:	ae c0       	rjmp	.+348    	; 0x1164 <M_DIO_Void_SetPinDirection+0x21a>
				case 2: CLR_BIT(DDRB_REG,Local_U8_Pin); break;
    1008:	a7 e3       	ldi	r26, 0x37	; 55
    100a:	b0 e0       	ldi	r27, 0x00	; 0
    100c:	e7 e3       	ldi	r30, 0x37	; 55
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	48 2f       	mov	r20, r24
    1014:	8a 81       	ldd	r24, Y+2	; 0x02
    1016:	28 2f       	mov	r18, r24
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	02 2e       	mov	r0, r18
    1020:	02 c0       	rjmp	.+4      	; 0x1026 <M_DIO_Void_SetPinDirection+0xdc>
    1022:	88 0f       	add	r24, r24
    1024:	99 1f       	adc	r25, r25
    1026:	0a 94       	dec	r0
    1028:	e2 f7       	brpl	.-8      	; 0x1022 <M_DIO_Void_SetPinDirection+0xd8>
    102a:	80 95       	com	r24
    102c:	84 23       	and	r24, r20
    102e:	8c 93       	st	X, r24
    1030:	99 c0       	rjmp	.+306    	; 0x1164 <M_DIO_Void_SetPinDirection+0x21a>
				case 3: CLR_BIT(DDRC_REG,Local_U8_Pin); break;
    1032:	a4 e3       	ldi	r26, 0x34	; 52
    1034:	b0 e0       	ldi	r27, 0x00	; 0
    1036:	e4 e3       	ldi	r30, 0x34	; 52
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	48 2f       	mov	r20, r24
    103e:	8a 81       	ldd	r24, Y+2	; 0x02
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	02 2e       	mov	r0, r18
    104a:	02 c0       	rjmp	.+4      	; 0x1050 <M_DIO_Void_SetPinDirection+0x106>
    104c:	88 0f       	add	r24, r24
    104e:	99 1f       	adc	r25, r25
    1050:	0a 94       	dec	r0
    1052:	e2 f7       	brpl	.-8      	; 0x104c <M_DIO_Void_SetPinDirection+0x102>
    1054:	80 95       	com	r24
    1056:	84 23       	and	r24, r20
    1058:	8c 93       	st	X, r24
    105a:	84 c0       	rjmp	.+264    	; 0x1164 <M_DIO_Void_SetPinDirection+0x21a>
				case 4: CLR_BIT(DDRD_REG,Local_U8_Pin); break;
    105c:	a1 e3       	ldi	r26, 0x31	; 49
    105e:	b0 e0       	ldi	r27, 0x00	; 0
    1060:	e1 e3       	ldi	r30, 0x31	; 49
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	80 81       	ld	r24, Z
    1066:	48 2f       	mov	r20, r24
    1068:	8a 81       	ldd	r24, Y+2	; 0x02
    106a:	28 2f       	mov	r18, r24
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	02 2e       	mov	r0, r18
    1074:	02 c0       	rjmp	.+4      	; 0x107a <M_DIO_Void_SetPinDirection+0x130>
    1076:	88 0f       	add	r24, r24
    1078:	99 1f       	adc	r25, r25
    107a:	0a 94       	dec	r0
    107c:	e2 f7       	brpl	.-8      	; 0x1076 <M_DIO_Void_SetPinDirection+0x12c>
    107e:	80 95       	com	r24
    1080:	84 23       	and	r24, r20
    1082:	8c 93       	st	X, r24
    1084:	6f c0       	rjmp	.+222    	; 0x1164 <M_DIO_Void_SetPinDirection+0x21a>
				default:                                break;
				}
				break;
			case OUTPUT:
				switch(Local_U8_Port)
    1086:	89 81       	ldd	r24, Y+1	; 0x01
    1088:	28 2f       	mov	r18, r24
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	3e 83       	std	Y+6, r19	; 0x06
    108e:	2d 83       	std	Y+5, r18	; 0x05
    1090:	8d 81       	ldd	r24, Y+5	; 0x05
    1092:	9e 81       	ldd	r25, Y+6	; 0x06
    1094:	82 30       	cpi	r24, 0x02	; 2
    1096:	91 05       	cpc	r25, r1
    1098:	51 f1       	breq	.+84     	; 0x10ee <M_DIO_Void_SetPinDirection+0x1a4>
    109a:	2d 81       	ldd	r18, Y+5	; 0x05
    109c:	3e 81       	ldd	r19, Y+6	; 0x06
    109e:	23 30       	cpi	r18, 0x03	; 3
    10a0:	31 05       	cpc	r19, r1
    10a2:	34 f4       	brge	.+12     	; 0x10b0 <M_DIO_Void_SetPinDirection+0x166>
    10a4:	8d 81       	ldd	r24, Y+5	; 0x05
    10a6:	9e 81       	ldd	r25, Y+6	; 0x06
    10a8:	81 30       	cpi	r24, 0x01	; 1
    10aa:	91 05       	cpc	r25, r1
    10ac:	61 f0       	breq	.+24     	; 0x10c6 <M_DIO_Void_SetPinDirection+0x17c>
    10ae:	5a c0       	rjmp	.+180    	; 0x1164 <M_DIO_Void_SetPinDirection+0x21a>
    10b0:	2d 81       	ldd	r18, Y+5	; 0x05
    10b2:	3e 81       	ldd	r19, Y+6	; 0x06
    10b4:	23 30       	cpi	r18, 0x03	; 3
    10b6:	31 05       	cpc	r19, r1
    10b8:	71 f1       	breq	.+92     	; 0x1116 <M_DIO_Void_SetPinDirection+0x1cc>
    10ba:	8d 81       	ldd	r24, Y+5	; 0x05
    10bc:	9e 81       	ldd	r25, Y+6	; 0x06
    10be:	84 30       	cpi	r24, 0x04	; 4
    10c0:	91 05       	cpc	r25, r1
    10c2:	e9 f1       	breq	.+122    	; 0x113e <M_DIO_Void_SetPinDirection+0x1f4>
    10c4:	4f c0       	rjmp	.+158    	; 0x1164 <M_DIO_Void_SetPinDirection+0x21a>
				{
				case 1: SET_BIT(DDRA_REG,Local_U8_Pin); break;
    10c6:	aa e3       	ldi	r26, 0x3A	; 58
    10c8:	b0 e0       	ldi	r27, 0x00	; 0
    10ca:	ea e3       	ldi	r30, 0x3A	; 58
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z
    10d0:	48 2f       	mov	r20, r24
    10d2:	8a 81       	ldd	r24, Y+2	; 0x02
    10d4:	28 2f       	mov	r18, r24
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	02 2e       	mov	r0, r18
    10de:	02 c0       	rjmp	.+4      	; 0x10e4 <M_DIO_Void_SetPinDirection+0x19a>
    10e0:	88 0f       	add	r24, r24
    10e2:	99 1f       	adc	r25, r25
    10e4:	0a 94       	dec	r0
    10e6:	e2 f7       	brpl	.-8      	; 0x10e0 <M_DIO_Void_SetPinDirection+0x196>
    10e8:	84 2b       	or	r24, r20
    10ea:	8c 93       	st	X, r24
    10ec:	3b c0       	rjmp	.+118    	; 0x1164 <M_DIO_Void_SetPinDirection+0x21a>
				case 2: SET_BIT(DDRB_REG,Local_U8_Pin); break;
    10ee:	a7 e3       	ldi	r26, 0x37	; 55
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
    10f2:	e7 e3       	ldi	r30, 0x37	; 55
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	48 2f       	mov	r20, r24
    10fa:	8a 81       	ldd	r24, Y+2	; 0x02
    10fc:	28 2f       	mov	r18, r24
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	81 e0       	ldi	r24, 0x01	; 1
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	02 2e       	mov	r0, r18
    1106:	02 c0       	rjmp	.+4      	; 0x110c <M_DIO_Void_SetPinDirection+0x1c2>
    1108:	88 0f       	add	r24, r24
    110a:	99 1f       	adc	r25, r25
    110c:	0a 94       	dec	r0
    110e:	e2 f7       	brpl	.-8      	; 0x1108 <M_DIO_Void_SetPinDirection+0x1be>
    1110:	84 2b       	or	r24, r20
    1112:	8c 93       	st	X, r24
    1114:	27 c0       	rjmp	.+78     	; 0x1164 <M_DIO_Void_SetPinDirection+0x21a>
				case 3: SET_BIT(DDRC_REG,Local_U8_Pin); break;
    1116:	a4 e3       	ldi	r26, 0x34	; 52
    1118:	b0 e0       	ldi	r27, 0x00	; 0
    111a:	e4 e3       	ldi	r30, 0x34	; 52
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	80 81       	ld	r24, Z
    1120:	48 2f       	mov	r20, r24
    1122:	8a 81       	ldd	r24, Y+2	; 0x02
    1124:	28 2f       	mov	r18, r24
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	02 2e       	mov	r0, r18
    112e:	02 c0       	rjmp	.+4      	; 0x1134 <M_DIO_Void_SetPinDirection+0x1ea>
    1130:	88 0f       	add	r24, r24
    1132:	99 1f       	adc	r25, r25
    1134:	0a 94       	dec	r0
    1136:	e2 f7       	brpl	.-8      	; 0x1130 <M_DIO_Void_SetPinDirection+0x1e6>
    1138:	84 2b       	or	r24, r20
    113a:	8c 93       	st	X, r24
    113c:	13 c0       	rjmp	.+38     	; 0x1164 <M_DIO_Void_SetPinDirection+0x21a>
				case 4: SET_BIT(DDRD_REG,Local_U8_Pin); break;
    113e:	a1 e3       	ldi	r26, 0x31	; 49
    1140:	b0 e0       	ldi	r27, 0x00	; 0
    1142:	e1 e3       	ldi	r30, 0x31	; 49
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
    1148:	48 2f       	mov	r20, r24
    114a:	8a 81       	ldd	r24, Y+2	; 0x02
    114c:	28 2f       	mov	r18, r24
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	02 2e       	mov	r0, r18
    1156:	02 c0       	rjmp	.+4      	; 0x115c <M_DIO_Void_SetPinDirection+0x212>
    1158:	88 0f       	add	r24, r24
    115a:	99 1f       	adc	r25, r25
    115c:	0a 94       	dec	r0
    115e:	e2 f7       	brpl	.-8      	; 0x1158 <M_DIO_Void_SetPinDirection+0x20e>
    1160:	84 2b       	or	r24, r20
    1162:	8c 93       	st	X, r24
				default:                                break;
				}
				break;
				default:                                break;
			}
}
    1164:	2a 96       	adiw	r28, 0x0a	; 10
    1166:	0f b6       	in	r0, 0x3f	; 63
    1168:	f8 94       	cli
    116a:	de bf       	out	0x3e, r29	; 62
    116c:	0f be       	out	0x3f, r0	; 63
    116e:	cd bf       	out	0x3d, r28	; 61
    1170:	cf 91       	pop	r28
    1172:	df 91       	pop	r29
    1174:	08 95       	ret

00001176 <M_DIO_Void_SetPinValue>:

void M_DIO_Void_SetPinValue(u8 Copy_U8_Num ,u8 Copy_U8_State)
{
    1176:	df 93       	push	r29
    1178:	cf 93       	push	r28
    117a:	cd b7       	in	r28, 0x3d	; 61
    117c:	de b7       	in	r29, 0x3e	; 62
    117e:	2a 97       	sbiw	r28, 0x0a	; 10
    1180:	0f b6       	in	r0, 0x3f	; 63
    1182:	f8 94       	cli
    1184:	de bf       	out	0x3e, r29	; 62
    1186:	0f be       	out	0x3f, r0	; 63
    1188:	cd bf       	out	0x3d, r28	; 61
    118a:	8b 83       	std	Y+3, r24	; 0x03
    118c:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_U8_Pin  = Copy_U8_Num % 10;
    118e:	8b 81       	ldd	r24, Y+3	; 0x03
    1190:	9a e0       	ldi	r25, 0x0A	; 10
    1192:	69 2f       	mov	r22, r25
    1194:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <__udivmodqi4>
    1198:	89 2f       	mov	r24, r25
    119a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Port = Copy_U8_Num / 10;
    119c:	8b 81       	ldd	r24, Y+3	; 0x03
    119e:	9a e0       	ldi	r25, 0x0A	; 10
    11a0:	69 2f       	mov	r22, r25
    11a2:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <__udivmodqi4>
    11a6:	89 83       	std	Y+1, r24	; 0x01
			switch(Copy_U8_State)
    11a8:	8c 81       	ldd	r24, Y+4	; 0x04
    11aa:	28 2f       	mov	r18, r24
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	3a 87       	std	Y+10, r19	; 0x0a
    11b0:	29 87       	std	Y+9, r18	; 0x09
    11b2:	89 85       	ldd	r24, Y+9	; 0x09
    11b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    11b6:	00 97       	sbiw	r24, 0x00	; 0
    11b8:	39 f0       	breq	.+14     	; 0x11c8 <M_DIO_Void_SetPinValue+0x52>
    11ba:	29 85       	ldd	r18, Y+9	; 0x09
    11bc:	3a 85       	ldd	r19, Y+10	; 0x0a
    11be:	21 30       	cpi	r18, 0x01	; 1
    11c0:	31 05       	cpc	r19, r1
    11c2:	09 f4       	brne	.+2      	; 0x11c6 <M_DIO_Void_SetPinValue+0x50>
    11c4:	76 c0       	rjmp	.+236    	; 0x12b2 <M_DIO_Void_SetPinValue+0x13c>
    11c6:	e4 c0       	rjmp	.+456    	; 0x1390 <M_DIO_Void_SetPinValue+0x21a>
			{
			case LOW :
				switch(Local_U8_Port)
    11c8:	89 81       	ldd	r24, Y+1	; 0x01
    11ca:	28 2f       	mov	r18, r24
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	38 87       	std	Y+8, r19	; 0x08
    11d0:	2f 83       	std	Y+7, r18	; 0x07
    11d2:	8f 81       	ldd	r24, Y+7	; 0x07
    11d4:	98 85       	ldd	r25, Y+8	; 0x08
    11d6:	82 30       	cpi	r24, 0x02	; 2
    11d8:	91 05       	cpc	r25, r1
    11da:	61 f1       	breq	.+88     	; 0x1234 <M_DIO_Void_SetPinValue+0xbe>
    11dc:	2f 81       	ldd	r18, Y+7	; 0x07
    11de:	38 85       	ldd	r19, Y+8	; 0x08
    11e0:	23 30       	cpi	r18, 0x03	; 3
    11e2:	31 05       	cpc	r19, r1
    11e4:	34 f4       	brge	.+12     	; 0x11f2 <M_DIO_Void_SetPinValue+0x7c>
    11e6:	8f 81       	ldd	r24, Y+7	; 0x07
    11e8:	98 85       	ldd	r25, Y+8	; 0x08
    11ea:	81 30       	cpi	r24, 0x01	; 1
    11ec:	91 05       	cpc	r25, r1
    11ee:	69 f0       	breq	.+26     	; 0x120a <M_DIO_Void_SetPinValue+0x94>
    11f0:	cf c0       	rjmp	.+414    	; 0x1390 <M_DIO_Void_SetPinValue+0x21a>
    11f2:	2f 81       	ldd	r18, Y+7	; 0x07
    11f4:	38 85       	ldd	r19, Y+8	; 0x08
    11f6:	23 30       	cpi	r18, 0x03	; 3
    11f8:	31 05       	cpc	r19, r1
    11fa:	89 f1       	breq	.+98     	; 0x125e <M_DIO_Void_SetPinValue+0xe8>
    11fc:	8f 81       	ldd	r24, Y+7	; 0x07
    11fe:	98 85       	ldd	r25, Y+8	; 0x08
    1200:	84 30       	cpi	r24, 0x04	; 4
    1202:	91 05       	cpc	r25, r1
    1204:	09 f4       	brne	.+2      	; 0x1208 <M_DIO_Void_SetPinValue+0x92>
    1206:	40 c0       	rjmp	.+128    	; 0x1288 <M_DIO_Void_SetPinValue+0x112>
    1208:	c3 c0       	rjmp	.+390    	; 0x1390 <M_DIO_Void_SetPinValue+0x21a>
				{
				case 1: CLR_BIT(PORTA_REG,Local_U8_Pin); break;
    120a:	ab e3       	ldi	r26, 0x3B	; 59
    120c:	b0 e0       	ldi	r27, 0x00	; 0
    120e:	eb e3       	ldi	r30, 0x3B	; 59
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	48 2f       	mov	r20, r24
    1216:	8a 81       	ldd	r24, Y+2	; 0x02
    1218:	28 2f       	mov	r18, r24
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	02 2e       	mov	r0, r18
    1222:	02 c0       	rjmp	.+4      	; 0x1228 <M_DIO_Void_SetPinValue+0xb2>
    1224:	88 0f       	add	r24, r24
    1226:	99 1f       	adc	r25, r25
    1228:	0a 94       	dec	r0
    122a:	e2 f7       	brpl	.-8      	; 0x1224 <M_DIO_Void_SetPinValue+0xae>
    122c:	80 95       	com	r24
    122e:	84 23       	and	r24, r20
    1230:	8c 93       	st	X, r24
    1232:	ae c0       	rjmp	.+348    	; 0x1390 <M_DIO_Void_SetPinValue+0x21a>
				case 2: CLR_BIT(PORTB_REG,Local_U8_Pin); break;
    1234:	a8 e3       	ldi	r26, 0x38	; 56
    1236:	b0 e0       	ldi	r27, 0x00	; 0
    1238:	e8 e3       	ldi	r30, 0x38	; 56
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	80 81       	ld	r24, Z
    123e:	48 2f       	mov	r20, r24
    1240:	8a 81       	ldd	r24, Y+2	; 0x02
    1242:	28 2f       	mov	r18, r24
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	02 2e       	mov	r0, r18
    124c:	02 c0       	rjmp	.+4      	; 0x1252 <M_DIO_Void_SetPinValue+0xdc>
    124e:	88 0f       	add	r24, r24
    1250:	99 1f       	adc	r25, r25
    1252:	0a 94       	dec	r0
    1254:	e2 f7       	brpl	.-8      	; 0x124e <M_DIO_Void_SetPinValue+0xd8>
    1256:	80 95       	com	r24
    1258:	84 23       	and	r24, r20
    125a:	8c 93       	st	X, r24
    125c:	99 c0       	rjmp	.+306    	; 0x1390 <M_DIO_Void_SetPinValue+0x21a>
				case 3: CLR_BIT(PORTC_REG,Local_U8_Pin); break;
    125e:	a5 e3       	ldi	r26, 0x35	; 53
    1260:	b0 e0       	ldi	r27, 0x00	; 0
    1262:	e5 e3       	ldi	r30, 0x35	; 53
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	80 81       	ld	r24, Z
    1268:	48 2f       	mov	r20, r24
    126a:	8a 81       	ldd	r24, Y+2	; 0x02
    126c:	28 2f       	mov	r18, r24
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	02 2e       	mov	r0, r18
    1276:	02 c0       	rjmp	.+4      	; 0x127c <M_DIO_Void_SetPinValue+0x106>
    1278:	88 0f       	add	r24, r24
    127a:	99 1f       	adc	r25, r25
    127c:	0a 94       	dec	r0
    127e:	e2 f7       	brpl	.-8      	; 0x1278 <M_DIO_Void_SetPinValue+0x102>
    1280:	80 95       	com	r24
    1282:	84 23       	and	r24, r20
    1284:	8c 93       	st	X, r24
    1286:	84 c0       	rjmp	.+264    	; 0x1390 <M_DIO_Void_SetPinValue+0x21a>
				case 4: CLR_BIT(PORTD_REG,Local_U8_Pin); break;
    1288:	a2 e3       	ldi	r26, 0x32	; 50
    128a:	b0 e0       	ldi	r27, 0x00	; 0
    128c:	e2 e3       	ldi	r30, 0x32	; 50
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	80 81       	ld	r24, Z
    1292:	48 2f       	mov	r20, r24
    1294:	8a 81       	ldd	r24, Y+2	; 0x02
    1296:	28 2f       	mov	r18, r24
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	81 e0       	ldi	r24, 0x01	; 1
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	02 2e       	mov	r0, r18
    12a0:	02 c0       	rjmp	.+4      	; 0x12a6 <M_DIO_Void_SetPinValue+0x130>
    12a2:	88 0f       	add	r24, r24
    12a4:	99 1f       	adc	r25, r25
    12a6:	0a 94       	dec	r0
    12a8:	e2 f7       	brpl	.-8      	; 0x12a2 <M_DIO_Void_SetPinValue+0x12c>
    12aa:	80 95       	com	r24
    12ac:	84 23       	and	r24, r20
    12ae:	8c 93       	st	X, r24
    12b0:	6f c0       	rjmp	.+222    	; 0x1390 <M_DIO_Void_SetPinValue+0x21a>
				default:                                 break;
				}
				break;
			case HIGH:
				switch(Local_U8_Port)
    12b2:	89 81       	ldd	r24, Y+1	; 0x01
    12b4:	28 2f       	mov	r18, r24
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	3e 83       	std	Y+6, r19	; 0x06
    12ba:	2d 83       	std	Y+5, r18	; 0x05
    12bc:	8d 81       	ldd	r24, Y+5	; 0x05
    12be:	9e 81       	ldd	r25, Y+6	; 0x06
    12c0:	82 30       	cpi	r24, 0x02	; 2
    12c2:	91 05       	cpc	r25, r1
    12c4:	51 f1       	breq	.+84     	; 0x131a <M_DIO_Void_SetPinValue+0x1a4>
    12c6:	2d 81       	ldd	r18, Y+5	; 0x05
    12c8:	3e 81       	ldd	r19, Y+6	; 0x06
    12ca:	23 30       	cpi	r18, 0x03	; 3
    12cc:	31 05       	cpc	r19, r1
    12ce:	34 f4       	brge	.+12     	; 0x12dc <M_DIO_Void_SetPinValue+0x166>
    12d0:	8d 81       	ldd	r24, Y+5	; 0x05
    12d2:	9e 81       	ldd	r25, Y+6	; 0x06
    12d4:	81 30       	cpi	r24, 0x01	; 1
    12d6:	91 05       	cpc	r25, r1
    12d8:	61 f0       	breq	.+24     	; 0x12f2 <M_DIO_Void_SetPinValue+0x17c>
    12da:	5a c0       	rjmp	.+180    	; 0x1390 <M_DIO_Void_SetPinValue+0x21a>
    12dc:	2d 81       	ldd	r18, Y+5	; 0x05
    12de:	3e 81       	ldd	r19, Y+6	; 0x06
    12e0:	23 30       	cpi	r18, 0x03	; 3
    12e2:	31 05       	cpc	r19, r1
    12e4:	71 f1       	breq	.+92     	; 0x1342 <M_DIO_Void_SetPinValue+0x1cc>
    12e6:	8d 81       	ldd	r24, Y+5	; 0x05
    12e8:	9e 81       	ldd	r25, Y+6	; 0x06
    12ea:	84 30       	cpi	r24, 0x04	; 4
    12ec:	91 05       	cpc	r25, r1
    12ee:	e9 f1       	breq	.+122    	; 0x136a <M_DIO_Void_SetPinValue+0x1f4>
    12f0:	4f c0       	rjmp	.+158    	; 0x1390 <M_DIO_Void_SetPinValue+0x21a>
				{
				case 1: SET_BIT(PORTA_REG,Local_U8_Pin); break;
    12f2:	ab e3       	ldi	r26, 0x3B	; 59
    12f4:	b0 e0       	ldi	r27, 0x00	; 0
    12f6:	eb e3       	ldi	r30, 0x3B	; 59
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	80 81       	ld	r24, Z
    12fc:	48 2f       	mov	r20, r24
    12fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1300:	28 2f       	mov	r18, r24
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	81 e0       	ldi	r24, 0x01	; 1
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	02 2e       	mov	r0, r18
    130a:	02 c0       	rjmp	.+4      	; 0x1310 <M_DIO_Void_SetPinValue+0x19a>
    130c:	88 0f       	add	r24, r24
    130e:	99 1f       	adc	r25, r25
    1310:	0a 94       	dec	r0
    1312:	e2 f7       	brpl	.-8      	; 0x130c <M_DIO_Void_SetPinValue+0x196>
    1314:	84 2b       	or	r24, r20
    1316:	8c 93       	st	X, r24
    1318:	3b c0       	rjmp	.+118    	; 0x1390 <M_DIO_Void_SetPinValue+0x21a>
				case 2: SET_BIT(PORTB_REG,Local_U8_Pin); break;
    131a:	a8 e3       	ldi	r26, 0x38	; 56
    131c:	b0 e0       	ldi	r27, 0x00	; 0
    131e:	e8 e3       	ldi	r30, 0x38	; 56
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	80 81       	ld	r24, Z
    1324:	48 2f       	mov	r20, r24
    1326:	8a 81       	ldd	r24, Y+2	; 0x02
    1328:	28 2f       	mov	r18, r24
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	81 e0       	ldi	r24, 0x01	; 1
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	02 2e       	mov	r0, r18
    1332:	02 c0       	rjmp	.+4      	; 0x1338 <M_DIO_Void_SetPinValue+0x1c2>
    1334:	88 0f       	add	r24, r24
    1336:	99 1f       	adc	r25, r25
    1338:	0a 94       	dec	r0
    133a:	e2 f7       	brpl	.-8      	; 0x1334 <M_DIO_Void_SetPinValue+0x1be>
    133c:	84 2b       	or	r24, r20
    133e:	8c 93       	st	X, r24
    1340:	27 c0       	rjmp	.+78     	; 0x1390 <M_DIO_Void_SetPinValue+0x21a>
				case 3: SET_BIT(PORTC_REG,Local_U8_Pin); break;
    1342:	a5 e3       	ldi	r26, 0x35	; 53
    1344:	b0 e0       	ldi	r27, 0x00	; 0
    1346:	e5 e3       	ldi	r30, 0x35	; 53
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	80 81       	ld	r24, Z
    134c:	48 2f       	mov	r20, r24
    134e:	8a 81       	ldd	r24, Y+2	; 0x02
    1350:	28 2f       	mov	r18, r24
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	81 e0       	ldi	r24, 0x01	; 1
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	02 2e       	mov	r0, r18
    135a:	02 c0       	rjmp	.+4      	; 0x1360 <M_DIO_Void_SetPinValue+0x1ea>
    135c:	88 0f       	add	r24, r24
    135e:	99 1f       	adc	r25, r25
    1360:	0a 94       	dec	r0
    1362:	e2 f7       	brpl	.-8      	; 0x135c <M_DIO_Void_SetPinValue+0x1e6>
    1364:	84 2b       	or	r24, r20
    1366:	8c 93       	st	X, r24
    1368:	13 c0       	rjmp	.+38     	; 0x1390 <M_DIO_Void_SetPinValue+0x21a>
				case 4: SET_BIT(PORTD_REG,Local_U8_Pin); break;
    136a:	a2 e3       	ldi	r26, 0x32	; 50
    136c:	b0 e0       	ldi	r27, 0x00	; 0
    136e:	e2 e3       	ldi	r30, 0x32	; 50
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	80 81       	ld	r24, Z
    1374:	48 2f       	mov	r20, r24
    1376:	8a 81       	ldd	r24, Y+2	; 0x02
    1378:	28 2f       	mov	r18, r24
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	02 2e       	mov	r0, r18
    1382:	02 c0       	rjmp	.+4      	; 0x1388 <M_DIO_Void_SetPinValue+0x212>
    1384:	88 0f       	add	r24, r24
    1386:	99 1f       	adc	r25, r25
    1388:	0a 94       	dec	r0
    138a:	e2 f7       	brpl	.-8      	; 0x1384 <M_DIO_Void_SetPinValue+0x20e>
    138c:	84 2b       	or	r24, r20
    138e:	8c 93       	st	X, r24
				default:                                 break;
				}
				break;
				default:                                 break;
			}
}
    1390:	2a 96       	adiw	r28, 0x0a	; 10
    1392:	0f b6       	in	r0, 0x3f	; 63
    1394:	f8 94       	cli
    1396:	de bf       	out	0x3e, r29	; 62
    1398:	0f be       	out	0x3f, r0	; 63
    139a:	cd bf       	out	0x3d, r28	; 61
    139c:	cf 91       	pop	r28
    139e:	df 91       	pop	r29
    13a0:	08 95       	ret

000013a2 <M_DIO_Void_TogPin>:
void M_DIO_Void_TogPin(u8 Copy_U8_Num)
{
    13a2:	df 93       	push	r29
    13a4:	cf 93       	push	r28
    13a6:	00 d0       	rcall	.+0      	; 0x13a8 <M_DIO_Void_TogPin+0x6>
    13a8:	00 d0       	rcall	.+0      	; 0x13aa <M_DIO_Void_TogPin+0x8>
    13aa:	0f 92       	push	r0
    13ac:	cd b7       	in	r28, 0x3d	; 61
    13ae:	de b7       	in	r29, 0x3e	; 62
    13b0:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_U8_Pin  = Copy_U8_Num % 10;
    13b2:	8b 81       	ldd	r24, Y+3	; 0x03
    13b4:	9a e0       	ldi	r25, 0x0A	; 10
    13b6:	69 2f       	mov	r22, r25
    13b8:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <__udivmodqi4>
    13bc:	89 2f       	mov	r24, r25
    13be:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Port = Copy_U8_Num / 10;
    13c0:	8b 81       	ldd	r24, Y+3	; 0x03
    13c2:	9a e0       	ldi	r25, 0x0A	; 10
    13c4:	69 2f       	mov	r22, r25
    13c6:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <__udivmodqi4>
    13ca:	89 83       	std	Y+1, r24	; 0x01
	switch(Local_U8_Port)
    13cc:	89 81       	ldd	r24, Y+1	; 0x01
    13ce:	28 2f       	mov	r18, r24
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	3d 83       	std	Y+5, r19	; 0x05
    13d4:	2c 83       	std	Y+4, r18	; 0x04
    13d6:	8c 81       	ldd	r24, Y+4	; 0x04
    13d8:	9d 81       	ldd	r25, Y+5	; 0x05
    13da:	82 30       	cpi	r24, 0x02	; 2
    13dc:	91 05       	cpc	r25, r1
    13de:	51 f1       	breq	.+84     	; 0x1434 <M_DIO_Void_TogPin+0x92>
    13e0:	2c 81       	ldd	r18, Y+4	; 0x04
    13e2:	3d 81       	ldd	r19, Y+5	; 0x05
    13e4:	23 30       	cpi	r18, 0x03	; 3
    13e6:	31 05       	cpc	r19, r1
    13e8:	34 f4       	brge	.+12     	; 0x13f6 <M_DIO_Void_TogPin+0x54>
    13ea:	8c 81       	ldd	r24, Y+4	; 0x04
    13ec:	9d 81       	ldd	r25, Y+5	; 0x05
    13ee:	81 30       	cpi	r24, 0x01	; 1
    13f0:	91 05       	cpc	r25, r1
    13f2:	61 f0       	breq	.+24     	; 0x140c <M_DIO_Void_TogPin+0x6a>
    13f4:	5a c0       	rjmp	.+180    	; 0x14aa <M_DIO_Void_TogPin+0x108>
    13f6:	2c 81       	ldd	r18, Y+4	; 0x04
    13f8:	3d 81       	ldd	r19, Y+5	; 0x05
    13fa:	23 30       	cpi	r18, 0x03	; 3
    13fc:	31 05       	cpc	r19, r1
    13fe:	71 f1       	breq	.+92     	; 0x145c <M_DIO_Void_TogPin+0xba>
    1400:	8c 81       	ldd	r24, Y+4	; 0x04
    1402:	9d 81       	ldd	r25, Y+5	; 0x05
    1404:	84 30       	cpi	r24, 0x04	; 4
    1406:	91 05       	cpc	r25, r1
    1408:	e9 f1       	breq	.+122    	; 0x1484 <M_DIO_Void_TogPin+0xe2>
    140a:	4f c0       	rjmp	.+158    	; 0x14aa <M_DIO_Void_TogPin+0x108>
	{
	case 1: TOG_BIT(PORTA_REG,Local_U8_Pin); break;
    140c:	ab e3       	ldi	r26, 0x3B	; 59
    140e:	b0 e0       	ldi	r27, 0x00	; 0
    1410:	eb e3       	ldi	r30, 0x3B	; 59
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	48 2f       	mov	r20, r24
    1418:	8a 81       	ldd	r24, Y+2	; 0x02
    141a:	28 2f       	mov	r18, r24
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	02 2e       	mov	r0, r18
    1424:	02 c0       	rjmp	.+4      	; 0x142a <M_DIO_Void_TogPin+0x88>
    1426:	88 0f       	add	r24, r24
    1428:	99 1f       	adc	r25, r25
    142a:	0a 94       	dec	r0
    142c:	e2 f7       	brpl	.-8      	; 0x1426 <M_DIO_Void_TogPin+0x84>
    142e:	84 27       	eor	r24, r20
    1430:	8c 93       	st	X, r24
    1432:	3b c0       	rjmp	.+118    	; 0x14aa <M_DIO_Void_TogPin+0x108>
	case 2: TOG_BIT(PORTB_REG,Local_U8_Pin); break;
    1434:	a8 e3       	ldi	r26, 0x38	; 56
    1436:	b0 e0       	ldi	r27, 0x00	; 0
    1438:	e8 e3       	ldi	r30, 0x38	; 56
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 81       	ld	r24, Z
    143e:	48 2f       	mov	r20, r24
    1440:	8a 81       	ldd	r24, Y+2	; 0x02
    1442:	28 2f       	mov	r18, r24
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	02 2e       	mov	r0, r18
    144c:	02 c0       	rjmp	.+4      	; 0x1452 <M_DIO_Void_TogPin+0xb0>
    144e:	88 0f       	add	r24, r24
    1450:	99 1f       	adc	r25, r25
    1452:	0a 94       	dec	r0
    1454:	e2 f7       	brpl	.-8      	; 0x144e <M_DIO_Void_TogPin+0xac>
    1456:	84 27       	eor	r24, r20
    1458:	8c 93       	st	X, r24
    145a:	27 c0       	rjmp	.+78     	; 0x14aa <M_DIO_Void_TogPin+0x108>
	case 3: TOG_BIT(PORTC_REG,Local_U8_Pin); break;
    145c:	a5 e3       	ldi	r26, 0x35	; 53
    145e:	b0 e0       	ldi	r27, 0x00	; 0
    1460:	e5 e3       	ldi	r30, 0x35	; 53
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	80 81       	ld	r24, Z
    1466:	48 2f       	mov	r20, r24
    1468:	8a 81       	ldd	r24, Y+2	; 0x02
    146a:	28 2f       	mov	r18, r24
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	81 e0       	ldi	r24, 0x01	; 1
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	02 2e       	mov	r0, r18
    1474:	02 c0       	rjmp	.+4      	; 0x147a <M_DIO_Void_TogPin+0xd8>
    1476:	88 0f       	add	r24, r24
    1478:	99 1f       	adc	r25, r25
    147a:	0a 94       	dec	r0
    147c:	e2 f7       	brpl	.-8      	; 0x1476 <M_DIO_Void_TogPin+0xd4>
    147e:	84 27       	eor	r24, r20
    1480:	8c 93       	st	X, r24
    1482:	13 c0       	rjmp	.+38     	; 0x14aa <M_DIO_Void_TogPin+0x108>
	case 4: TOG_BIT(PORTD_REG,Local_U8_Pin); break;
    1484:	a2 e3       	ldi	r26, 0x32	; 50
    1486:	b0 e0       	ldi	r27, 0x00	; 0
    1488:	e2 e3       	ldi	r30, 0x32	; 50
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 81       	ld	r24, Z
    148e:	48 2f       	mov	r20, r24
    1490:	8a 81       	ldd	r24, Y+2	; 0x02
    1492:	28 2f       	mov	r18, r24
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	02 2e       	mov	r0, r18
    149c:	02 c0       	rjmp	.+4      	; 0x14a2 <M_DIO_Void_TogPin+0x100>
    149e:	88 0f       	add	r24, r24
    14a0:	99 1f       	adc	r25, r25
    14a2:	0a 94       	dec	r0
    14a4:	e2 f7       	brpl	.-8      	; 0x149e <M_DIO_Void_TogPin+0xfc>
    14a6:	84 27       	eor	r24, r20
    14a8:	8c 93       	st	X, r24
	default:                                 break;
	}
}
    14aa:	0f 90       	pop	r0
    14ac:	0f 90       	pop	r0
    14ae:	0f 90       	pop	r0
    14b0:	0f 90       	pop	r0
    14b2:	0f 90       	pop	r0
    14b4:	cf 91       	pop	r28
    14b6:	df 91       	pop	r29
    14b8:	08 95       	ret

000014ba <M_DIO_U8_GetPinValue>:
u8   M_DIO_U8_GetPinValue(u8 Copy_U8_Num)
{
    14ba:	df 93       	push	r29
    14bc:	cf 93       	push	r28
    14be:	00 d0       	rcall	.+0      	; 0x14c0 <M_DIO_U8_GetPinValue+0x6>
    14c0:	00 d0       	rcall	.+0      	; 0x14c2 <M_DIO_U8_GetPinValue+0x8>
    14c2:	00 d0       	rcall	.+0      	; 0x14c4 <M_DIO_U8_GetPinValue+0xa>
    14c4:	cd b7       	in	r28, 0x3d	; 61
    14c6:	de b7       	in	r29, 0x3e	; 62
    14c8:	8c 83       	std	Y+4, r24	; 0x04
	u8 Local_U8_Pin  = Copy_U8_Num % 10;
    14ca:	8c 81       	ldd	r24, Y+4	; 0x04
    14cc:	9a e0       	ldi	r25, 0x0A	; 10
    14ce:	69 2f       	mov	r22, r25
    14d0:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <__udivmodqi4>
    14d4:	89 2f       	mov	r24, r25
    14d6:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_U8_Port = Copy_U8_Num / 10;
    14d8:	8c 81       	ldd	r24, Y+4	; 0x04
    14da:	9a e0       	ldi	r25, 0x0A	; 10
    14dc:	69 2f       	mov	r22, r25
    14de:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <__udivmodqi4>
    14e2:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Reading = 0;
    14e4:	19 82       	std	Y+1, r1	; 0x01
	switch(Local_U8_Port)
    14e6:	8a 81       	ldd	r24, Y+2	; 0x02
    14e8:	28 2f       	mov	r18, r24
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	3e 83       	std	Y+6, r19	; 0x06
    14ee:	2d 83       	std	Y+5, r18	; 0x05
    14f0:	4d 81       	ldd	r20, Y+5	; 0x05
    14f2:	5e 81       	ldd	r21, Y+6	; 0x06
    14f4:	42 30       	cpi	r20, 0x02	; 2
    14f6:	51 05       	cpc	r21, r1
    14f8:	41 f1       	breq	.+80     	; 0x154a <M_DIO_U8_GetPinValue+0x90>
    14fa:	8d 81       	ldd	r24, Y+5	; 0x05
    14fc:	9e 81       	ldd	r25, Y+6	; 0x06
    14fe:	83 30       	cpi	r24, 0x03	; 3
    1500:	91 05       	cpc	r25, r1
    1502:	34 f4       	brge	.+12     	; 0x1510 <M_DIO_U8_GetPinValue+0x56>
    1504:	2d 81       	ldd	r18, Y+5	; 0x05
    1506:	3e 81       	ldd	r19, Y+6	; 0x06
    1508:	21 30       	cpi	r18, 0x01	; 1
    150a:	31 05       	cpc	r19, r1
    150c:	61 f0       	breq	.+24     	; 0x1526 <M_DIO_U8_GetPinValue+0x6c>
    150e:	52 c0       	rjmp	.+164    	; 0x15b4 <M_DIO_U8_GetPinValue+0xfa>
    1510:	4d 81       	ldd	r20, Y+5	; 0x05
    1512:	5e 81       	ldd	r21, Y+6	; 0x06
    1514:	43 30       	cpi	r20, 0x03	; 3
    1516:	51 05       	cpc	r21, r1
    1518:	51 f1       	breq	.+84     	; 0x156e <M_DIO_U8_GetPinValue+0xb4>
    151a:	8d 81       	ldd	r24, Y+5	; 0x05
    151c:	9e 81       	ldd	r25, Y+6	; 0x06
    151e:	84 30       	cpi	r24, 0x04	; 4
    1520:	91 05       	cpc	r25, r1
    1522:	b9 f1       	breq	.+110    	; 0x1592 <M_DIO_U8_GetPinValue+0xd8>
    1524:	47 c0       	rjmp	.+142    	; 0x15b4 <M_DIO_U8_GetPinValue+0xfa>
	{
	case 1: Local_U8_Reading = GET_BIT(PINA_REG,Local_U8_Pin); break;
    1526:	e9 e3       	ldi	r30, 0x39	; 57
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	80 81       	ld	r24, Z
    152c:	28 2f       	mov	r18, r24
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	8b 81       	ldd	r24, Y+3	; 0x03
    1532:	88 2f       	mov	r24, r24
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	a9 01       	movw	r20, r18
    1538:	02 c0       	rjmp	.+4      	; 0x153e <M_DIO_U8_GetPinValue+0x84>
    153a:	55 95       	asr	r21
    153c:	47 95       	ror	r20
    153e:	8a 95       	dec	r24
    1540:	e2 f7       	brpl	.-8      	; 0x153a <M_DIO_U8_GetPinValue+0x80>
    1542:	ca 01       	movw	r24, r20
    1544:	81 70       	andi	r24, 0x01	; 1
    1546:	89 83       	std	Y+1, r24	; 0x01
    1548:	35 c0       	rjmp	.+106    	; 0x15b4 <M_DIO_U8_GetPinValue+0xfa>
	case 2: Local_U8_Reading = GET_BIT(PINB_REG,Local_U8_Pin); break;
    154a:	e6 e3       	ldi	r30, 0x36	; 54
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	80 81       	ld	r24, Z
    1550:	28 2f       	mov	r18, r24
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	8b 81       	ldd	r24, Y+3	; 0x03
    1556:	88 2f       	mov	r24, r24
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	a9 01       	movw	r20, r18
    155c:	02 c0       	rjmp	.+4      	; 0x1562 <M_DIO_U8_GetPinValue+0xa8>
    155e:	55 95       	asr	r21
    1560:	47 95       	ror	r20
    1562:	8a 95       	dec	r24
    1564:	e2 f7       	brpl	.-8      	; 0x155e <M_DIO_U8_GetPinValue+0xa4>
    1566:	ca 01       	movw	r24, r20
    1568:	81 70       	andi	r24, 0x01	; 1
    156a:	89 83       	std	Y+1, r24	; 0x01
    156c:	23 c0       	rjmp	.+70     	; 0x15b4 <M_DIO_U8_GetPinValue+0xfa>
	case 3: Local_U8_Reading = GET_BIT(PINC_REG,Local_U8_Pin); break;
    156e:	e3 e3       	ldi	r30, 0x33	; 51
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	80 81       	ld	r24, Z
    1574:	28 2f       	mov	r18, r24
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	8b 81       	ldd	r24, Y+3	; 0x03
    157a:	88 2f       	mov	r24, r24
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	a9 01       	movw	r20, r18
    1580:	02 c0       	rjmp	.+4      	; 0x1586 <M_DIO_U8_GetPinValue+0xcc>
    1582:	55 95       	asr	r21
    1584:	47 95       	ror	r20
    1586:	8a 95       	dec	r24
    1588:	e2 f7       	brpl	.-8      	; 0x1582 <M_DIO_U8_GetPinValue+0xc8>
    158a:	ca 01       	movw	r24, r20
    158c:	81 70       	andi	r24, 0x01	; 1
    158e:	89 83       	std	Y+1, r24	; 0x01
    1590:	11 c0       	rjmp	.+34     	; 0x15b4 <M_DIO_U8_GetPinValue+0xfa>
	case 4: Local_U8_Reading = GET_BIT(PIND_REG,Local_U8_Pin); break;
    1592:	e0 e3       	ldi	r30, 0x30	; 48
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	80 81       	ld	r24, Z
    1598:	28 2f       	mov	r18, r24
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	8b 81       	ldd	r24, Y+3	; 0x03
    159e:	88 2f       	mov	r24, r24
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	a9 01       	movw	r20, r18
    15a4:	02 c0       	rjmp	.+4      	; 0x15aa <M_DIO_U8_GetPinValue+0xf0>
    15a6:	55 95       	asr	r21
    15a8:	47 95       	ror	r20
    15aa:	8a 95       	dec	r24
    15ac:	e2 f7       	brpl	.-8      	; 0x15a6 <M_DIO_U8_GetPinValue+0xec>
    15ae:	ca 01       	movw	r24, r20
    15b0:	81 70       	andi	r24, 0x01	; 1
    15b2:	89 83       	std	Y+1, r24	; 0x01
	default:                                                   break;
	}
	return Local_U8_Reading;
    15b4:	89 81       	ldd	r24, Y+1	; 0x01
}
    15b6:	26 96       	adiw	r28, 0x06	; 6
    15b8:	0f b6       	in	r0, 0x3f	; 63
    15ba:	f8 94       	cli
    15bc:	de bf       	out	0x3e, r29	; 62
    15be:	0f be       	out	0x3f, r0	; 63
    15c0:	cd bf       	out	0x3d, r28	; 61
    15c2:	cf 91       	pop	r28
    15c4:	df 91       	pop	r29
    15c6:	08 95       	ret

000015c8 <M_DIO_Void_SetPinPullUpRes>:
void M_DIO_Void_SetPinPullUpRes(u8 Copy_U8_Num,u8 Copy_U8_State)
{
    15c8:	df 93       	push	r29
    15ca:	cf 93       	push	r28
    15cc:	cd b7       	in	r28, 0x3d	; 61
    15ce:	de b7       	in	r29, 0x3e	; 62
    15d0:	2a 97       	sbiw	r28, 0x0a	; 10
    15d2:	0f b6       	in	r0, 0x3f	; 63
    15d4:	f8 94       	cli
    15d6:	de bf       	out	0x3e, r29	; 62
    15d8:	0f be       	out	0x3f, r0	; 63
    15da:	cd bf       	out	0x3d, r28	; 61
    15dc:	8b 83       	std	Y+3, r24	; 0x03
    15de:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_U8_Pin  = Copy_U8_Num % 10;
    15e0:	8b 81       	ldd	r24, Y+3	; 0x03
    15e2:	9a e0       	ldi	r25, 0x0A	; 10
    15e4:	69 2f       	mov	r22, r25
    15e6:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <__udivmodqi4>
    15ea:	89 2f       	mov	r24, r25
    15ec:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Port = Copy_U8_Num / 10;
    15ee:	8b 81       	ldd	r24, Y+3	; 0x03
    15f0:	9a e0       	ldi	r25, 0x0A	; 10
    15f2:	69 2f       	mov	r22, r25
    15f4:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <__udivmodqi4>
    15f8:	89 83       	std	Y+1, r24	; 0x01
			switch(Copy_U8_State)
    15fa:	8c 81       	ldd	r24, Y+4	; 0x04
    15fc:	28 2f       	mov	r18, r24
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	3a 87       	std	Y+10, r19	; 0x0a
    1602:	29 87       	std	Y+9, r18	; 0x09
    1604:	89 85       	ldd	r24, Y+9	; 0x09
    1606:	9a 85       	ldd	r25, Y+10	; 0x0a
    1608:	00 97       	sbiw	r24, 0x00	; 0
    160a:	39 f0       	breq	.+14     	; 0x161a <M_DIO_Void_SetPinPullUpRes+0x52>
    160c:	29 85       	ldd	r18, Y+9	; 0x09
    160e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1610:	21 30       	cpi	r18, 0x01	; 1
    1612:	31 05       	cpc	r19, r1
    1614:	09 f4       	brne	.+2      	; 0x1618 <M_DIO_Void_SetPinPullUpRes+0x50>
    1616:	76 c0       	rjmp	.+236    	; 0x1704 <M_DIO_Void_SetPinPullUpRes+0x13c>
    1618:	e4 c0       	rjmp	.+456    	; 0x17e2 <M_DIO_Void_SetPinPullUpRes+0x21a>
			{
			case DISABLE :
				switch(Local_U8_Port)
    161a:	89 81       	ldd	r24, Y+1	; 0x01
    161c:	28 2f       	mov	r18, r24
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	38 87       	std	Y+8, r19	; 0x08
    1622:	2f 83       	std	Y+7, r18	; 0x07
    1624:	8f 81       	ldd	r24, Y+7	; 0x07
    1626:	98 85       	ldd	r25, Y+8	; 0x08
    1628:	82 30       	cpi	r24, 0x02	; 2
    162a:	91 05       	cpc	r25, r1
    162c:	61 f1       	breq	.+88     	; 0x1686 <M_DIO_Void_SetPinPullUpRes+0xbe>
    162e:	2f 81       	ldd	r18, Y+7	; 0x07
    1630:	38 85       	ldd	r19, Y+8	; 0x08
    1632:	23 30       	cpi	r18, 0x03	; 3
    1634:	31 05       	cpc	r19, r1
    1636:	34 f4       	brge	.+12     	; 0x1644 <M_DIO_Void_SetPinPullUpRes+0x7c>
    1638:	8f 81       	ldd	r24, Y+7	; 0x07
    163a:	98 85       	ldd	r25, Y+8	; 0x08
    163c:	81 30       	cpi	r24, 0x01	; 1
    163e:	91 05       	cpc	r25, r1
    1640:	69 f0       	breq	.+26     	; 0x165c <M_DIO_Void_SetPinPullUpRes+0x94>
    1642:	cf c0       	rjmp	.+414    	; 0x17e2 <M_DIO_Void_SetPinPullUpRes+0x21a>
    1644:	2f 81       	ldd	r18, Y+7	; 0x07
    1646:	38 85       	ldd	r19, Y+8	; 0x08
    1648:	23 30       	cpi	r18, 0x03	; 3
    164a:	31 05       	cpc	r19, r1
    164c:	89 f1       	breq	.+98     	; 0x16b0 <M_DIO_Void_SetPinPullUpRes+0xe8>
    164e:	8f 81       	ldd	r24, Y+7	; 0x07
    1650:	98 85       	ldd	r25, Y+8	; 0x08
    1652:	84 30       	cpi	r24, 0x04	; 4
    1654:	91 05       	cpc	r25, r1
    1656:	09 f4       	brne	.+2      	; 0x165a <M_DIO_Void_SetPinPullUpRes+0x92>
    1658:	40 c0       	rjmp	.+128    	; 0x16da <M_DIO_Void_SetPinPullUpRes+0x112>
    165a:	c3 c0       	rjmp	.+390    	; 0x17e2 <M_DIO_Void_SetPinPullUpRes+0x21a>
				{
				case 1: CLR_BIT(PORTA_REG,Local_U8_Pin); break;
    165c:	ab e3       	ldi	r26, 0x3B	; 59
    165e:	b0 e0       	ldi	r27, 0x00	; 0
    1660:	eb e3       	ldi	r30, 0x3B	; 59
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	80 81       	ld	r24, Z
    1666:	48 2f       	mov	r20, r24
    1668:	8a 81       	ldd	r24, Y+2	; 0x02
    166a:	28 2f       	mov	r18, r24
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	81 e0       	ldi	r24, 0x01	; 1
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	02 2e       	mov	r0, r18
    1674:	02 c0       	rjmp	.+4      	; 0x167a <M_DIO_Void_SetPinPullUpRes+0xb2>
    1676:	88 0f       	add	r24, r24
    1678:	99 1f       	adc	r25, r25
    167a:	0a 94       	dec	r0
    167c:	e2 f7       	brpl	.-8      	; 0x1676 <M_DIO_Void_SetPinPullUpRes+0xae>
    167e:	80 95       	com	r24
    1680:	84 23       	and	r24, r20
    1682:	8c 93       	st	X, r24
    1684:	ae c0       	rjmp	.+348    	; 0x17e2 <M_DIO_Void_SetPinPullUpRes+0x21a>
				case 2: CLR_BIT(PORTB_REG,Local_U8_Pin); break;
    1686:	a8 e3       	ldi	r26, 0x38	; 56
    1688:	b0 e0       	ldi	r27, 0x00	; 0
    168a:	e8 e3       	ldi	r30, 0x38	; 56
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	80 81       	ld	r24, Z
    1690:	48 2f       	mov	r20, r24
    1692:	8a 81       	ldd	r24, Y+2	; 0x02
    1694:	28 2f       	mov	r18, r24
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	81 e0       	ldi	r24, 0x01	; 1
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	02 2e       	mov	r0, r18
    169e:	02 c0       	rjmp	.+4      	; 0x16a4 <M_DIO_Void_SetPinPullUpRes+0xdc>
    16a0:	88 0f       	add	r24, r24
    16a2:	99 1f       	adc	r25, r25
    16a4:	0a 94       	dec	r0
    16a6:	e2 f7       	brpl	.-8      	; 0x16a0 <M_DIO_Void_SetPinPullUpRes+0xd8>
    16a8:	80 95       	com	r24
    16aa:	84 23       	and	r24, r20
    16ac:	8c 93       	st	X, r24
    16ae:	99 c0       	rjmp	.+306    	; 0x17e2 <M_DIO_Void_SetPinPullUpRes+0x21a>
				case 3: CLR_BIT(PORTC_REG,Local_U8_Pin); break;
    16b0:	a5 e3       	ldi	r26, 0x35	; 53
    16b2:	b0 e0       	ldi	r27, 0x00	; 0
    16b4:	e5 e3       	ldi	r30, 0x35	; 53
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	80 81       	ld	r24, Z
    16ba:	48 2f       	mov	r20, r24
    16bc:	8a 81       	ldd	r24, Y+2	; 0x02
    16be:	28 2f       	mov	r18, r24
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	81 e0       	ldi	r24, 0x01	; 1
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	02 2e       	mov	r0, r18
    16c8:	02 c0       	rjmp	.+4      	; 0x16ce <M_DIO_Void_SetPinPullUpRes+0x106>
    16ca:	88 0f       	add	r24, r24
    16cc:	99 1f       	adc	r25, r25
    16ce:	0a 94       	dec	r0
    16d0:	e2 f7       	brpl	.-8      	; 0x16ca <M_DIO_Void_SetPinPullUpRes+0x102>
    16d2:	80 95       	com	r24
    16d4:	84 23       	and	r24, r20
    16d6:	8c 93       	st	X, r24
    16d8:	84 c0       	rjmp	.+264    	; 0x17e2 <M_DIO_Void_SetPinPullUpRes+0x21a>
				case 4: CLR_BIT(PORTD_REG,Local_U8_Pin); break;
    16da:	a2 e3       	ldi	r26, 0x32	; 50
    16dc:	b0 e0       	ldi	r27, 0x00	; 0
    16de:	e2 e3       	ldi	r30, 0x32	; 50
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	80 81       	ld	r24, Z
    16e4:	48 2f       	mov	r20, r24
    16e6:	8a 81       	ldd	r24, Y+2	; 0x02
    16e8:	28 2f       	mov	r18, r24
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	02 2e       	mov	r0, r18
    16f2:	02 c0       	rjmp	.+4      	; 0x16f8 <M_DIO_Void_SetPinPullUpRes+0x130>
    16f4:	88 0f       	add	r24, r24
    16f6:	99 1f       	adc	r25, r25
    16f8:	0a 94       	dec	r0
    16fa:	e2 f7       	brpl	.-8      	; 0x16f4 <M_DIO_Void_SetPinPullUpRes+0x12c>
    16fc:	80 95       	com	r24
    16fe:	84 23       	and	r24, r20
    1700:	8c 93       	st	X, r24
    1702:	6f c0       	rjmp	.+222    	; 0x17e2 <M_DIO_Void_SetPinPullUpRes+0x21a>
				default:                                 break;
				}
				break;
			case ENABLE:
				switch(Local_U8_Port)
    1704:	89 81       	ldd	r24, Y+1	; 0x01
    1706:	28 2f       	mov	r18, r24
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	3e 83       	std	Y+6, r19	; 0x06
    170c:	2d 83       	std	Y+5, r18	; 0x05
    170e:	8d 81       	ldd	r24, Y+5	; 0x05
    1710:	9e 81       	ldd	r25, Y+6	; 0x06
    1712:	82 30       	cpi	r24, 0x02	; 2
    1714:	91 05       	cpc	r25, r1
    1716:	51 f1       	breq	.+84     	; 0x176c <M_DIO_Void_SetPinPullUpRes+0x1a4>
    1718:	2d 81       	ldd	r18, Y+5	; 0x05
    171a:	3e 81       	ldd	r19, Y+6	; 0x06
    171c:	23 30       	cpi	r18, 0x03	; 3
    171e:	31 05       	cpc	r19, r1
    1720:	34 f4       	brge	.+12     	; 0x172e <M_DIO_Void_SetPinPullUpRes+0x166>
    1722:	8d 81       	ldd	r24, Y+5	; 0x05
    1724:	9e 81       	ldd	r25, Y+6	; 0x06
    1726:	81 30       	cpi	r24, 0x01	; 1
    1728:	91 05       	cpc	r25, r1
    172a:	61 f0       	breq	.+24     	; 0x1744 <M_DIO_Void_SetPinPullUpRes+0x17c>
    172c:	5a c0       	rjmp	.+180    	; 0x17e2 <M_DIO_Void_SetPinPullUpRes+0x21a>
    172e:	2d 81       	ldd	r18, Y+5	; 0x05
    1730:	3e 81       	ldd	r19, Y+6	; 0x06
    1732:	23 30       	cpi	r18, 0x03	; 3
    1734:	31 05       	cpc	r19, r1
    1736:	71 f1       	breq	.+92     	; 0x1794 <M_DIO_Void_SetPinPullUpRes+0x1cc>
    1738:	8d 81       	ldd	r24, Y+5	; 0x05
    173a:	9e 81       	ldd	r25, Y+6	; 0x06
    173c:	84 30       	cpi	r24, 0x04	; 4
    173e:	91 05       	cpc	r25, r1
    1740:	e9 f1       	breq	.+122    	; 0x17bc <M_DIO_Void_SetPinPullUpRes+0x1f4>
    1742:	4f c0       	rjmp	.+158    	; 0x17e2 <M_DIO_Void_SetPinPullUpRes+0x21a>
				{
				case 1: SET_BIT(PORTA_REG,Local_U8_Pin); break;
    1744:	ab e3       	ldi	r26, 0x3B	; 59
    1746:	b0 e0       	ldi	r27, 0x00	; 0
    1748:	eb e3       	ldi	r30, 0x3B	; 59
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	80 81       	ld	r24, Z
    174e:	48 2f       	mov	r20, r24
    1750:	8a 81       	ldd	r24, Y+2	; 0x02
    1752:	28 2f       	mov	r18, r24
    1754:	30 e0       	ldi	r19, 0x00	; 0
    1756:	81 e0       	ldi	r24, 0x01	; 1
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	02 2e       	mov	r0, r18
    175c:	02 c0       	rjmp	.+4      	; 0x1762 <M_DIO_Void_SetPinPullUpRes+0x19a>
    175e:	88 0f       	add	r24, r24
    1760:	99 1f       	adc	r25, r25
    1762:	0a 94       	dec	r0
    1764:	e2 f7       	brpl	.-8      	; 0x175e <M_DIO_Void_SetPinPullUpRes+0x196>
    1766:	84 2b       	or	r24, r20
    1768:	8c 93       	st	X, r24
    176a:	3b c0       	rjmp	.+118    	; 0x17e2 <M_DIO_Void_SetPinPullUpRes+0x21a>
				case 2: SET_BIT(PORTB_REG,Local_U8_Pin); break;
    176c:	a8 e3       	ldi	r26, 0x38	; 56
    176e:	b0 e0       	ldi	r27, 0x00	; 0
    1770:	e8 e3       	ldi	r30, 0x38	; 56
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	80 81       	ld	r24, Z
    1776:	48 2f       	mov	r20, r24
    1778:	8a 81       	ldd	r24, Y+2	; 0x02
    177a:	28 2f       	mov	r18, r24
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	81 e0       	ldi	r24, 0x01	; 1
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	02 2e       	mov	r0, r18
    1784:	02 c0       	rjmp	.+4      	; 0x178a <M_DIO_Void_SetPinPullUpRes+0x1c2>
    1786:	88 0f       	add	r24, r24
    1788:	99 1f       	adc	r25, r25
    178a:	0a 94       	dec	r0
    178c:	e2 f7       	brpl	.-8      	; 0x1786 <M_DIO_Void_SetPinPullUpRes+0x1be>
    178e:	84 2b       	or	r24, r20
    1790:	8c 93       	st	X, r24
    1792:	27 c0       	rjmp	.+78     	; 0x17e2 <M_DIO_Void_SetPinPullUpRes+0x21a>
				case 3: SET_BIT(PORTC_REG,Local_U8_Pin); break;
    1794:	a5 e3       	ldi	r26, 0x35	; 53
    1796:	b0 e0       	ldi	r27, 0x00	; 0
    1798:	e5 e3       	ldi	r30, 0x35	; 53
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	80 81       	ld	r24, Z
    179e:	48 2f       	mov	r20, r24
    17a0:	8a 81       	ldd	r24, Y+2	; 0x02
    17a2:	28 2f       	mov	r18, r24
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	81 e0       	ldi	r24, 0x01	; 1
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	02 2e       	mov	r0, r18
    17ac:	02 c0       	rjmp	.+4      	; 0x17b2 <M_DIO_Void_SetPinPullUpRes+0x1ea>
    17ae:	88 0f       	add	r24, r24
    17b0:	99 1f       	adc	r25, r25
    17b2:	0a 94       	dec	r0
    17b4:	e2 f7       	brpl	.-8      	; 0x17ae <M_DIO_Void_SetPinPullUpRes+0x1e6>
    17b6:	84 2b       	or	r24, r20
    17b8:	8c 93       	st	X, r24
    17ba:	13 c0       	rjmp	.+38     	; 0x17e2 <M_DIO_Void_SetPinPullUpRes+0x21a>
				case 4: SET_BIT(PORTD_REG,Local_U8_Pin); break;
    17bc:	a2 e3       	ldi	r26, 0x32	; 50
    17be:	b0 e0       	ldi	r27, 0x00	; 0
    17c0:	e2 e3       	ldi	r30, 0x32	; 50
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	80 81       	ld	r24, Z
    17c6:	48 2f       	mov	r20, r24
    17c8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ca:	28 2f       	mov	r18, r24
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	81 e0       	ldi	r24, 0x01	; 1
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	02 2e       	mov	r0, r18
    17d4:	02 c0       	rjmp	.+4      	; 0x17da <M_DIO_Void_SetPinPullUpRes+0x212>
    17d6:	88 0f       	add	r24, r24
    17d8:	99 1f       	adc	r25, r25
    17da:	0a 94       	dec	r0
    17dc:	e2 f7       	brpl	.-8      	; 0x17d6 <M_DIO_Void_SetPinPullUpRes+0x20e>
    17de:	84 2b       	or	r24, r20
    17e0:	8c 93       	st	X, r24
				default:                                 break;
				}
				break;
				default:                                 break;
			}
}
    17e2:	2a 96       	adiw	r28, 0x0a	; 10
    17e4:	0f b6       	in	r0, 0x3f	; 63
    17e6:	f8 94       	cli
    17e8:	de bf       	out	0x3e, r29	; 62
    17ea:	0f be       	out	0x3f, r0	; 63
    17ec:	cd bf       	out	0x3d, r28	; 61
    17ee:	cf 91       	pop	r28
    17f0:	df 91       	pop	r29
    17f2:	08 95       	ret

000017f4 <M_Timer_Void_TimerInit>:
void (*Timer0_CallBack) (void);
void (*Timer1_CallBack) (void);
void (*Timer2_CallBack) (void);

void M_Timer_Void_TimerInit(u8 Copy_U8_TimerChannel)
{
    17f4:	df 93       	push	r29
    17f6:	cf 93       	push	r28
    17f8:	0f 92       	push	r0
    17fa:	cd b7       	in	r28, 0x3d	; 61
    17fc:	de b7       	in	r29, 0x3e	; 62
    17fe:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_TimerChannel)
    1800:	89 81       	ldd	r24, Y+1	; 0x01
    1802:	88 2f       	mov	r24, r24
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	00 97       	sbiw	r24, 0x00	; 0
    1808:	a9 f4       	brne	.+42     	; 0x1834 <M_Timer_Void_TimerInit+0x40>
	{
	case TIMER0_CHANNEL:
#if   TIMER0_MODE   ==   NORMAL_MODE
		CLR_BIT(TCCR0_REG,WGM00_BIT);
    180a:	a3 e5       	ldi	r26, 0x53	; 83
    180c:	b0 e0       	ldi	r27, 0x00	; 0
    180e:	e3 e5       	ldi	r30, 0x53	; 83
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	80 81       	ld	r24, Z
    1814:	8f 7b       	andi	r24, 0xBF	; 191
    1816:	8c 93       	st	X, r24
		CLR_BIT(TCCR0_REG,WGM01_BIT);
    1818:	a3 e5       	ldi	r26, 0x53	; 83
    181a:	b0 e0       	ldi	r27, 0x00	; 0
    181c:	e3 e5       	ldi	r30, 0x53	; 83
    181e:	f0 e0       	ldi	r31, 0x00	; 0
    1820:	80 81       	ld	r24, Z
    1822:	87 7f       	andi	r24, 0xF7	; 247
    1824:	8c 93       	st	X, r24
		/* TO ENABLE TIMER0 OVERFLOW INT */
		SET_BIT(TIMSK_REG,TOIE0_BIT);
    1826:	a9 e5       	ldi	r26, 0x59	; 89
    1828:	b0 e0       	ldi	r27, 0x00	; 0
    182a:	e9 e5       	ldi	r30, 0x59	; 89
    182c:	f0 e0       	ldi	r31, 0x00	; 0
    182e:	80 81       	ld	r24, Z
    1830:	81 60       	ori	r24, 0x01	; 1
    1832:	8c 93       	st	X, r24

		break;
	default:
		break;
	}
}
    1834:	0f 90       	pop	r0
    1836:	cf 91       	pop	r28
    1838:	df 91       	pop	r29
    183a:	08 95       	ret

0000183c <M_Timer_Void_TimerSetTime>:
void M_Timer_Void_TimerSetTime(u8 Copy_U8_TimerChannel,u32 Copy_U32_DesiredTime)
{
    183c:	df 93       	push	r29
    183e:	cf 93       	push	r28
    1840:	cd b7       	in	r28, 0x3d	; 61
    1842:	de b7       	in	r29, 0x3e	; 62
    1844:	2f 97       	sbiw	r28, 0x0f	; 15
    1846:	0f b6       	in	r0, 0x3f	; 63
    1848:	f8 94       	cli
    184a:	de bf       	out	0x3e, r29	; 62
    184c:	0f be       	out	0x3f, r0	; 63
    184e:	cd bf       	out	0x3d, r28	; 61
    1850:	8b 87       	std	Y+11, r24	; 0x0b
    1852:	4c 87       	std	Y+12, r20	; 0x0c
    1854:	5d 87       	std	Y+13, r21	; 0x0d
    1856:	6e 87       	std	Y+14, r22	; 0x0e
    1858:	7f 87       	std	Y+15, r23	; 0x0f
	u32 Local_U32_TickTime   = TIMER_PRESCALER_DV / F_OSC;       /* result will be in micro second */
    185a:	80 e4       	ldi	r24, 0x40	; 64
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	a0 e0       	ldi	r26, 0x00	; 0
    1860:	b0 e0       	ldi	r27, 0x00	; 0
    1862:	8f 83       	std	Y+7, r24	; 0x07
    1864:	98 87       	std	Y+8, r25	; 0x08
    1866:	a9 87       	std	Y+9, r26	; 0x09
    1868:	ba 87       	std	Y+10, r27	; 0x0a
	u32 Local_U32_TotalTicks = (Copy_U32_DesiredTime * 1000) / Local_U32_TickTime;
    186a:	8c 85       	ldd	r24, Y+12	; 0x0c
    186c:	9d 85       	ldd	r25, Y+13	; 0x0d
    186e:	ae 85       	ldd	r26, Y+14	; 0x0e
    1870:	bf 85       	ldd	r27, Y+15	; 0x0f
    1872:	28 ee       	ldi	r18, 0xE8	; 232
    1874:	33 e0       	ldi	r19, 0x03	; 3
    1876:	40 e0       	ldi	r20, 0x00	; 0
    1878:	50 e0       	ldi	r21, 0x00	; 0
    187a:	bc 01       	movw	r22, r24
    187c:	cd 01       	movw	r24, r26
    187e:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <__mulsi3>
    1882:	dc 01       	movw	r26, r24
    1884:	cb 01       	movw	r24, r22
    1886:	2f 81       	ldd	r18, Y+7	; 0x07
    1888:	38 85       	ldd	r19, Y+8	; 0x08
    188a:	49 85       	ldd	r20, Y+9	; 0x09
    188c:	5a 85       	ldd	r21, Y+10	; 0x0a
    188e:	bc 01       	movw	r22, r24
    1890:	cd 01       	movw	r24, r26
    1892:	0e 94 76 1e 	call	0x3cec	; 0x3cec <__udivmodsi4>
    1896:	da 01       	movw	r26, r20
    1898:	c9 01       	movw	r24, r18
    189a:	8b 83       	std	Y+3, r24	; 0x03
    189c:	9c 83       	std	Y+4, r25	; 0x04
    189e:	ad 83       	std	Y+5, r26	; 0x05
    18a0:	be 83       	std	Y+6, r27	; 0x06
	u8 Local_U8_DF  = 255;
    18a2:	8f ef       	ldi	r24, 0xFF	; 255
    18a4:	8a 83       	std	Y+2, r24	; 0x02
	switch(Copy_U8_TimerChannel)
    18a6:	8b 85       	ldd	r24, Y+11	; 0x0b
    18a8:	88 2f       	mov	r24, r24
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	00 97       	sbiw	r24, 0x00	; 0
    18ae:	69 f5       	brne	.+90     	; 0x190a <M_Timer_Void_TimerSetTime+0xce>
	{
	case TIMER0_CHANNEL:
#if TIMER0_MODE   ==   NORMAL_MODE
		Timer_U32_NumOfOverFlows = Local_U32_TotalTicks / 256;
    18b0:	8b 81       	ldd	r24, Y+3	; 0x03
    18b2:	9c 81       	ldd	r25, Y+4	; 0x04
    18b4:	ad 81       	ldd	r26, Y+5	; 0x05
    18b6:	be 81       	ldd	r27, Y+6	; 0x06
    18b8:	89 2f       	mov	r24, r25
    18ba:	9a 2f       	mov	r25, r26
    18bc:	ab 2f       	mov	r26, r27
    18be:	bb 27       	eor	r27, r27
    18c0:	80 93 94 01 	sts	0x0194, r24
    18c4:	90 93 95 01 	sts	0x0195, r25
    18c8:	a0 93 96 01 	sts	0x0196, r26
    18cc:	b0 93 97 01 	sts	0x0197, r27
		u8 Timer_U8_RemTicks     = Local_U32_TotalTicks % 256 ;
    18d0:	8b 81       	ldd	r24, Y+3	; 0x03
    18d2:	89 83       	std	Y+1, r24	; 0x01
		if(Timer_U8_RemTicks != 0)
    18d4:	89 81       	ldd	r24, Y+1	; 0x01
    18d6:	88 23       	and	r24, r24
    18d8:	c1 f0       	breq	.+48     	; 0x190a <M_Timer_Void_TimerSetTime+0xce>
		{
			TCNT0_REG = 256 - Timer_U8_RemTicks;
    18da:	e2 e5       	ldi	r30, 0x52	; 82
    18dc:	f0 e0       	ldi	r31, 0x00	; 0
    18de:	89 81       	ldd	r24, Y+1	; 0x01
    18e0:	81 95       	neg	r24
    18e2:	80 83       	st	Z, r24
			Timer_U32_NumOfOverFlows++;
    18e4:	80 91 94 01 	lds	r24, 0x0194
    18e8:	90 91 95 01 	lds	r25, 0x0195
    18ec:	a0 91 96 01 	lds	r26, 0x0196
    18f0:	b0 91 97 01 	lds	r27, 0x0197
    18f4:	01 96       	adiw	r24, 0x01	; 1
    18f6:	a1 1d       	adc	r26, r1
    18f8:	b1 1d       	adc	r27, r1
    18fa:	80 93 94 01 	sts	0x0194, r24
    18fe:	90 93 95 01 	sts	0x0195, r25
    1902:	a0 93 96 01 	sts	0x0196, r26
    1906:	b0 93 97 01 	sts	0x0197, r27

		break;
	default: break;
	}

}
    190a:	2f 96       	adiw	r28, 0x0f	; 15
    190c:	0f b6       	in	r0, 0x3f	; 63
    190e:	f8 94       	cli
    1910:	de bf       	out	0x3e, r29	; 62
    1912:	0f be       	out	0x3f, r0	; 63
    1914:	cd bf       	out	0x3d, r28	; 61
    1916:	cf 91       	pop	r28
    1918:	df 91       	pop	r29
    191a:	08 95       	ret

0000191c <M_Timer_Void_TimerStart>:

void M_Timer_Void_TimerStart(u8 Copy_U8_TimerChannel)
{
    191c:	df 93       	push	r29
    191e:	cf 93       	push	r28
    1920:	00 d0       	rcall	.+0      	; 0x1922 <M_Timer_Void_TimerStart+0x6>
    1922:	0f 92       	push	r0
    1924:	cd b7       	in	r28, 0x3d	; 61
    1926:	de b7       	in	r29, 0x3e	; 62
    1928:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_TimerChannel)
    192a:	89 81       	ldd	r24, Y+1	; 0x01
    192c:	28 2f       	mov	r18, r24
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	3b 83       	std	Y+3, r19	; 0x03
    1932:	2a 83       	std	Y+2, r18	; 0x02
    1934:	8a 81       	ldd	r24, Y+2	; 0x02
    1936:	9b 81       	ldd	r25, Y+3	; 0x03
    1938:	00 97       	sbiw	r24, 0x00	; 0
    193a:	31 f0       	breq	.+12     	; 0x1948 <M_Timer_Void_TimerStart+0x2c>
    193c:	2a 81       	ldd	r18, Y+2	; 0x02
    193e:	3b 81       	ldd	r19, Y+3	; 0x03
    1940:	21 30       	cpi	r18, 0x01	; 1
    1942:	31 05       	cpc	r19, r1
    1944:	b9 f0       	breq	.+46     	; 0x1974 <M_Timer_Void_TimerStart+0x58>
    1946:	2b c0       	rjmp	.+86     	; 0x199e <M_Timer_Void_TimerStart+0x82>
	{
	case TIMER0_CHANNEL:
#if   TIMER_PRESCALER_DV   ==   1024
		SET_BIT(TCCR0_REG,CS00_BIT);
    1948:	a3 e5       	ldi	r26, 0x53	; 83
    194a:	b0 e0       	ldi	r27, 0x00	; 0
    194c:	e3 e5       	ldi	r30, 0x53	; 83
    194e:	f0 e0       	ldi	r31, 0x00	; 0
    1950:	80 81       	ld	r24, Z
    1952:	81 60       	ori	r24, 0x01	; 1
    1954:	8c 93       	st	X, r24
		CLR_BIT(TCCR0_REG,CS01_BIT);
    1956:	a3 e5       	ldi	r26, 0x53	; 83
    1958:	b0 e0       	ldi	r27, 0x00	; 0
    195a:	e3 e5       	ldi	r30, 0x53	; 83
    195c:	f0 e0       	ldi	r31, 0x00	; 0
    195e:	80 81       	ld	r24, Z
    1960:	8d 7f       	andi	r24, 0xFD	; 253
    1962:	8c 93       	st	X, r24
		SET_BIT(TCCR0_REG,CS02_BIT);
    1964:	a3 e5       	ldi	r26, 0x53	; 83
    1966:	b0 e0       	ldi	r27, 0x00	; 0
    1968:	e3 e5       	ldi	r30, 0x53	; 83
    196a:	f0 e0       	ldi	r31, 0x00	; 0
    196c:	80 81       	ld	r24, Z
    196e:	84 60       	ori	r24, 0x04	; 4
    1970:	8c 93       	st	X, r24
    1972:	15 c0       	rjmp	.+42     	; 0x199e <M_Timer_Void_TimerStart+0x82>
		SET_BIT(TCCR0_REG,CS02_BIT);
#endif
		break;
	case TIMER1_CHANNEL:
		/* TO SELECT TIMER1 PRESCALER DV -> 256 */
		SET_BIT(TCCR1B_REG,CS10_BIT);
    1974:	ae e4       	ldi	r26, 0x4E	; 78
    1976:	b0 e0       	ldi	r27, 0x00	; 0
    1978:	ee e4       	ldi	r30, 0x4E	; 78
    197a:	f0 e0       	ldi	r31, 0x00	; 0
    197c:	80 81       	ld	r24, Z
    197e:	81 60       	ori	r24, 0x01	; 1
    1980:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B_REG,CS11_BIT);
    1982:	ae e4       	ldi	r26, 0x4E	; 78
    1984:	b0 e0       	ldi	r27, 0x00	; 0
    1986:	ee e4       	ldi	r30, 0x4E	; 78
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	80 81       	ld	r24, Z
    198c:	8d 7f       	andi	r24, 0xFD	; 253
    198e:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_REG,CS12_BIT);
    1990:	ae e4       	ldi	r26, 0x4E	; 78
    1992:	b0 e0       	ldi	r27, 0x00	; 0
    1994:	ee e4       	ldi	r30, 0x4E	; 78
    1996:	f0 e0       	ldi	r31, 0x00	; 0
    1998:	80 81       	ld	r24, Z
    199a:	84 60       	ori	r24, 0x04	; 4
    199c:	8c 93       	st	X, r24
	case TIMER2_CHANNEL:

		break;
	default : break;
	}
}
    199e:	0f 90       	pop	r0
    19a0:	0f 90       	pop	r0
    19a2:	0f 90       	pop	r0
    19a4:	cf 91       	pop	r28
    19a6:	df 91       	pop	r29
    19a8:	08 95       	ret

000019aa <M_Timer_Void_TimerStop>:
void M_Timer_Void_TimerStop(u8 Copy_U8_TimerChannel)
{
    19aa:	df 93       	push	r29
    19ac:	cf 93       	push	r28
    19ae:	00 d0       	rcall	.+0      	; 0x19b0 <M_Timer_Void_TimerStop+0x6>
    19b0:	0f 92       	push	r0
    19b2:	cd b7       	in	r28, 0x3d	; 61
    19b4:	de b7       	in	r29, 0x3e	; 62
    19b6:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_TimerChannel)
    19b8:	89 81       	ldd	r24, Y+1	; 0x01
    19ba:	28 2f       	mov	r18, r24
    19bc:	30 e0       	ldi	r19, 0x00	; 0
    19be:	3b 83       	std	Y+3, r19	; 0x03
    19c0:	2a 83       	std	Y+2, r18	; 0x02
    19c2:	8a 81       	ldd	r24, Y+2	; 0x02
    19c4:	9b 81       	ldd	r25, Y+3	; 0x03
    19c6:	00 97       	sbiw	r24, 0x00	; 0
    19c8:	31 f0       	breq	.+12     	; 0x19d6 <M_Timer_Void_TimerStop+0x2c>
    19ca:	2a 81       	ldd	r18, Y+2	; 0x02
    19cc:	3b 81       	ldd	r19, Y+3	; 0x03
    19ce:	21 30       	cpi	r18, 0x01	; 1
    19d0:	31 05       	cpc	r19, r1
    19d2:	b9 f0       	breq	.+46     	; 0x1a02 <M_Timer_Void_TimerStop+0x58>
    19d4:	2b c0       	rjmp	.+86     	; 0x1a2c <M_Timer_Void_TimerStop+0x82>
	{
	case TIMER0_CHANNEL:
		CLR_BIT(TCCR0_REG,CS00_BIT);
    19d6:	a3 e5       	ldi	r26, 0x53	; 83
    19d8:	b0 e0       	ldi	r27, 0x00	; 0
    19da:	e3 e5       	ldi	r30, 0x53	; 83
    19dc:	f0 e0       	ldi	r31, 0x00	; 0
    19de:	80 81       	ld	r24, Z
    19e0:	8e 7f       	andi	r24, 0xFE	; 254
    19e2:	8c 93       	st	X, r24
		CLR_BIT(TCCR0_REG,CS01_BIT);
    19e4:	a3 e5       	ldi	r26, 0x53	; 83
    19e6:	b0 e0       	ldi	r27, 0x00	; 0
    19e8:	e3 e5       	ldi	r30, 0x53	; 83
    19ea:	f0 e0       	ldi	r31, 0x00	; 0
    19ec:	80 81       	ld	r24, Z
    19ee:	8d 7f       	andi	r24, 0xFD	; 253
    19f0:	8c 93       	st	X, r24
		CLR_BIT(TCCR0_REG,CS02_BIT);
    19f2:	a3 e5       	ldi	r26, 0x53	; 83
    19f4:	b0 e0       	ldi	r27, 0x00	; 0
    19f6:	e3 e5       	ldi	r30, 0x53	; 83
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	80 81       	ld	r24, Z
    19fc:	8b 7f       	andi	r24, 0xFB	; 251
    19fe:	8c 93       	st	X, r24
    1a00:	15 c0       	rjmp	.+42     	; 0x1a2c <M_Timer_Void_TimerStop+0x82>
		break;
	case TIMER1_CHANNEL:
		CLR_BIT(TCCR1B_REG,CS10_BIT);
    1a02:	ae e4       	ldi	r26, 0x4E	; 78
    1a04:	b0 e0       	ldi	r27, 0x00	; 0
    1a06:	ee e4       	ldi	r30, 0x4E	; 78
    1a08:	f0 e0       	ldi	r31, 0x00	; 0
    1a0a:	80 81       	ld	r24, Z
    1a0c:	8e 7f       	andi	r24, 0xFE	; 254
    1a0e:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B_REG,CS11_BIT);
    1a10:	ae e4       	ldi	r26, 0x4E	; 78
    1a12:	b0 e0       	ldi	r27, 0x00	; 0
    1a14:	ee e4       	ldi	r30, 0x4E	; 78
    1a16:	f0 e0       	ldi	r31, 0x00	; 0
    1a18:	80 81       	ld	r24, Z
    1a1a:	8d 7f       	andi	r24, 0xFD	; 253
    1a1c:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B_REG,CS12_BIT);
    1a1e:	ae e4       	ldi	r26, 0x4E	; 78
    1a20:	b0 e0       	ldi	r27, 0x00	; 0
    1a22:	ee e4       	ldi	r30, 0x4E	; 78
    1a24:	f0 e0       	ldi	r31, 0x00	; 0
    1a26:	80 81       	ld	r24, Z
    1a28:	8b 7f       	andi	r24, 0xFB	; 251
    1a2a:	8c 93       	st	X, r24
	case TIMER2_CHANNEL:

		break;
	default : break;
	}
}
    1a2c:	0f 90       	pop	r0
    1a2e:	0f 90       	pop	r0
    1a30:	0f 90       	pop	r0
    1a32:	cf 91       	pop	r28
    1a34:	df 91       	pop	r29
    1a36:	08 95       	ret

00001a38 <M_Timer_Void_PWMInit>:



void M_Timer_Void_PWMInit(u8 Copy_U8_TimerChannel)
{
    1a38:	df 93       	push	r29
    1a3a:	cf 93       	push	r28
    1a3c:	00 d0       	rcall	.+0      	; 0x1a3e <M_Timer_Void_PWMInit+0x6>
    1a3e:	0f 92       	push	r0
    1a40:	cd b7       	in	r28, 0x3d	; 61
    1a42:	de b7       	in	r29, 0x3e	; 62
    1a44:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_TimerChannel)
    1a46:	89 81       	ldd	r24, Y+1	; 0x01
    1a48:	28 2f       	mov	r18, r24
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	3b 83       	std	Y+3, r19	; 0x03
    1a4e:	2a 83       	std	Y+2, r18	; 0x02
    1a50:	8a 81       	ldd	r24, Y+2	; 0x02
    1a52:	9b 81       	ldd	r25, Y+3	; 0x03
    1a54:	00 97       	sbiw	r24, 0x00	; 0
    1a56:	31 f0       	breq	.+12     	; 0x1a64 <M_Timer_Void_PWMInit+0x2c>
    1a58:	2a 81       	ldd	r18, Y+2	; 0x02
    1a5a:	3b 81       	ldd	r19, Y+3	; 0x03
    1a5c:	21 30       	cpi	r18, 0x01	; 1
    1a5e:	31 05       	cpc	r19, r1
    1a60:	11 f1       	breq	.+68     	; 0x1aa6 <M_Timer_Void_PWMInit+0x6e>
    1a62:	53 c0       	rjmp	.+166    	; 0x1b0a <M_Timer_Void_PWMInit+0xd2>
	{
	case TIMER0_CHANNEL:
		M_DIO_Void_SetPinDirection(PB3_PIN,OUTPUT);
    1a64:	87 e1       	ldi	r24, 0x17	; 23
    1a66:	61 e0       	ldi	r22, 0x01	; 1
    1a68:	0e 94 a5 07 	call	0xf4a	; 0xf4a <M_DIO_Void_SetPinDirection>
#if   PWM0_MODE   ==   FAST_PWM
		SET_BIT(TCCR0_REG,WGM00_BIT);
    1a6c:	a3 e5       	ldi	r26, 0x53	; 83
    1a6e:	b0 e0       	ldi	r27, 0x00	; 0
    1a70:	e3 e5       	ldi	r30, 0x53	; 83
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	80 81       	ld	r24, Z
    1a76:	80 64       	ori	r24, 0x40	; 64
    1a78:	8c 93       	st	X, r24
		SET_BIT(TCCR0_REG,WGM01_BIT);
    1a7a:	a3 e5       	ldi	r26, 0x53	; 83
    1a7c:	b0 e0       	ldi	r27, 0x00	; 0
    1a7e:	e3 e5       	ldi	r30, 0x53	; 83
    1a80:	f0 e0       	ldi	r31, 0x00	; 0
    1a82:	80 81       	ld	r24, Z
    1a84:	88 60       	ori	r24, 0x08	; 8
    1a86:	8c 93       	st	X, r24
#elif PWM0_MODE   ==   PHASE_CORRECT_PWM
		SET_BIT(TCCR0_REG,WGM00_BIT);
		CLR_BIT(TCCR0_REG,WGM01_BIT);
#endif
#if   PWM0_MODE2   ==   NON_INVERTED
		CLR_BIT(TCCR0_REG,COM00_BIT);
    1a88:	a3 e5       	ldi	r26, 0x53	; 83
    1a8a:	b0 e0       	ldi	r27, 0x00	; 0
    1a8c:	e3 e5       	ldi	r30, 0x53	; 83
    1a8e:	f0 e0       	ldi	r31, 0x00	; 0
    1a90:	80 81       	ld	r24, Z
    1a92:	8f 7e       	andi	r24, 0xEF	; 239
    1a94:	8c 93       	st	X, r24
		SET_BIT(TCCR0_REG,COM01_BIT);
    1a96:	a3 e5       	ldi	r26, 0x53	; 83
    1a98:	b0 e0       	ldi	r27, 0x00	; 0
    1a9a:	e3 e5       	ldi	r30, 0x53	; 83
    1a9c:	f0 e0       	ldi	r31, 0x00	; 0
    1a9e:	80 81       	ld	r24, Z
    1aa0:	80 62       	ori	r24, 0x20	; 32
    1aa2:	8c 93       	st	X, r24
    1aa4:	32 c0       	rjmp	.+100    	; 0x1b0a <M_Timer_Void_PWMInit+0xd2>
		SET_BIT(TCCR0_REG,COM00_BIT);
		SET_BIT(TCCR0_REG,COM01_BIT);
#endif
		break;
	case TIMER1_CHANNEL:
		M_DIO_Void_SetPinDirection(PD5_PIN,OUTPUT);
    1aa6:	8d e2       	ldi	r24, 0x2D	; 45
    1aa8:	61 e0       	ldi	r22, 0x01	; 1
    1aaa:	0e 94 a5 07 	call	0xf4a	; 0xf4a <M_DIO_Void_SetPinDirection>
		M_DIO_Void_SetPinDirection(PD4_PIN,OUTPUT);
    1aae:	8c e2       	ldi	r24, 0x2C	; 44
    1ab0:	61 e0       	ldi	r22, 0x01	; 1
    1ab2:	0e 94 a5 07 	call	0xf4a	; 0xf4a <M_DIO_Void_SetPinDirection>
		/* TO SELECT MODE NUMBER 14 AT TABLE (47) */
		CLR_BIT(TCCR1A_REG,WGM10_BIT);
    1ab6:	af e4       	ldi	r26, 0x4F	; 79
    1ab8:	b0 e0       	ldi	r27, 0x00	; 0
    1aba:	ef e4       	ldi	r30, 0x4F	; 79
    1abc:	f0 e0       	ldi	r31, 0x00	; 0
    1abe:	80 81       	ld	r24, Z
    1ac0:	8e 7f       	andi	r24, 0xFE	; 254
    1ac2:	8c 93       	st	X, r24
		SET_BIT(TCCR1A_REG,WGM11_BIT);
    1ac4:	af e4       	ldi	r26, 0x4F	; 79
    1ac6:	b0 e0       	ldi	r27, 0x00	; 0
    1ac8:	ef e4       	ldi	r30, 0x4F	; 79
    1aca:	f0 e0       	ldi	r31, 0x00	; 0
    1acc:	80 81       	ld	r24, Z
    1ace:	82 60       	ori	r24, 0x02	; 2
    1ad0:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_REG,WGM12_BIT);
    1ad2:	ae e4       	ldi	r26, 0x4E	; 78
    1ad4:	b0 e0       	ldi	r27, 0x00	; 0
    1ad6:	ee e4       	ldi	r30, 0x4E	; 78
    1ad8:	f0 e0       	ldi	r31, 0x00	; 0
    1ada:	80 81       	ld	r24, Z
    1adc:	88 60       	ori	r24, 0x08	; 8
    1ade:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_REG,WGM13_BIT);
    1ae0:	ae e4       	ldi	r26, 0x4E	; 78
    1ae2:	b0 e0       	ldi	r27, 0x00	; 0
    1ae4:	ee e4       	ldi	r30, 0x4E	; 78
    1ae6:	f0 e0       	ldi	r31, 0x00	; 0
    1ae8:	80 81       	ld	r24, Z
    1aea:	80 61       	ori	r24, 0x10	; 16
    1aec:	8c 93       	st	X, r24
		/* TO SELECT NON INVERTED MODE */
		CLR_BIT(TCCR1A_REG,COM1A0_BIT);
    1aee:	af e4       	ldi	r26, 0x4F	; 79
    1af0:	b0 e0       	ldi	r27, 0x00	; 0
    1af2:	ef e4       	ldi	r30, 0x4F	; 79
    1af4:	f0 e0       	ldi	r31, 0x00	; 0
    1af6:	80 81       	ld	r24, Z
    1af8:	8f 7b       	andi	r24, 0xBF	; 191
    1afa:	8c 93       	st	X, r24
		SET_BIT(TCCR1A_REG,COM1A1_BIT);
    1afc:	af e4       	ldi	r26, 0x4F	; 79
    1afe:	b0 e0       	ldi	r27, 0x00	; 0
    1b00:	ef e4       	ldi	r30, 0x4F	; 79
    1b02:	f0 e0       	ldi	r31, 0x00	; 0
    1b04:	80 81       	ld	r24, Z
    1b06:	80 68       	ori	r24, 0x80	; 128
    1b08:	8c 93       	st	X, r24
	case TIMER2_CHANNEL:

		break;
	default : break;
	}
}
    1b0a:	0f 90       	pop	r0
    1b0c:	0f 90       	pop	r0
    1b0e:	0f 90       	pop	r0
    1b10:	cf 91       	pop	r28
    1b12:	df 91       	pop	r29
    1b14:	08 95       	ret

00001b16 <M_Timer_Void_PWMSetDutyCycle>:
void M_Timer_Void_PWMSetDutyCycle(u8 Copy_U8_TimerChannel,f32 Copy_F32_DutyCycle)
{
    1b16:	0f 93       	push	r16
    1b18:	1f 93       	push	r17
    1b1a:	df 93       	push	r29
    1b1c:	cf 93       	push	r28
    1b1e:	cd b7       	in	r28, 0x3d	; 61
    1b20:	de b7       	in	r29, 0x3e	; 62
    1b22:	27 97       	sbiw	r28, 0x07	; 7
    1b24:	0f b6       	in	r0, 0x3f	; 63
    1b26:	f8 94       	cli
    1b28:	de bf       	out	0x3e, r29	; 62
    1b2a:	0f be       	out	0x3f, r0	; 63
    1b2c:	cd bf       	out	0x3d, r28	; 61
    1b2e:	89 83       	std	Y+1, r24	; 0x01
    1b30:	4a 83       	std	Y+2, r20	; 0x02
    1b32:	5b 83       	std	Y+3, r21	; 0x03
    1b34:	6c 83       	std	Y+4, r22	; 0x04
    1b36:	7d 83       	std	Y+5, r23	; 0x05
	switch(Copy_U8_TimerChannel)
    1b38:	89 81       	ldd	r24, Y+1	; 0x01
    1b3a:	28 2f       	mov	r18, r24
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	3f 83       	std	Y+7, r19	; 0x07
    1b40:	2e 83       	std	Y+6, r18	; 0x06
    1b42:	8e 81       	ldd	r24, Y+6	; 0x06
    1b44:	9f 81       	ldd	r25, Y+7	; 0x07
    1b46:	00 97       	sbiw	r24, 0x00	; 0
    1b48:	31 f0       	breq	.+12     	; 0x1b56 <M_Timer_Void_PWMSetDutyCycle+0x40>
    1b4a:	ee 81       	ldd	r30, Y+6	; 0x06
    1b4c:	ff 81       	ldd	r31, Y+7	; 0x07
    1b4e:	e1 30       	cpi	r30, 0x01	; 1
    1b50:	f1 05       	cpc	r31, r1
    1b52:	e1 f1       	breq	.+120    	; 0x1bcc <M_Timer_Void_PWMSetDutyCycle+0xb6>
    1b54:	71 c0       	rjmp	.+226    	; 0x1c38 <M_Timer_Void_PWMSetDutyCycle+0x122>
	{
	case TIMER0_CHANNEL:
#if   PWM0_MODE   ==   FAST_PWM
#if   PWM0_MODE2   ==   NON_INVERTED
		if(Copy_F32_DutyCycle == 0)
    1b56:	6a 81       	ldd	r22, Y+2	; 0x02
    1b58:	7b 81       	ldd	r23, Y+3	; 0x03
    1b5a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b5c:	9d 81       	ldd	r25, Y+5	; 0x05
    1b5e:	20 e0       	ldi	r18, 0x00	; 0
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	40 e0       	ldi	r20, 0x00	; 0
    1b64:	50 e0       	ldi	r21, 0x00	; 0
    1b66:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    1b6a:	88 23       	and	r24, r24
    1b6c:	21 f4       	brne	.+8      	; 0x1b76 <M_Timer_Void_PWMSetDutyCycle+0x60>
		{
			OCR0_REG = 0;
    1b6e:	ec e5       	ldi	r30, 0x5C	; 92
    1b70:	f0 e0       	ldi	r31, 0x00	; 0
    1b72:	10 82       	st	Z, r1
    1b74:	61 c0       	rjmp	.+194    	; 0x1c38 <M_Timer_Void_PWMSetDutyCycle+0x122>
		}
		else
		{
			OCR0_REG = ((Copy_F32_DutyCycle * 256) / 100) - 1;
    1b76:	0c e5       	ldi	r16, 0x5C	; 92
    1b78:	10 e0       	ldi	r17, 0x00	; 0
    1b7a:	6a 81       	ldd	r22, Y+2	; 0x02
    1b7c:	7b 81       	ldd	r23, Y+3	; 0x03
    1b7e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b80:	9d 81       	ldd	r25, Y+5	; 0x05
    1b82:	20 e0       	ldi	r18, 0x00	; 0
    1b84:	30 e0       	ldi	r19, 0x00	; 0
    1b86:	40 e8       	ldi	r20, 0x80	; 128
    1b88:	53 e4       	ldi	r21, 0x43	; 67
    1b8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b8e:	dc 01       	movw	r26, r24
    1b90:	cb 01       	movw	r24, r22
    1b92:	bc 01       	movw	r22, r24
    1b94:	cd 01       	movw	r24, r26
    1b96:	20 e0       	ldi	r18, 0x00	; 0
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	48 ec       	ldi	r20, 0xC8	; 200
    1b9c:	52 e4       	ldi	r21, 0x42	; 66
    1b9e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1ba2:	dc 01       	movw	r26, r24
    1ba4:	cb 01       	movw	r24, r22
    1ba6:	bc 01       	movw	r22, r24
    1ba8:	cd 01       	movw	r24, r26
    1baa:	20 e0       	ldi	r18, 0x00	; 0
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	40 e8       	ldi	r20, 0x80	; 128
    1bb0:	5f e3       	ldi	r21, 0x3F	; 63
    1bb2:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1bb6:	dc 01       	movw	r26, r24
    1bb8:	cb 01       	movw	r24, r22
    1bba:	bc 01       	movw	r22, r24
    1bbc:	cd 01       	movw	r24, r26
    1bbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bc2:	dc 01       	movw	r26, r24
    1bc4:	cb 01       	movw	r24, r22
    1bc6:	f8 01       	movw	r30, r16
    1bc8:	80 83       	st	Z, r24
    1bca:	36 c0       	rjmp	.+108    	; 0x1c38 <M_Timer_Void_PWMSetDutyCycle+0x122>

#endif
#endif
		break;
	case TIMER1_CHANNEL:
		OCR1A_REG = ((Copy_F32_DutyCycle * ICR1_REG) / 100) - 1;
    1bcc:	0a e4       	ldi	r16, 0x4A	; 74
    1bce:	10 e0       	ldi	r17, 0x00	; 0
    1bd0:	e6 e4       	ldi	r30, 0x46	; 70
    1bd2:	f0 e0       	ldi	r31, 0x00	; 0
    1bd4:	80 81       	ld	r24, Z
    1bd6:	91 81       	ldd	r25, Z+1	; 0x01
    1bd8:	cc 01       	movw	r24, r24
    1bda:	a0 e0       	ldi	r26, 0x00	; 0
    1bdc:	b0 e0       	ldi	r27, 0x00	; 0
    1bde:	bc 01       	movw	r22, r24
    1be0:	cd 01       	movw	r24, r26
    1be2:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    1be6:	dc 01       	movw	r26, r24
    1be8:	cb 01       	movw	r24, r22
    1bea:	bc 01       	movw	r22, r24
    1bec:	cd 01       	movw	r24, r26
    1bee:	2a 81       	ldd	r18, Y+2	; 0x02
    1bf0:	3b 81       	ldd	r19, Y+3	; 0x03
    1bf2:	4c 81       	ldd	r20, Y+4	; 0x04
    1bf4:	5d 81       	ldd	r21, Y+5	; 0x05
    1bf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bfa:	dc 01       	movw	r26, r24
    1bfc:	cb 01       	movw	r24, r22
    1bfe:	bc 01       	movw	r22, r24
    1c00:	cd 01       	movw	r24, r26
    1c02:	20 e0       	ldi	r18, 0x00	; 0
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	48 ec       	ldi	r20, 0xC8	; 200
    1c08:	52 e4       	ldi	r21, 0x42	; 66
    1c0a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1c0e:	dc 01       	movw	r26, r24
    1c10:	cb 01       	movw	r24, r22
    1c12:	bc 01       	movw	r22, r24
    1c14:	cd 01       	movw	r24, r26
    1c16:	20 e0       	ldi	r18, 0x00	; 0
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	40 e8       	ldi	r20, 0x80	; 128
    1c1c:	5f e3       	ldi	r21, 0x3F	; 63
    1c1e:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1c22:	dc 01       	movw	r26, r24
    1c24:	cb 01       	movw	r24, r22
    1c26:	bc 01       	movw	r22, r24
    1c28:	cd 01       	movw	r24, r26
    1c2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c2e:	dc 01       	movw	r26, r24
    1c30:	cb 01       	movw	r24, r22
    1c32:	f8 01       	movw	r30, r16
    1c34:	91 83       	std	Z+1, r25	; 0x01
    1c36:	80 83       	st	Z, r24
		break;
	case TIMER2_CHANNEL:
		break;
	default:  break;
	}
}
    1c38:	27 96       	adiw	r28, 0x07	; 7
    1c3a:	0f b6       	in	r0, 0x3f	; 63
    1c3c:	f8 94       	cli
    1c3e:	de bf       	out	0x3e, r29	; 62
    1c40:	0f be       	out	0x3f, r0	; 63
    1c42:	cd bf       	out	0x3d, r28	; 61
    1c44:	cf 91       	pop	r28
    1c46:	df 91       	pop	r29
    1c48:	1f 91       	pop	r17
    1c4a:	0f 91       	pop	r16
    1c4c:	08 95       	ret

00001c4e <M_Timer_Void_PWMSetFreaquancy>:
void M_Timer_Void_PWMSetFreaquancy(u8 Copy_U8_Freq)
{
    1c4e:	0f 93       	push	r16
    1c50:	1f 93       	push	r17
    1c52:	df 93       	push	r29
    1c54:	cf 93       	push	r28
    1c56:	0f 92       	push	r0
    1c58:	cd b7       	in	r28, 0x3d	; 61
    1c5a:	de b7       	in	r29, 0x3e	; 62
    1c5c:	89 83       	std	Y+1, r24	; 0x01
	ICR1_REG = ((F_OSC * 1000000 / 256) / Copy_U8_Freq);
    1c5e:	06 e4       	ldi	r16, 0x46	; 70
    1c60:	10 e0       	ldi	r17, 0x00	; 0
    1c62:	89 81       	ldd	r24, Y+1	; 0x01
    1c64:	28 2f       	mov	r18, r24
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	40 e0       	ldi	r20, 0x00	; 0
    1c6a:	50 e0       	ldi	r21, 0x00	; 0
    1c6c:	84 e2       	ldi	r24, 0x24	; 36
    1c6e:	94 ef       	ldi	r25, 0xF4	; 244
    1c70:	a0 e0       	ldi	r26, 0x00	; 0
    1c72:	b0 e0       	ldi	r27, 0x00	; 0
    1c74:	bc 01       	movw	r22, r24
    1c76:	cd 01       	movw	r24, r26
    1c78:	0e 94 98 1e 	call	0x3d30	; 0x3d30 <__divmodsi4>
    1c7c:	da 01       	movw	r26, r20
    1c7e:	c9 01       	movw	r24, r18
    1c80:	f8 01       	movw	r30, r16
    1c82:	91 83       	std	Z+1, r25	; 0x01
    1c84:	80 83       	st	Z, r24
}
    1c86:	0f 90       	pop	r0
    1c88:	cf 91       	pop	r28
    1c8a:	df 91       	pop	r29
    1c8c:	1f 91       	pop	r17
    1c8e:	0f 91       	pop	r16
    1c90:	08 95       	ret

00001c92 <M_Timer_Void_PWMStart>:
void M_Timer_Void_PWMStart(u8 Copy_U8_TimerChannel)
{
    1c92:	df 93       	push	r29
    1c94:	cf 93       	push	r28
    1c96:	0f 92       	push	r0
    1c98:	cd b7       	in	r28, 0x3d	; 61
    1c9a:	de b7       	in	r29, 0x3e	; 62
    1c9c:	89 83       	std	Y+1, r24	; 0x01
	M_Timer_Void_TimerStart(Copy_U8_TimerChannel);
    1c9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ca0:	0e 94 8e 0c 	call	0x191c	; 0x191c <M_Timer_Void_TimerStart>
}
    1ca4:	0f 90       	pop	r0
    1ca6:	cf 91       	pop	r28
    1ca8:	df 91       	pop	r29
    1caa:	08 95       	ret

00001cac <M_Timer_Void_PWMStop>:
void M_Timer_Void_PWMStop(u8 Copy_U8_TimerChannel)
{
    1cac:	df 93       	push	r29
    1cae:	cf 93       	push	r28
    1cb0:	0f 92       	push	r0
    1cb2:	cd b7       	in	r28, 0x3d	; 61
    1cb4:	de b7       	in	r29, 0x3e	; 62
    1cb6:	89 83       	std	Y+1, r24	; 0x01
	M_Timer_Void_TimerStop(Copy_U8_TimerChannel);
    1cb8:	89 81       	ldd	r24, Y+1	; 0x01
    1cba:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <M_Timer_Void_TimerStop>
}
    1cbe:	0f 90       	pop	r0
    1cc0:	cf 91       	pop	r28
    1cc2:	df 91       	pop	r29
    1cc4:	08 95       	ret

00001cc6 <M_Timer_Void_SetCallBack>:

void M_Timer_Void_SetCallBack(u8 Copy_U8_TimerChannel,void(*Copy_Ptr)(void))
{
    1cc6:	df 93       	push	r29
    1cc8:	cf 93       	push	r28
    1cca:	00 d0       	rcall	.+0      	; 0x1ccc <M_Timer_Void_SetCallBack+0x6>
    1ccc:	00 d0       	rcall	.+0      	; 0x1cce <M_Timer_Void_SetCallBack+0x8>
    1cce:	0f 92       	push	r0
    1cd0:	cd b7       	in	r28, 0x3d	; 61
    1cd2:	de b7       	in	r29, 0x3e	; 62
    1cd4:	89 83       	std	Y+1, r24	; 0x01
    1cd6:	7b 83       	std	Y+3, r23	; 0x03
    1cd8:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_U8_TimerChannel)
    1cda:	89 81       	ldd	r24, Y+1	; 0x01
    1cdc:	28 2f       	mov	r18, r24
    1cde:	30 e0       	ldi	r19, 0x00	; 0
    1ce0:	3d 83       	std	Y+5, r19	; 0x05
    1ce2:	2c 83       	std	Y+4, r18	; 0x04
    1ce4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ce6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ce8:	81 30       	cpi	r24, 0x01	; 1
    1cea:	91 05       	cpc	r25, r1
    1cec:	81 f0       	breq	.+32     	; 0x1d0e <M_Timer_Void_SetCallBack+0x48>
    1cee:	2c 81       	ldd	r18, Y+4	; 0x04
    1cf0:	3d 81       	ldd	r19, Y+5	; 0x05
    1cf2:	22 30       	cpi	r18, 0x02	; 2
    1cf4:	31 05       	cpc	r19, r1
    1cf6:	91 f0       	breq	.+36     	; 0x1d1c <M_Timer_Void_SetCallBack+0x56>
    1cf8:	8c 81       	ldd	r24, Y+4	; 0x04
    1cfa:	9d 81       	ldd	r25, Y+5	; 0x05
    1cfc:	00 97       	sbiw	r24, 0x00	; 0
    1cfe:	a1 f4       	brne	.+40     	; 0x1d28 <M_Timer_Void_SetCallBack+0x62>
	{
	case TIMER0_CHANNEL:
		Timer0_CallBack = Copy_Ptr;
    1d00:	8a 81       	ldd	r24, Y+2	; 0x02
    1d02:	9b 81       	ldd	r25, Y+3	; 0x03
    1d04:	90 93 a8 01 	sts	0x01A8, r25
    1d08:	80 93 a7 01 	sts	0x01A7, r24
    1d0c:	0d c0       	rjmp	.+26     	; 0x1d28 <M_Timer_Void_SetCallBack+0x62>
		break;
	case TIMER1_CHANNEL:
		Timer1_CallBack = Copy_Ptr;
    1d0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d10:	9b 81       	ldd	r25, Y+3	; 0x03
    1d12:	90 93 a6 01 	sts	0x01A6, r25
    1d16:	80 93 a5 01 	sts	0x01A5, r24
    1d1a:	06 c0       	rjmp	.+12     	; 0x1d28 <M_Timer_Void_SetCallBack+0x62>
		break;
	case TIMER2_CHANNEL:
		Timer2_CallBack = Copy_Ptr;
    1d1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1e:	9b 81       	ldd	r25, Y+3	; 0x03
    1d20:	90 93 a4 01 	sts	0x01A4, r25
    1d24:	80 93 a3 01 	sts	0x01A3, r24
		break;
	}
}
    1d28:	0f 90       	pop	r0
    1d2a:	0f 90       	pop	r0
    1d2c:	0f 90       	pop	r0
    1d2e:	0f 90       	pop	r0
    1d30:	0f 90       	pop	r0
    1d32:	cf 91       	pop	r28
    1d34:	df 91       	pop	r29
    1d36:	08 95       	ret

00001d38 <__vector_11>:
#if TIMER0_MODE   ==   NORMAL_MODE
ISR(TIMER0_OVF_vect)
{
    1d38:	1f 92       	push	r1
    1d3a:	0f 92       	push	r0
    1d3c:	0f b6       	in	r0, 0x3f	; 63
    1d3e:	0f 92       	push	r0
    1d40:	11 24       	eor	r1, r1
    1d42:	2f 93       	push	r18
    1d44:	3f 93       	push	r19
    1d46:	4f 93       	push	r20
    1d48:	5f 93       	push	r21
    1d4a:	6f 93       	push	r22
    1d4c:	7f 93       	push	r23
    1d4e:	8f 93       	push	r24
    1d50:	9f 93       	push	r25
    1d52:	af 93       	push	r26
    1d54:	bf 93       	push	r27
    1d56:	ef 93       	push	r30
    1d58:	ff 93       	push	r31
    1d5a:	df 93       	push	r29
    1d5c:	cf 93       	push	r28
    1d5e:	cd b7       	in	r28, 0x3d	; 61
    1d60:	de b7       	in	r29, 0x3e	; 62
	static u32 Local_U32_Counter = 0;
	Local_U32_Counter++;
    1d62:	80 91 9d 01 	lds	r24, 0x019D
    1d66:	90 91 9e 01 	lds	r25, 0x019E
    1d6a:	a0 91 9f 01 	lds	r26, 0x019F
    1d6e:	b0 91 a0 01 	lds	r27, 0x01A0
    1d72:	01 96       	adiw	r24, 0x01	; 1
    1d74:	a1 1d       	adc	r26, r1
    1d76:	b1 1d       	adc	r27, r1
    1d78:	80 93 9d 01 	sts	0x019D, r24
    1d7c:	90 93 9e 01 	sts	0x019E, r25
    1d80:	a0 93 9f 01 	sts	0x019F, r26
    1d84:	b0 93 a0 01 	sts	0x01A0, r27
	if(Local_U32_Counter == Timer_U32_NumOfOverFlows)
    1d88:	20 91 9d 01 	lds	r18, 0x019D
    1d8c:	30 91 9e 01 	lds	r19, 0x019E
    1d90:	40 91 9f 01 	lds	r20, 0x019F
    1d94:	50 91 a0 01 	lds	r21, 0x01A0
    1d98:	80 91 94 01 	lds	r24, 0x0194
    1d9c:	90 91 95 01 	lds	r25, 0x0195
    1da0:	a0 91 96 01 	lds	r26, 0x0196
    1da4:	b0 91 97 01 	lds	r27, 0x0197
    1da8:	28 17       	cp	r18, r24
    1daa:	39 07       	cpc	r19, r25
    1dac:	4a 07       	cpc	r20, r26
    1dae:	5b 07       	cpc	r21, r27
    1db0:	99 f4       	brne	.+38     	; 0x1dd8 <__vector_11+0xa0>
	{
		Timer0_CallBack();
    1db2:	e0 91 a7 01 	lds	r30, 0x01A7
    1db6:	f0 91 a8 01 	lds	r31, 0x01A8
    1dba:	09 95       	icall
		TCNT0_REG = 256 - Timer_U8_RemTicks;
    1dbc:	e2 e5       	ldi	r30, 0x52	; 82
    1dbe:	f0 e0       	ldi	r31, 0x00	; 0
    1dc0:	80 91 98 01 	lds	r24, 0x0198
    1dc4:	81 95       	neg	r24
    1dc6:	80 83       	st	Z, r24
		Local_U32_Counter = 0;
    1dc8:	10 92 9d 01 	sts	0x019D, r1
    1dcc:	10 92 9e 01 	sts	0x019E, r1
    1dd0:	10 92 9f 01 	sts	0x019F, r1
    1dd4:	10 92 a0 01 	sts	0x01A0, r1
	}
}
    1dd8:	cf 91       	pop	r28
    1dda:	df 91       	pop	r29
    1ddc:	ff 91       	pop	r31
    1dde:	ef 91       	pop	r30
    1de0:	bf 91       	pop	r27
    1de2:	af 91       	pop	r26
    1de4:	9f 91       	pop	r25
    1de6:	8f 91       	pop	r24
    1de8:	7f 91       	pop	r23
    1dea:	6f 91       	pop	r22
    1dec:	5f 91       	pop	r21
    1dee:	4f 91       	pop	r20
    1df0:	3f 91       	pop	r19
    1df2:	2f 91       	pop	r18
    1df4:	0f 90       	pop	r0
    1df6:	0f be       	out	0x3f, r0	; 63
    1df8:	0f 90       	pop	r0
    1dfa:	1f 90       	pop	r1
    1dfc:	18 95       	reti

00001dfe <H_DCMotor_Void_DCMotorInit>:
//motor 2 enable
#define DC_MOTOR2_EN      PC0_PIN

// set direction and enable pins of both motors as output
void H_DCMotor_Void_DCMotorInit(void)
{
    1dfe:	df 93       	push	r29
    1e00:	cf 93       	push	r28
    1e02:	cd b7       	in	r28, 0x3d	; 61
    1e04:	de b7       	in	r29, 0x3e	; 62
	M_DIO_Void_SetPinDirection(DC_MOTOR_PIN1,OUTPUT);
    1e06:	83 e2       	ldi	r24, 0x23	; 35
    1e08:	61 e0       	ldi	r22, 0x01	; 1
    1e0a:	0e 94 a5 07 	call	0xf4a	; 0xf4a <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(DC_MOTOR_PIN2,OUTPUT);
    1e0e:	84 e2       	ldi	r24, 0x24	; 36
    1e10:	61 e0       	ldi	r22, 0x01	; 1
    1e12:	0e 94 a5 07 	call	0xf4a	; 0xf4a <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(DC_MOTOR_PIN3,OUTPUT);
    1e16:	81 e2       	ldi	r24, 0x21	; 33
    1e18:	61 e0       	ldi	r22, 0x01	; 1
    1e1a:	0e 94 a5 07 	call	0xf4a	; 0xf4a <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(DC_MOTOR_PIN4,OUTPUT);
    1e1e:	82 e2       	ldi	r24, 0x22	; 34
    1e20:	61 e0       	ldi	r22, 0x01	; 1
    1e22:	0e 94 a5 07 	call	0xf4a	; 0xf4a <M_DIO_Void_SetPinDirection>
    M_DIO_Void_SetPinDirection(DC_MOTOR1_EN,OUTPUT);
    1e26:	8f e1       	ldi	r24, 0x1F	; 31
    1e28:	61 e0       	ldi	r22, 0x01	; 1
    1e2a:	0e 94 a5 07 	call	0xf4a	; 0xf4a <M_DIO_Void_SetPinDirection>
    M_DIO_Void_SetPinDirection(DC_MOTOR2_EN,OUTPUT);
    1e2e:	8e e1       	ldi	r24, 0x1E	; 30
    1e30:	61 e0       	ldi	r22, 0x01	; 1
    1e32:	0e 94 a5 07 	call	0xf4a	; 0xf4a <M_DIO_Void_SetPinDirection>
}
    1e36:	cf 91       	pop	r28
    1e38:	df 91       	pop	r29
    1e3a:	08 95       	ret

00001e3c <H_DCMotor_Void_DCMotorTurnLeft>:

//rotate right wheel to turn car left
void H_DCMotor_Void_DCMotorTurnLeft(void)
{
    1e3c:	df 93       	push	r29
    1e3e:	cf 93       	push	r28
    1e40:	cd b7       	in	r28, 0x3d	; 61
    1e42:	de b7       	in	r29, 0x3e	; 62

	M_DIO_Void_SetPinValue(DC_MOTOR_PIN1,LOW);
    1e44:	83 e2       	ldi	r24, 0x23	; 35
    1e46:	60 e0       	ldi	r22, 0x00	; 0
    1e48:	0e 94 bb 08 	call	0x1176	; 0x1176 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(DC_MOTOR_PIN2,HIGH);
    1e4c:	84 e2       	ldi	r24, 0x24	; 36
    1e4e:	61 e0       	ldi	r22, 0x01	; 1
    1e50:	0e 94 bb 08 	call	0x1176	; 0x1176 <M_DIO_Void_SetPinValue>


}
    1e54:	cf 91       	pop	r28
    1e56:	df 91       	pop	r29
    1e58:	08 95       	ret

00001e5a <H_DCMotor_Void_DCMotorTurnRight>:

//rotate left wheel to turn car right
void H_DCMotor_Void_DCMotorTurnRight(void)
{
    1e5a:	df 93       	push	r29
    1e5c:	cf 93       	push	r28
    1e5e:	cd b7       	in	r28, 0x3d	; 61
    1e60:	de b7       	in	r29, 0x3e	; 62

	M_DIO_Void_SetPinValue(DC_MOTOR_PIN3,LOW);
    1e62:	81 e2       	ldi	r24, 0x21	; 33
    1e64:	60 e0       	ldi	r22, 0x00	; 0
    1e66:	0e 94 bb 08 	call	0x1176	; 0x1176 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(DC_MOTOR_PIN4,HIGH);
    1e6a:	82 e2       	ldi	r24, 0x22	; 34
    1e6c:	61 e0       	ldi	r22, 0x01	; 1
    1e6e:	0e 94 bb 08 	call	0x1176	; 0x1176 <M_DIO_Void_SetPinValue>


}
    1e72:	cf 91       	pop	r28
    1e74:	df 91       	pop	r29
    1e76:	08 95       	ret

00001e78 <H_DCMotor_Void_DCMotorSetDirection1>:

//set direction of motor 1
void H_DCMotor_Void_DCMotorSetDirection1(u8 Copy_U8_Direction)
{
    1e78:	df 93       	push	r29
    1e7a:	cf 93       	push	r28
    1e7c:	00 d0       	rcall	.+0      	; 0x1e7e <H_DCMotor_Void_DCMotorSetDirection1+0x6>
    1e7e:	0f 92       	push	r0
    1e80:	cd b7       	in	r28, 0x3d	; 61
    1e82:	de b7       	in	r29, 0x3e	; 62
    1e84:	89 83       	std	Y+1, r24	; 0x01
switch(Copy_U8_Direction)
    1e86:	89 81       	ldd	r24, Y+1	; 0x01
    1e88:	28 2f       	mov	r18, r24
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	3b 83       	std	Y+3, r19	; 0x03
    1e8e:	2a 83       	std	Y+2, r18	; 0x02
    1e90:	8a 81       	ldd	r24, Y+2	; 0x02
    1e92:	9b 81       	ldd	r25, Y+3	; 0x03
    1e94:	00 97       	sbiw	r24, 0x00	; 0
    1e96:	31 f0       	breq	.+12     	; 0x1ea4 <H_DCMotor_Void_DCMotorSetDirection1+0x2c>
    1e98:	2a 81       	ldd	r18, Y+2	; 0x02
    1e9a:	3b 81       	ldd	r19, Y+3	; 0x03
    1e9c:	21 30       	cpi	r18, 0x01	; 1
    1e9e:	31 05       	cpc	r19, r1
    1ea0:	51 f0       	breq	.+20     	; 0x1eb6 <H_DCMotor_Void_DCMotorSetDirection1+0x3e>
    1ea2:	11 c0       	rjmp	.+34     	; 0x1ec6 <H_DCMotor_Void_DCMotorSetDirection1+0x4e>
{
case ACW:
	M_DIO_Void_SetPinValue(DC_MOTOR_PIN1,LOW);
    1ea4:	83 e2       	ldi	r24, 0x23	; 35
    1ea6:	60 e0       	ldi	r22, 0x00	; 0
    1ea8:	0e 94 bb 08 	call	0x1176	; 0x1176 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(DC_MOTOR_PIN2,HIGH);
    1eac:	84 e2       	ldi	r24, 0x24	; 36
    1eae:	61 e0       	ldi	r22, 0x01	; 1
    1eb0:	0e 94 bb 08 	call	0x1176	; 0x1176 <M_DIO_Void_SetPinValue>
    1eb4:	08 c0       	rjmp	.+16     	; 0x1ec6 <H_DCMotor_Void_DCMotorSetDirection1+0x4e>
	break;
case CW:
	M_DIO_Void_SetPinValue(DC_MOTOR_PIN1,HIGH);
    1eb6:	83 e2       	ldi	r24, 0x23	; 35
    1eb8:	61 e0       	ldi	r22, 0x01	; 1
    1eba:	0e 94 bb 08 	call	0x1176	; 0x1176 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(DC_MOTOR_PIN2,LOW);
    1ebe:	84 e2       	ldi	r24, 0x24	; 36
    1ec0:	60 e0       	ldi	r22, 0x00	; 0
    1ec2:	0e 94 bb 08 	call	0x1176	; 0x1176 <M_DIO_Void_SetPinValue>
	break;
}

//set direction of motor 2
}
    1ec6:	0f 90       	pop	r0
    1ec8:	0f 90       	pop	r0
    1eca:	0f 90       	pop	r0
    1ecc:	cf 91       	pop	r28
    1ece:	df 91       	pop	r29
    1ed0:	08 95       	ret

00001ed2 <H_DCMotor_Void_DCMotorSetDirection2>:

void H_DCMotor_Void_DCMotorSetDirection2(u8 Copy_U8_Direction)
{
    1ed2:	df 93       	push	r29
    1ed4:	cf 93       	push	r28
    1ed6:	00 d0       	rcall	.+0      	; 0x1ed8 <H_DCMotor_Void_DCMotorSetDirection2+0x6>
    1ed8:	0f 92       	push	r0
    1eda:	cd b7       	in	r28, 0x3d	; 61
    1edc:	de b7       	in	r29, 0x3e	; 62
    1ede:	89 83       	std	Y+1, r24	; 0x01
switch(Copy_U8_Direction)
    1ee0:	89 81       	ldd	r24, Y+1	; 0x01
    1ee2:	28 2f       	mov	r18, r24
    1ee4:	30 e0       	ldi	r19, 0x00	; 0
    1ee6:	3b 83       	std	Y+3, r19	; 0x03
    1ee8:	2a 83       	std	Y+2, r18	; 0x02
    1eea:	8a 81       	ldd	r24, Y+2	; 0x02
    1eec:	9b 81       	ldd	r25, Y+3	; 0x03
    1eee:	00 97       	sbiw	r24, 0x00	; 0
    1ef0:	31 f0       	breq	.+12     	; 0x1efe <H_DCMotor_Void_DCMotorSetDirection2+0x2c>
    1ef2:	2a 81       	ldd	r18, Y+2	; 0x02
    1ef4:	3b 81       	ldd	r19, Y+3	; 0x03
    1ef6:	21 30       	cpi	r18, 0x01	; 1
    1ef8:	31 05       	cpc	r19, r1
    1efa:	51 f0       	breq	.+20     	; 0x1f10 <H_DCMotor_Void_DCMotorSetDirection2+0x3e>
    1efc:	11 c0       	rjmp	.+34     	; 0x1f20 <H_DCMotor_Void_DCMotorSetDirection2+0x4e>
{
case ACW:
	M_DIO_Void_SetPinValue(DC_MOTOR_PIN3,LOW);
    1efe:	81 e2       	ldi	r24, 0x21	; 33
    1f00:	60 e0       	ldi	r22, 0x00	; 0
    1f02:	0e 94 bb 08 	call	0x1176	; 0x1176 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(DC_MOTOR_PIN4,HIGH);
    1f06:	82 e2       	ldi	r24, 0x22	; 34
    1f08:	61 e0       	ldi	r22, 0x01	; 1
    1f0a:	0e 94 bb 08 	call	0x1176	; 0x1176 <M_DIO_Void_SetPinValue>
    1f0e:	08 c0       	rjmp	.+16     	; 0x1f20 <H_DCMotor_Void_DCMotorSetDirection2+0x4e>
	break;
case CW:
	M_DIO_Void_SetPinValue(DC_MOTOR_PIN3,HIGH);
    1f10:	81 e2       	ldi	r24, 0x21	; 33
    1f12:	61 e0       	ldi	r22, 0x01	; 1
    1f14:	0e 94 bb 08 	call	0x1176	; 0x1176 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(DC_MOTOR_PIN4,LOW);
    1f18:	82 e2       	ldi	r24, 0x22	; 34
    1f1a:	60 e0       	ldi	r22, 0x00	; 0
    1f1c:	0e 94 bb 08 	call	0x1176	; 0x1176 <M_DIO_Void_SetPinValue>
	break;
}
}
    1f20:	0f 90       	pop	r0
    1f22:	0f 90       	pop	r0
    1f24:	0f 90       	pop	r0
    1f26:	cf 91       	pop	r28
    1f28:	df 91       	pop	r29
    1f2a:	08 95       	ret

00001f2c <H_DCMotor_Void_DCMotorStart>:
void H_DCMotor_Void_DCMotorStart(void)
{
    1f2c:	df 93       	push	r29
    1f2e:	cf 93       	push	r28
    1f30:	cd b7       	in	r28, 0x3d	; 61
    1f32:	de b7       	in	r29, 0x3e	; 62
	//M_Timer_Void_PWMStart(TIMER1_CHANNEL);
	M_DIO_Void_SetPinValue(DC_MOTOR1_EN,HIGH);
    1f34:	8f e1       	ldi	r24, 0x1F	; 31
    1f36:	61 e0       	ldi	r22, 0x01	; 1
    1f38:	0e 94 bb 08 	call	0x1176	; 0x1176 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(DC_MOTOR2_EN,HIGH);
    1f3c:	8e e1       	ldi	r24, 0x1E	; 30
    1f3e:	61 e0       	ldi	r22, 0x01	; 1
    1f40:	0e 94 bb 08 	call	0x1176	; 0x1176 <M_DIO_Void_SetPinValue>
}
    1f44:	cf 91       	pop	r28
    1f46:	df 91       	pop	r29
    1f48:	08 95       	ret

00001f4a <H_DCMotor_Void_DCMotorStopBoth>:

//sets direction pins of both motors low to stop them
void H_DCMotor_Void_DCMotorStopBoth(void)
{
    1f4a:	df 93       	push	r29
    1f4c:	cf 93       	push	r28
    1f4e:	cd b7       	in	r28, 0x3d	; 61
    1f50:	de b7       	in	r29, 0x3e	; 62

	M_DIO_Void_SetPinValue(DC_MOTOR_PIN3,LOW);
    1f52:	81 e2       	ldi	r24, 0x21	; 33
    1f54:	60 e0       	ldi	r22, 0x00	; 0
    1f56:	0e 94 bb 08 	call	0x1176	; 0x1176 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(DC_MOTOR_PIN4,LOW);
    1f5a:	82 e2       	ldi	r24, 0x22	; 34
    1f5c:	60 e0       	ldi	r22, 0x00	; 0
    1f5e:	0e 94 bb 08 	call	0x1176	; 0x1176 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(DC_MOTOR_PIN1,LOW);
    1f62:	83 e2       	ldi	r24, 0x23	; 35
    1f64:	60 e0       	ldi	r22, 0x00	; 0
    1f66:	0e 94 bb 08 	call	0x1176	; 0x1176 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(DC_MOTOR_PIN2,LOW);
    1f6a:	84 e2       	ldi	r24, 0x24	; 36
    1f6c:	60 e0       	ldi	r22, 0x00	; 0
    1f6e:	0e 94 bb 08 	call	0x1176	; 0x1176 <M_DIO_Void_SetPinValue>
}
    1f72:	cf 91       	pop	r28
    1f74:	df 91       	pop	r29
    1f76:	08 95       	ret

00001f78 <H_DCMotor_Void_DCMotorForward>:

//both motors anticlockwise to move car forward
void H_DCMotor_Void_DCMotorForward(void)
{
    1f78:	df 93       	push	r29
    1f7a:	cf 93       	push	r28
    1f7c:	cd b7       	in	r28, 0x3d	; 61
    1f7e:	de b7       	in	r29, 0x3e	; 62
	H_DCMotor_Void_DCMotorSetDirection1(ACW);
    1f80:	80 e0       	ldi	r24, 0x00	; 0
    1f82:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <H_DCMotor_Void_DCMotorSetDirection1>
	H_DCMotor_Void_DCMotorSetDirection2(ACW);
    1f86:	80 e0       	ldi	r24, 0x00	; 0
    1f88:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <H_DCMotor_Void_DCMotorSetDirection2>

}
    1f8c:	cf 91       	pop	r28
    1f8e:	df 91       	pop	r29
    1f90:	08 95       	ret

00001f92 <H_DCMotor_Void_DCMotorBackward>:

//both motors clockwise to move car backward
void H_DCMotor_Void_DCMotorBackward(void)
{
    1f92:	df 93       	push	r29
    1f94:	cf 93       	push	r28
    1f96:	cd b7       	in	r28, 0x3d	; 61
    1f98:	de b7       	in	r29, 0x3e	; 62
	H_DCMotor_Void_DCMotorSetDirection1(CW);
    1f9a:	81 e0       	ldi	r24, 0x01	; 1
    1f9c:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <H_DCMotor_Void_DCMotorSetDirection1>
	H_DCMotor_Void_DCMotorSetDirection2(CW);
    1fa0:	81 e0       	ldi	r24, 0x01	; 1
    1fa2:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <H_DCMotor_Void_DCMotorSetDirection2>

}
    1fa6:	cf 91       	pop	r28
    1fa8:	df 91       	pop	r29
    1faa:	08 95       	ret

00001fac <H_LCD_Void_LCDInit>:
#define LCD_EN_PIN       PB4_PIN
#define LCD_RW_PIN       PB2_PIN
#define LCD_RS_PIN       PB1_PIN

void H_LCD_Void_LCDInit(void)
{
    1fac:	df 93       	push	r29
    1fae:	cf 93       	push	r28
    1fb0:	cd b7       	in	r28, 0x3d	; 61
    1fb2:	de b7       	in	r29, 0x3e	; 62


	M_DIO_Void_SetPinDirection(LCD_D4_PIN,OUTPUT);
    1fb4:	8e e0       	ldi	r24, 0x0E	; 14
    1fb6:	61 e0       	ldi	r22, 0x01	; 1
    1fb8:	0e 94 a5 07 	call	0xf4a	; 0xf4a <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D5_PIN,OUTPUT);
    1fbc:	8f e0       	ldi	r24, 0x0F	; 15
    1fbe:	61 e0       	ldi	r22, 0x01	; 1
    1fc0:	0e 94 a5 07 	call	0xf4a	; 0xf4a <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D6_PIN,OUTPUT);
    1fc4:	80 e1       	ldi	r24, 0x10	; 16
    1fc6:	61 e0       	ldi	r22, 0x01	; 1
    1fc8:	0e 94 a5 07 	call	0xf4a	; 0xf4a <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D7_PIN,OUTPUT);
    1fcc:	81 e1       	ldi	r24, 0x11	; 17
    1fce:	61 e0       	ldi	r22, 0x01	; 1
    1fd0:	0e 94 a5 07 	call	0xf4a	; 0xf4a <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_RS_PIN,OUTPUT);
    1fd4:	85 e1       	ldi	r24, 0x15	; 21
    1fd6:	61 e0       	ldi	r22, 0x01	; 1
    1fd8:	0e 94 a5 07 	call	0xf4a	; 0xf4a <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_EN_PIN,OUTPUT);
    1fdc:	88 e1       	ldi	r24, 0x18	; 24
    1fde:	61 e0       	ldi	r22, 0x01	; 1
    1fe0:	0e 94 a5 07 	call	0xf4a	; 0xf4a <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_RW_PIN,OUTPUT);
    1fe4:	86 e1       	ldi	r24, 0x16	; 22
    1fe6:	61 e0       	ldi	r22, 0x01	; 1
    1fe8:	0e 94 a5 07 	call	0xf4a	; 0xf4a <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinValue(LCD_RW_PIN,LOW);
    1fec:	86 e1       	ldi	r24, 0x16	; 22
    1fee:	60 e0       	ldi	r22, 0x00	; 0
    1ff0:	0e 94 bb 08 	call	0x1176	; 0x1176 <M_DIO_Void_SetPinValue>

	H_LCD_Void_LCDWriteCommand(LCD_4_BIT_MODE_1);
    1ff4:	83 e3       	ldi	r24, 0x33	; 51
    1ff6:	0e 94 07 12 	call	0x240e	; 0x240e <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(LCD_4_BIT_MODE_2);
    1ffa:	82 e3       	ldi	r24, 0x32	; 50
    1ffc:	0e 94 07 12 	call	0x240e	; 0x240e <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(LCD_4_BIT_MODE_3);
    2000:	88 e2       	ldi	r24, 0x28	; 40
    2002:	0e 94 07 12 	call	0x240e	; 0x240e <H_LCD_Void_LCDWriteCommand>

	H_LCD_Void_LCDWriteCommand(LCD_DISPLAY_ON_CURSOR_OFF);
    2006:	8c e0       	ldi	r24, 0x0C	; 12
    2008:	0e 94 07 12 	call	0x240e	; 0x240e <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(LCD_CLEAR);
    200c:	81 e0       	ldi	r24, 0x01	; 1
    200e:	0e 94 07 12 	call	0x240e	; 0x240e <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(LCD_RETURN_HOME);
    2012:	82 e0       	ldi	r24, 0x02	; 2
    2014:	0e 94 07 12 	call	0x240e	; 0x240e <H_LCD_Void_LCDWriteCommand>

}
    2018:	cf 91       	pop	r28
    201a:	df 91       	pop	r29
    201c:	08 95       	ret

0000201e <H_LCD_Void_LCDWriteCharacter>:
void H_LCD_Void_LCDWriteCharacter(u8 Copy_U8_Character)
{
    201e:	df 93       	push	r29
    2020:	cf 93       	push	r28
    2022:	cd b7       	in	r28, 0x3d	; 61
    2024:	de b7       	in	r29, 0x3e	; 62
    2026:	e9 97       	sbiw	r28, 0x39	; 57
    2028:	0f b6       	in	r0, 0x3f	; 63
    202a:	f8 94       	cli
    202c:	de bf       	out	0x3e, r29	; 62
    202e:	0f be       	out	0x3f, r0	; 63
    2030:	cd bf       	out	0x3d, r28	; 61
    2032:	89 af       	std	Y+57, r24	; 0x39
	M_DIO_Void_SetPinValue(LCD_RS_PIN,HIGH);
    2034:	85 e1       	ldi	r24, 0x15	; 21
    2036:	61 e0       	ldi	r22, 0x01	; 1
    2038:	0e 94 bb 08 	call	0x1176	; 0x1176 <M_DIO_Void_SetPinValue>
	H_LCD_Void_SetLCDPins(Copy_U8_Character);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
#elif LCD_MODE   ==   _4_BIT_MODE
	H_LCD_Void_SetLCDPins(Copy_U8_Character >> 4);
    203c:	89 ad       	ldd	r24, Y+57	; 0x39
    203e:	82 95       	swap	r24
    2040:	8f 70       	andi	r24, 0x0F	; 15
    2042:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <H_LCD_Void_SetLCDPins>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    2046:	88 e1       	ldi	r24, 0x18	; 24
    2048:	61 e0       	ldi	r22, 0x01	; 1
    204a:	0e 94 bb 08 	call	0x1176	; 0x1176 <M_DIO_Void_SetPinValue>
    204e:	80 e0       	ldi	r24, 0x00	; 0
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	a0 e8       	ldi	r26, 0x80	; 128
    2054:	bf e3       	ldi	r27, 0x3F	; 63
    2056:	8d ab       	std	Y+53, r24	; 0x35
    2058:	9e ab       	std	Y+54, r25	; 0x36
    205a:	af ab       	std	Y+55, r26	; 0x37
    205c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    205e:	6d a9       	ldd	r22, Y+53	; 0x35
    2060:	7e a9       	ldd	r23, Y+54	; 0x36
    2062:	8f a9       	ldd	r24, Y+55	; 0x37
    2064:	98 ad       	ldd	r25, Y+56	; 0x38
    2066:	20 e0       	ldi	r18, 0x00	; 0
    2068:	30 e0       	ldi	r19, 0x00	; 0
    206a:	4a e7       	ldi	r20, 0x7A	; 122
    206c:	55 e4       	ldi	r21, 0x45	; 69
    206e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2072:	dc 01       	movw	r26, r24
    2074:	cb 01       	movw	r24, r22
    2076:	89 ab       	std	Y+49, r24	; 0x31
    2078:	9a ab       	std	Y+50, r25	; 0x32
    207a:	ab ab       	std	Y+51, r26	; 0x33
    207c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    207e:	69 a9       	ldd	r22, Y+49	; 0x31
    2080:	7a a9       	ldd	r23, Y+50	; 0x32
    2082:	8b a9       	ldd	r24, Y+51	; 0x33
    2084:	9c a9       	ldd	r25, Y+52	; 0x34
    2086:	20 e0       	ldi	r18, 0x00	; 0
    2088:	30 e0       	ldi	r19, 0x00	; 0
    208a:	40 e8       	ldi	r20, 0x80	; 128
    208c:	5f e3       	ldi	r21, 0x3F	; 63
    208e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2092:	88 23       	and	r24, r24
    2094:	2c f4       	brge	.+10     	; 0x20a0 <H_LCD_Void_LCDWriteCharacter+0x82>
		__ticks = 1;
    2096:	81 e0       	ldi	r24, 0x01	; 1
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	98 ab       	std	Y+48, r25	; 0x30
    209c:	8f a7       	std	Y+47, r24	; 0x2f
    209e:	3f c0       	rjmp	.+126    	; 0x211e <H_LCD_Void_LCDWriteCharacter+0x100>
	else if (__tmp > 65535)
    20a0:	69 a9       	ldd	r22, Y+49	; 0x31
    20a2:	7a a9       	ldd	r23, Y+50	; 0x32
    20a4:	8b a9       	ldd	r24, Y+51	; 0x33
    20a6:	9c a9       	ldd	r25, Y+52	; 0x34
    20a8:	20 e0       	ldi	r18, 0x00	; 0
    20aa:	3f ef       	ldi	r19, 0xFF	; 255
    20ac:	4f e7       	ldi	r20, 0x7F	; 127
    20ae:	57 e4       	ldi	r21, 0x47	; 71
    20b0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    20b4:	18 16       	cp	r1, r24
    20b6:	4c f5       	brge	.+82     	; 0x210a <H_LCD_Void_LCDWriteCharacter+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20b8:	6d a9       	ldd	r22, Y+53	; 0x35
    20ba:	7e a9       	ldd	r23, Y+54	; 0x36
    20bc:	8f a9       	ldd	r24, Y+55	; 0x37
    20be:	98 ad       	ldd	r25, Y+56	; 0x38
    20c0:	20 e0       	ldi	r18, 0x00	; 0
    20c2:	30 e0       	ldi	r19, 0x00	; 0
    20c4:	40 e2       	ldi	r20, 0x20	; 32
    20c6:	51 e4       	ldi	r21, 0x41	; 65
    20c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20cc:	dc 01       	movw	r26, r24
    20ce:	cb 01       	movw	r24, r22
    20d0:	bc 01       	movw	r22, r24
    20d2:	cd 01       	movw	r24, r26
    20d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20d8:	dc 01       	movw	r26, r24
    20da:	cb 01       	movw	r24, r22
    20dc:	98 ab       	std	Y+48, r25	; 0x30
    20de:	8f a7       	std	Y+47, r24	; 0x2f
    20e0:	0f c0       	rjmp	.+30     	; 0x2100 <H_LCD_Void_LCDWriteCharacter+0xe2>
    20e2:	80 e9       	ldi	r24, 0x90	; 144
    20e4:	91 e0       	ldi	r25, 0x01	; 1
    20e6:	9e a7       	std	Y+46, r25	; 0x2e
    20e8:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    20ea:	8d a5       	ldd	r24, Y+45	; 0x2d
    20ec:	9e a5       	ldd	r25, Y+46	; 0x2e
    20ee:	01 97       	sbiw	r24, 0x01	; 1
    20f0:	f1 f7       	brne	.-4      	; 0x20ee <H_LCD_Void_LCDWriteCharacter+0xd0>
    20f2:	9e a7       	std	Y+46, r25	; 0x2e
    20f4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    20f8:	98 a9       	ldd	r25, Y+48	; 0x30
    20fa:	01 97       	sbiw	r24, 0x01	; 1
    20fc:	98 ab       	std	Y+48, r25	; 0x30
    20fe:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2100:	8f a5       	ldd	r24, Y+47	; 0x2f
    2102:	98 a9       	ldd	r25, Y+48	; 0x30
    2104:	00 97       	sbiw	r24, 0x00	; 0
    2106:	69 f7       	brne	.-38     	; 0x20e2 <H_LCD_Void_LCDWriteCharacter+0xc4>
    2108:	14 c0       	rjmp	.+40     	; 0x2132 <H_LCD_Void_LCDWriteCharacter+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    210a:	69 a9       	ldd	r22, Y+49	; 0x31
    210c:	7a a9       	ldd	r23, Y+50	; 0x32
    210e:	8b a9       	ldd	r24, Y+51	; 0x33
    2110:	9c a9       	ldd	r25, Y+52	; 0x34
    2112:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2116:	dc 01       	movw	r26, r24
    2118:	cb 01       	movw	r24, r22
    211a:	98 ab       	std	Y+48, r25	; 0x30
    211c:	8f a7       	std	Y+47, r24	; 0x2f
    211e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2120:	98 a9       	ldd	r25, Y+48	; 0x30
    2122:	9c a7       	std	Y+44, r25	; 0x2c
    2124:	8b a7       	std	Y+43, r24	; 0x2b
    2126:	8b a5       	ldd	r24, Y+43	; 0x2b
    2128:	9c a5       	ldd	r25, Y+44	; 0x2c
    212a:	01 97       	sbiw	r24, 0x01	; 1
    212c:	f1 f7       	brne	.-4      	; 0x212a <H_LCD_Void_LCDWriteCharacter+0x10c>
    212e:	9c a7       	std	Y+44, r25	; 0x2c
    2130:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    2132:	88 e1       	ldi	r24, 0x18	; 24
    2134:	60 e0       	ldi	r22, 0x00	; 0
    2136:	0e 94 bb 08 	call	0x1176	; 0x1176 <M_DIO_Void_SetPinValue>
    213a:	80 e0       	ldi	r24, 0x00	; 0
    213c:	90 e0       	ldi	r25, 0x00	; 0
    213e:	a0 e8       	ldi	r26, 0x80	; 128
    2140:	bf e3       	ldi	r27, 0x3F	; 63
    2142:	8f a3       	std	Y+39, r24	; 0x27
    2144:	98 a7       	std	Y+40, r25	; 0x28
    2146:	a9 a7       	std	Y+41, r26	; 0x29
    2148:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    214a:	6f a1       	ldd	r22, Y+39	; 0x27
    214c:	78 a5       	ldd	r23, Y+40	; 0x28
    214e:	89 a5       	ldd	r24, Y+41	; 0x29
    2150:	9a a5       	ldd	r25, Y+42	; 0x2a
    2152:	20 e0       	ldi	r18, 0x00	; 0
    2154:	30 e0       	ldi	r19, 0x00	; 0
    2156:	4a e7       	ldi	r20, 0x7A	; 122
    2158:	55 e4       	ldi	r21, 0x45	; 69
    215a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    215e:	dc 01       	movw	r26, r24
    2160:	cb 01       	movw	r24, r22
    2162:	8b a3       	std	Y+35, r24	; 0x23
    2164:	9c a3       	std	Y+36, r25	; 0x24
    2166:	ad a3       	std	Y+37, r26	; 0x25
    2168:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    216a:	6b a1       	ldd	r22, Y+35	; 0x23
    216c:	7c a1       	ldd	r23, Y+36	; 0x24
    216e:	8d a1       	ldd	r24, Y+37	; 0x25
    2170:	9e a1       	ldd	r25, Y+38	; 0x26
    2172:	20 e0       	ldi	r18, 0x00	; 0
    2174:	30 e0       	ldi	r19, 0x00	; 0
    2176:	40 e8       	ldi	r20, 0x80	; 128
    2178:	5f e3       	ldi	r21, 0x3F	; 63
    217a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    217e:	88 23       	and	r24, r24
    2180:	2c f4       	brge	.+10     	; 0x218c <H_LCD_Void_LCDWriteCharacter+0x16e>
		__ticks = 1;
    2182:	81 e0       	ldi	r24, 0x01	; 1
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	9a a3       	std	Y+34, r25	; 0x22
    2188:	89 a3       	std	Y+33, r24	; 0x21
    218a:	3f c0       	rjmp	.+126    	; 0x220a <H_LCD_Void_LCDWriteCharacter+0x1ec>
	else if (__tmp > 65535)
    218c:	6b a1       	ldd	r22, Y+35	; 0x23
    218e:	7c a1       	ldd	r23, Y+36	; 0x24
    2190:	8d a1       	ldd	r24, Y+37	; 0x25
    2192:	9e a1       	ldd	r25, Y+38	; 0x26
    2194:	20 e0       	ldi	r18, 0x00	; 0
    2196:	3f ef       	ldi	r19, 0xFF	; 255
    2198:	4f e7       	ldi	r20, 0x7F	; 127
    219a:	57 e4       	ldi	r21, 0x47	; 71
    219c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    21a0:	18 16       	cp	r1, r24
    21a2:	4c f5       	brge	.+82     	; 0x21f6 <H_LCD_Void_LCDWriteCharacter+0x1d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21a4:	6f a1       	ldd	r22, Y+39	; 0x27
    21a6:	78 a5       	ldd	r23, Y+40	; 0x28
    21a8:	89 a5       	ldd	r24, Y+41	; 0x29
    21aa:	9a a5       	ldd	r25, Y+42	; 0x2a
    21ac:	20 e0       	ldi	r18, 0x00	; 0
    21ae:	30 e0       	ldi	r19, 0x00	; 0
    21b0:	40 e2       	ldi	r20, 0x20	; 32
    21b2:	51 e4       	ldi	r21, 0x41	; 65
    21b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21b8:	dc 01       	movw	r26, r24
    21ba:	cb 01       	movw	r24, r22
    21bc:	bc 01       	movw	r22, r24
    21be:	cd 01       	movw	r24, r26
    21c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21c4:	dc 01       	movw	r26, r24
    21c6:	cb 01       	movw	r24, r22
    21c8:	9a a3       	std	Y+34, r25	; 0x22
    21ca:	89 a3       	std	Y+33, r24	; 0x21
    21cc:	0f c0       	rjmp	.+30     	; 0x21ec <H_LCD_Void_LCDWriteCharacter+0x1ce>
    21ce:	80 e9       	ldi	r24, 0x90	; 144
    21d0:	91 e0       	ldi	r25, 0x01	; 1
    21d2:	98 a3       	std	Y+32, r25	; 0x20
    21d4:	8f 8f       	std	Y+31, r24	; 0x1f
    21d6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    21d8:	98 a1       	ldd	r25, Y+32	; 0x20
    21da:	01 97       	sbiw	r24, 0x01	; 1
    21dc:	f1 f7       	brne	.-4      	; 0x21da <H_LCD_Void_LCDWriteCharacter+0x1bc>
    21de:	98 a3       	std	Y+32, r25	; 0x20
    21e0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21e2:	89 a1       	ldd	r24, Y+33	; 0x21
    21e4:	9a a1       	ldd	r25, Y+34	; 0x22
    21e6:	01 97       	sbiw	r24, 0x01	; 1
    21e8:	9a a3       	std	Y+34, r25	; 0x22
    21ea:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21ec:	89 a1       	ldd	r24, Y+33	; 0x21
    21ee:	9a a1       	ldd	r25, Y+34	; 0x22
    21f0:	00 97       	sbiw	r24, 0x00	; 0
    21f2:	69 f7       	brne	.-38     	; 0x21ce <H_LCD_Void_LCDWriteCharacter+0x1b0>
    21f4:	14 c0       	rjmp	.+40     	; 0x221e <H_LCD_Void_LCDWriteCharacter+0x200>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21f6:	6b a1       	ldd	r22, Y+35	; 0x23
    21f8:	7c a1       	ldd	r23, Y+36	; 0x24
    21fa:	8d a1       	ldd	r24, Y+37	; 0x25
    21fc:	9e a1       	ldd	r25, Y+38	; 0x26
    21fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2202:	dc 01       	movw	r26, r24
    2204:	cb 01       	movw	r24, r22
    2206:	9a a3       	std	Y+34, r25	; 0x22
    2208:	89 a3       	std	Y+33, r24	; 0x21
    220a:	89 a1       	ldd	r24, Y+33	; 0x21
    220c:	9a a1       	ldd	r25, Y+34	; 0x22
    220e:	9e 8f       	std	Y+30, r25	; 0x1e
    2210:	8d 8f       	std	Y+29, r24	; 0x1d
    2212:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2214:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2216:	01 97       	sbiw	r24, 0x01	; 1
    2218:	f1 f7       	brne	.-4      	; 0x2216 <H_LCD_Void_LCDWriteCharacter+0x1f8>
    221a:	9e 8f       	std	Y+30, r25	; 0x1e
    221c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	H_LCD_Void_SetLCDPins(Copy_U8_Character);
    221e:	89 ad       	ldd	r24, Y+57	; 0x39
    2220:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <H_LCD_Void_SetLCDPins>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    2224:	88 e1       	ldi	r24, 0x18	; 24
    2226:	61 e0       	ldi	r22, 0x01	; 1
    2228:	0e 94 bb 08 	call	0x1176	; 0x1176 <M_DIO_Void_SetPinValue>
    222c:	80 e0       	ldi	r24, 0x00	; 0
    222e:	90 e0       	ldi	r25, 0x00	; 0
    2230:	a0 e8       	ldi	r26, 0x80	; 128
    2232:	bf e3       	ldi	r27, 0x3F	; 63
    2234:	89 8f       	std	Y+25, r24	; 0x19
    2236:	9a 8f       	std	Y+26, r25	; 0x1a
    2238:	ab 8f       	std	Y+27, r26	; 0x1b
    223a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    223c:	69 8d       	ldd	r22, Y+25	; 0x19
    223e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2240:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2242:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2244:	20 e0       	ldi	r18, 0x00	; 0
    2246:	30 e0       	ldi	r19, 0x00	; 0
    2248:	4a e7       	ldi	r20, 0x7A	; 122
    224a:	55 e4       	ldi	r21, 0x45	; 69
    224c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2250:	dc 01       	movw	r26, r24
    2252:	cb 01       	movw	r24, r22
    2254:	8d 8b       	std	Y+21, r24	; 0x15
    2256:	9e 8b       	std	Y+22, r25	; 0x16
    2258:	af 8b       	std	Y+23, r26	; 0x17
    225a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    225c:	6d 89       	ldd	r22, Y+21	; 0x15
    225e:	7e 89       	ldd	r23, Y+22	; 0x16
    2260:	8f 89       	ldd	r24, Y+23	; 0x17
    2262:	98 8d       	ldd	r25, Y+24	; 0x18
    2264:	20 e0       	ldi	r18, 0x00	; 0
    2266:	30 e0       	ldi	r19, 0x00	; 0
    2268:	40 e8       	ldi	r20, 0x80	; 128
    226a:	5f e3       	ldi	r21, 0x3F	; 63
    226c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2270:	88 23       	and	r24, r24
    2272:	2c f4       	brge	.+10     	; 0x227e <H_LCD_Void_LCDWriteCharacter+0x260>
		__ticks = 1;
    2274:	81 e0       	ldi	r24, 0x01	; 1
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	9c 8b       	std	Y+20, r25	; 0x14
    227a:	8b 8b       	std	Y+19, r24	; 0x13
    227c:	3f c0       	rjmp	.+126    	; 0x22fc <H_LCD_Void_LCDWriteCharacter+0x2de>
	else if (__tmp > 65535)
    227e:	6d 89       	ldd	r22, Y+21	; 0x15
    2280:	7e 89       	ldd	r23, Y+22	; 0x16
    2282:	8f 89       	ldd	r24, Y+23	; 0x17
    2284:	98 8d       	ldd	r25, Y+24	; 0x18
    2286:	20 e0       	ldi	r18, 0x00	; 0
    2288:	3f ef       	ldi	r19, 0xFF	; 255
    228a:	4f e7       	ldi	r20, 0x7F	; 127
    228c:	57 e4       	ldi	r21, 0x47	; 71
    228e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2292:	18 16       	cp	r1, r24
    2294:	4c f5       	brge	.+82     	; 0x22e8 <H_LCD_Void_LCDWriteCharacter+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2296:	69 8d       	ldd	r22, Y+25	; 0x19
    2298:	7a 8d       	ldd	r23, Y+26	; 0x1a
    229a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    229c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    229e:	20 e0       	ldi	r18, 0x00	; 0
    22a0:	30 e0       	ldi	r19, 0x00	; 0
    22a2:	40 e2       	ldi	r20, 0x20	; 32
    22a4:	51 e4       	ldi	r21, 0x41	; 65
    22a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22aa:	dc 01       	movw	r26, r24
    22ac:	cb 01       	movw	r24, r22
    22ae:	bc 01       	movw	r22, r24
    22b0:	cd 01       	movw	r24, r26
    22b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22b6:	dc 01       	movw	r26, r24
    22b8:	cb 01       	movw	r24, r22
    22ba:	9c 8b       	std	Y+20, r25	; 0x14
    22bc:	8b 8b       	std	Y+19, r24	; 0x13
    22be:	0f c0       	rjmp	.+30     	; 0x22de <H_LCD_Void_LCDWriteCharacter+0x2c0>
    22c0:	80 e9       	ldi	r24, 0x90	; 144
    22c2:	91 e0       	ldi	r25, 0x01	; 1
    22c4:	9a 8b       	std	Y+18, r25	; 0x12
    22c6:	89 8b       	std	Y+17, r24	; 0x11
    22c8:	89 89       	ldd	r24, Y+17	; 0x11
    22ca:	9a 89       	ldd	r25, Y+18	; 0x12
    22cc:	01 97       	sbiw	r24, 0x01	; 1
    22ce:	f1 f7       	brne	.-4      	; 0x22cc <H_LCD_Void_LCDWriteCharacter+0x2ae>
    22d0:	9a 8b       	std	Y+18, r25	; 0x12
    22d2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22d4:	8b 89       	ldd	r24, Y+19	; 0x13
    22d6:	9c 89       	ldd	r25, Y+20	; 0x14
    22d8:	01 97       	sbiw	r24, 0x01	; 1
    22da:	9c 8b       	std	Y+20, r25	; 0x14
    22dc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22de:	8b 89       	ldd	r24, Y+19	; 0x13
    22e0:	9c 89       	ldd	r25, Y+20	; 0x14
    22e2:	00 97       	sbiw	r24, 0x00	; 0
    22e4:	69 f7       	brne	.-38     	; 0x22c0 <H_LCD_Void_LCDWriteCharacter+0x2a2>
    22e6:	14 c0       	rjmp	.+40     	; 0x2310 <H_LCD_Void_LCDWriteCharacter+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22e8:	6d 89       	ldd	r22, Y+21	; 0x15
    22ea:	7e 89       	ldd	r23, Y+22	; 0x16
    22ec:	8f 89       	ldd	r24, Y+23	; 0x17
    22ee:	98 8d       	ldd	r25, Y+24	; 0x18
    22f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22f4:	dc 01       	movw	r26, r24
    22f6:	cb 01       	movw	r24, r22
    22f8:	9c 8b       	std	Y+20, r25	; 0x14
    22fa:	8b 8b       	std	Y+19, r24	; 0x13
    22fc:	8b 89       	ldd	r24, Y+19	; 0x13
    22fe:	9c 89       	ldd	r25, Y+20	; 0x14
    2300:	98 8b       	std	Y+16, r25	; 0x10
    2302:	8f 87       	std	Y+15, r24	; 0x0f
    2304:	8f 85       	ldd	r24, Y+15	; 0x0f
    2306:	98 89       	ldd	r25, Y+16	; 0x10
    2308:	01 97       	sbiw	r24, 0x01	; 1
    230a:	f1 f7       	brne	.-4      	; 0x2308 <H_LCD_Void_LCDWriteCharacter+0x2ea>
    230c:	98 8b       	std	Y+16, r25	; 0x10
    230e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    2310:	88 e1       	ldi	r24, 0x18	; 24
    2312:	60 e0       	ldi	r22, 0x00	; 0
    2314:	0e 94 bb 08 	call	0x1176	; 0x1176 <M_DIO_Void_SetPinValue>
    2318:	80 e0       	ldi	r24, 0x00	; 0
    231a:	90 e0       	ldi	r25, 0x00	; 0
    231c:	a0 e8       	ldi	r26, 0x80	; 128
    231e:	bf e3       	ldi	r27, 0x3F	; 63
    2320:	8b 87       	std	Y+11, r24	; 0x0b
    2322:	9c 87       	std	Y+12, r25	; 0x0c
    2324:	ad 87       	std	Y+13, r26	; 0x0d
    2326:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2328:	6b 85       	ldd	r22, Y+11	; 0x0b
    232a:	7c 85       	ldd	r23, Y+12	; 0x0c
    232c:	8d 85       	ldd	r24, Y+13	; 0x0d
    232e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2330:	20 e0       	ldi	r18, 0x00	; 0
    2332:	30 e0       	ldi	r19, 0x00	; 0
    2334:	4a e7       	ldi	r20, 0x7A	; 122
    2336:	55 e4       	ldi	r21, 0x45	; 69
    2338:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    233c:	dc 01       	movw	r26, r24
    233e:	cb 01       	movw	r24, r22
    2340:	8f 83       	std	Y+7, r24	; 0x07
    2342:	98 87       	std	Y+8, r25	; 0x08
    2344:	a9 87       	std	Y+9, r26	; 0x09
    2346:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2348:	6f 81       	ldd	r22, Y+7	; 0x07
    234a:	78 85       	ldd	r23, Y+8	; 0x08
    234c:	89 85       	ldd	r24, Y+9	; 0x09
    234e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2350:	20 e0       	ldi	r18, 0x00	; 0
    2352:	30 e0       	ldi	r19, 0x00	; 0
    2354:	40 e8       	ldi	r20, 0x80	; 128
    2356:	5f e3       	ldi	r21, 0x3F	; 63
    2358:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    235c:	88 23       	and	r24, r24
    235e:	2c f4       	brge	.+10     	; 0x236a <H_LCD_Void_LCDWriteCharacter+0x34c>
		__ticks = 1;
    2360:	81 e0       	ldi	r24, 0x01	; 1
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	9e 83       	std	Y+6, r25	; 0x06
    2366:	8d 83       	std	Y+5, r24	; 0x05
    2368:	3f c0       	rjmp	.+126    	; 0x23e8 <H_LCD_Void_LCDWriteCharacter+0x3ca>
	else if (__tmp > 65535)
    236a:	6f 81       	ldd	r22, Y+7	; 0x07
    236c:	78 85       	ldd	r23, Y+8	; 0x08
    236e:	89 85       	ldd	r24, Y+9	; 0x09
    2370:	9a 85       	ldd	r25, Y+10	; 0x0a
    2372:	20 e0       	ldi	r18, 0x00	; 0
    2374:	3f ef       	ldi	r19, 0xFF	; 255
    2376:	4f e7       	ldi	r20, 0x7F	; 127
    2378:	57 e4       	ldi	r21, 0x47	; 71
    237a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    237e:	18 16       	cp	r1, r24
    2380:	4c f5       	brge	.+82     	; 0x23d4 <H_LCD_Void_LCDWriteCharacter+0x3b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2382:	6b 85       	ldd	r22, Y+11	; 0x0b
    2384:	7c 85       	ldd	r23, Y+12	; 0x0c
    2386:	8d 85       	ldd	r24, Y+13	; 0x0d
    2388:	9e 85       	ldd	r25, Y+14	; 0x0e
    238a:	20 e0       	ldi	r18, 0x00	; 0
    238c:	30 e0       	ldi	r19, 0x00	; 0
    238e:	40 e2       	ldi	r20, 0x20	; 32
    2390:	51 e4       	ldi	r21, 0x41	; 65
    2392:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2396:	dc 01       	movw	r26, r24
    2398:	cb 01       	movw	r24, r22
    239a:	bc 01       	movw	r22, r24
    239c:	cd 01       	movw	r24, r26
    239e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23a2:	dc 01       	movw	r26, r24
    23a4:	cb 01       	movw	r24, r22
    23a6:	9e 83       	std	Y+6, r25	; 0x06
    23a8:	8d 83       	std	Y+5, r24	; 0x05
    23aa:	0f c0       	rjmp	.+30     	; 0x23ca <H_LCD_Void_LCDWriteCharacter+0x3ac>
    23ac:	80 e9       	ldi	r24, 0x90	; 144
    23ae:	91 e0       	ldi	r25, 0x01	; 1
    23b0:	9c 83       	std	Y+4, r25	; 0x04
    23b2:	8b 83       	std	Y+3, r24	; 0x03
    23b4:	8b 81       	ldd	r24, Y+3	; 0x03
    23b6:	9c 81       	ldd	r25, Y+4	; 0x04
    23b8:	01 97       	sbiw	r24, 0x01	; 1
    23ba:	f1 f7       	brne	.-4      	; 0x23b8 <H_LCD_Void_LCDWriteCharacter+0x39a>
    23bc:	9c 83       	std	Y+4, r25	; 0x04
    23be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23c0:	8d 81       	ldd	r24, Y+5	; 0x05
    23c2:	9e 81       	ldd	r25, Y+6	; 0x06
    23c4:	01 97       	sbiw	r24, 0x01	; 1
    23c6:	9e 83       	std	Y+6, r25	; 0x06
    23c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ca:	8d 81       	ldd	r24, Y+5	; 0x05
    23cc:	9e 81       	ldd	r25, Y+6	; 0x06
    23ce:	00 97       	sbiw	r24, 0x00	; 0
    23d0:	69 f7       	brne	.-38     	; 0x23ac <H_LCD_Void_LCDWriteCharacter+0x38e>
    23d2:	14 c0       	rjmp	.+40     	; 0x23fc <H_LCD_Void_LCDWriteCharacter+0x3de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23d4:	6f 81       	ldd	r22, Y+7	; 0x07
    23d6:	78 85       	ldd	r23, Y+8	; 0x08
    23d8:	89 85       	ldd	r24, Y+9	; 0x09
    23da:	9a 85       	ldd	r25, Y+10	; 0x0a
    23dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23e0:	dc 01       	movw	r26, r24
    23e2:	cb 01       	movw	r24, r22
    23e4:	9e 83       	std	Y+6, r25	; 0x06
    23e6:	8d 83       	std	Y+5, r24	; 0x05
    23e8:	8d 81       	ldd	r24, Y+5	; 0x05
    23ea:	9e 81       	ldd	r25, Y+6	; 0x06
    23ec:	9a 83       	std	Y+2, r25	; 0x02
    23ee:	89 83       	std	Y+1, r24	; 0x01
    23f0:	89 81       	ldd	r24, Y+1	; 0x01
    23f2:	9a 81       	ldd	r25, Y+2	; 0x02
    23f4:	01 97       	sbiw	r24, 0x01	; 1
    23f6:	f1 f7       	brne	.-4      	; 0x23f4 <H_LCD_Void_LCDWriteCharacter+0x3d6>
    23f8:	9a 83       	std	Y+2, r25	; 0x02
    23fa:	89 83       	std	Y+1, r24	; 0x01
#endif
	_delay_ms(1);
}
    23fc:	e9 96       	adiw	r28, 0x39	; 57
    23fe:	0f b6       	in	r0, 0x3f	; 63
    2400:	f8 94       	cli
    2402:	de bf       	out	0x3e, r29	; 62
    2404:	0f be       	out	0x3f, r0	; 63
    2406:	cd bf       	out	0x3d, r28	; 61
    2408:	cf 91       	pop	r28
    240a:	df 91       	pop	r29
    240c:	08 95       	ret

0000240e <H_LCD_Void_LCDWriteCommand>:
void H_LCD_Void_LCDWriteCommand(u8 Copy_U8_Command)
{
    240e:	df 93       	push	r29
    2410:	cf 93       	push	r28
    2412:	cd b7       	in	r28, 0x3d	; 61
    2414:	de b7       	in	r29, 0x3e	; 62
    2416:	e9 97       	sbiw	r28, 0x39	; 57
    2418:	0f b6       	in	r0, 0x3f	; 63
    241a:	f8 94       	cli
    241c:	de bf       	out	0x3e, r29	; 62
    241e:	0f be       	out	0x3f, r0	; 63
    2420:	cd bf       	out	0x3d, r28	; 61
    2422:	89 af       	std	Y+57, r24	; 0x39
	M_DIO_Void_SetPinValue(LCD_RS_PIN,LOW);
    2424:	85 e1       	ldi	r24, 0x15	; 21
    2426:	60 e0       	ldi	r22, 0x00	; 0
    2428:	0e 94 bb 08 	call	0x1176	; 0x1176 <M_DIO_Void_SetPinValue>


	H_LCD_Void_SetLCDPins(Copy_U8_Command >> 4);
    242c:	89 ad       	ldd	r24, Y+57	; 0x39
    242e:	82 95       	swap	r24
    2430:	8f 70       	andi	r24, 0x0F	; 15
    2432:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <H_LCD_Void_SetLCDPins>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    2436:	88 e1       	ldi	r24, 0x18	; 24
    2438:	61 e0       	ldi	r22, 0x01	; 1
    243a:	0e 94 bb 08 	call	0x1176	; 0x1176 <M_DIO_Void_SetPinValue>
    243e:	80 e0       	ldi	r24, 0x00	; 0
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	a0 e8       	ldi	r26, 0x80	; 128
    2444:	bf e3       	ldi	r27, 0x3F	; 63
    2446:	8d ab       	std	Y+53, r24	; 0x35
    2448:	9e ab       	std	Y+54, r25	; 0x36
    244a:	af ab       	std	Y+55, r26	; 0x37
    244c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    244e:	6d a9       	ldd	r22, Y+53	; 0x35
    2450:	7e a9       	ldd	r23, Y+54	; 0x36
    2452:	8f a9       	ldd	r24, Y+55	; 0x37
    2454:	98 ad       	ldd	r25, Y+56	; 0x38
    2456:	20 e0       	ldi	r18, 0x00	; 0
    2458:	30 e0       	ldi	r19, 0x00	; 0
    245a:	4a e7       	ldi	r20, 0x7A	; 122
    245c:	55 e4       	ldi	r21, 0x45	; 69
    245e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2462:	dc 01       	movw	r26, r24
    2464:	cb 01       	movw	r24, r22
    2466:	89 ab       	std	Y+49, r24	; 0x31
    2468:	9a ab       	std	Y+50, r25	; 0x32
    246a:	ab ab       	std	Y+51, r26	; 0x33
    246c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    246e:	69 a9       	ldd	r22, Y+49	; 0x31
    2470:	7a a9       	ldd	r23, Y+50	; 0x32
    2472:	8b a9       	ldd	r24, Y+51	; 0x33
    2474:	9c a9       	ldd	r25, Y+52	; 0x34
    2476:	20 e0       	ldi	r18, 0x00	; 0
    2478:	30 e0       	ldi	r19, 0x00	; 0
    247a:	40 e8       	ldi	r20, 0x80	; 128
    247c:	5f e3       	ldi	r21, 0x3F	; 63
    247e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2482:	88 23       	and	r24, r24
    2484:	2c f4       	brge	.+10     	; 0x2490 <H_LCD_Void_LCDWriteCommand+0x82>
		__ticks = 1;
    2486:	81 e0       	ldi	r24, 0x01	; 1
    2488:	90 e0       	ldi	r25, 0x00	; 0
    248a:	98 ab       	std	Y+48, r25	; 0x30
    248c:	8f a7       	std	Y+47, r24	; 0x2f
    248e:	3f c0       	rjmp	.+126    	; 0x250e <H_LCD_Void_LCDWriteCommand+0x100>
	else if (__tmp > 65535)
    2490:	69 a9       	ldd	r22, Y+49	; 0x31
    2492:	7a a9       	ldd	r23, Y+50	; 0x32
    2494:	8b a9       	ldd	r24, Y+51	; 0x33
    2496:	9c a9       	ldd	r25, Y+52	; 0x34
    2498:	20 e0       	ldi	r18, 0x00	; 0
    249a:	3f ef       	ldi	r19, 0xFF	; 255
    249c:	4f e7       	ldi	r20, 0x7F	; 127
    249e:	57 e4       	ldi	r21, 0x47	; 71
    24a0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    24a4:	18 16       	cp	r1, r24
    24a6:	4c f5       	brge	.+82     	; 0x24fa <H_LCD_Void_LCDWriteCommand+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24a8:	6d a9       	ldd	r22, Y+53	; 0x35
    24aa:	7e a9       	ldd	r23, Y+54	; 0x36
    24ac:	8f a9       	ldd	r24, Y+55	; 0x37
    24ae:	98 ad       	ldd	r25, Y+56	; 0x38
    24b0:	20 e0       	ldi	r18, 0x00	; 0
    24b2:	30 e0       	ldi	r19, 0x00	; 0
    24b4:	40 e2       	ldi	r20, 0x20	; 32
    24b6:	51 e4       	ldi	r21, 0x41	; 65
    24b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24bc:	dc 01       	movw	r26, r24
    24be:	cb 01       	movw	r24, r22
    24c0:	bc 01       	movw	r22, r24
    24c2:	cd 01       	movw	r24, r26
    24c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24c8:	dc 01       	movw	r26, r24
    24ca:	cb 01       	movw	r24, r22
    24cc:	98 ab       	std	Y+48, r25	; 0x30
    24ce:	8f a7       	std	Y+47, r24	; 0x2f
    24d0:	0f c0       	rjmp	.+30     	; 0x24f0 <H_LCD_Void_LCDWriteCommand+0xe2>
    24d2:	80 e9       	ldi	r24, 0x90	; 144
    24d4:	91 e0       	ldi	r25, 0x01	; 1
    24d6:	9e a7       	std	Y+46, r25	; 0x2e
    24d8:	8d a7       	std	Y+45, r24	; 0x2d
    24da:	8d a5       	ldd	r24, Y+45	; 0x2d
    24dc:	9e a5       	ldd	r25, Y+46	; 0x2e
    24de:	01 97       	sbiw	r24, 0x01	; 1
    24e0:	f1 f7       	brne	.-4      	; 0x24de <H_LCD_Void_LCDWriteCommand+0xd0>
    24e2:	9e a7       	std	Y+46, r25	; 0x2e
    24e4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    24e8:	98 a9       	ldd	r25, Y+48	; 0x30
    24ea:	01 97       	sbiw	r24, 0x01	; 1
    24ec:	98 ab       	std	Y+48, r25	; 0x30
    24ee:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24f0:	8f a5       	ldd	r24, Y+47	; 0x2f
    24f2:	98 a9       	ldd	r25, Y+48	; 0x30
    24f4:	00 97       	sbiw	r24, 0x00	; 0
    24f6:	69 f7       	brne	.-38     	; 0x24d2 <H_LCD_Void_LCDWriteCommand+0xc4>
    24f8:	14 c0       	rjmp	.+40     	; 0x2522 <H_LCD_Void_LCDWriteCommand+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24fa:	69 a9       	ldd	r22, Y+49	; 0x31
    24fc:	7a a9       	ldd	r23, Y+50	; 0x32
    24fe:	8b a9       	ldd	r24, Y+51	; 0x33
    2500:	9c a9       	ldd	r25, Y+52	; 0x34
    2502:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2506:	dc 01       	movw	r26, r24
    2508:	cb 01       	movw	r24, r22
    250a:	98 ab       	std	Y+48, r25	; 0x30
    250c:	8f a7       	std	Y+47, r24	; 0x2f
    250e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2510:	98 a9       	ldd	r25, Y+48	; 0x30
    2512:	9c a7       	std	Y+44, r25	; 0x2c
    2514:	8b a7       	std	Y+43, r24	; 0x2b
    2516:	8b a5       	ldd	r24, Y+43	; 0x2b
    2518:	9c a5       	ldd	r25, Y+44	; 0x2c
    251a:	01 97       	sbiw	r24, 0x01	; 1
    251c:	f1 f7       	brne	.-4      	; 0x251a <H_LCD_Void_LCDWriteCommand+0x10c>
    251e:	9c a7       	std	Y+44, r25	; 0x2c
    2520:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    2522:	88 e1       	ldi	r24, 0x18	; 24
    2524:	60 e0       	ldi	r22, 0x00	; 0
    2526:	0e 94 bb 08 	call	0x1176	; 0x1176 <M_DIO_Void_SetPinValue>
    252a:	80 e0       	ldi	r24, 0x00	; 0
    252c:	90 e0       	ldi	r25, 0x00	; 0
    252e:	a0 e8       	ldi	r26, 0x80	; 128
    2530:	bf e3       	ldi	r27, 0x3F	; 63
    2532:	8f a3       	std	Y+39, r24	; 0x27
    2534:	98 a7       	std	Y+40, r25	; 0x28
    2536:	a9 a7       	std	Y+41, r26	; 0x29
    2538:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    253a:	6f a1       	ldd	r22, Y+39	; 0x27
    253c:	78 a5       	ldd	r23, Y+40	; 0x28
    253e:	89 a5       	ldd	r24, Y+41	; 0x29
    2540:	9a a5       	ldd	r25, Y+42	; 0x2a
    2542:	20 e0       	ldi	r18, 0x00	; 0
    2544:	30 e0       	ldi	r19, 0x00	; 0
    2546:	4a e7       	ldi	r20, 0x7A	; 122
    2548:	55 e4       	ldi	r21, 0x45	; 69
    254a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    254e:	dc 01       	movw	r26, r24
    2550:	cb 01       	movw	r24, r22
    2552:	8b a3       	std	Y+35, r24	; 0x23
    2554:	9c a3       	std	Y+36, r25	; 0x24
    2556:	ad a3       	std	Y+37, r26	; 0x25
    2558:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    255a:	6b a1       	ldd	r22, Y+35	; 0x23
    255c:	7c a1       	ldd	r23, Y+36	; 0x24
    255e:	8d a1       	ldd	r24, Y+37	; 0x25
    2560:	9e a1       	ldd	r25, Y+38	; 0x26
    2562:	20 e0       	ldi	r18, 0x00	; 0
    2564:	30 e0       	ldi	r19, 0x00	; 0
    2566:	40 e8       	ldi	r20, 0x80	; 128
    2568:	5f e3       	ldi	r21, 0x3F	; 63
    256a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    256e:	88 23       	and	r24, r24
    2570:	2c f4       	brge	.+10     	; 0x257c <H_LCD_Void_LCDWriteCommand+0x16e>
		__ticks = 1;
    2572:	81 e0       	ldi	r24, 0x01	; 1
    2574:	90 e0       	ldi	r25, 0x00	; 0
    2576:	9a a3       	std	Y+34, r25	; 0x22
    2578:	89 a3       	std	Y+33, r24	; 0x21
    257a:	3f c0       	rjmp	.+126    	; 0x25fa <H_LCD_Void_LCDWriteCommand+0x1ec>
	else if (__tmp > 65535)
    257c:	6b a1       	ldd	r22, Y+35	; 0x23
    257e:	7c a1       	ldd	r23, Y+36	; 0x24
    2580:	8d a1       	ldd	r24, Y+37	; 0x25
    2582:	9e a1       	ldd	r25, Y+38	; 0x26
    2584:	20 e0       	ldi	r18, 0x00	; 0
    2586:	3f ef       	ldi	r19, 0xFF	; 255
    2588:	4f e7       	ldi	r20, 0x7F	; 127
    258a:	57 e4       	ldi	r21, 0x47	; 71
    258c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2590:	18 16       	cp	r1, r24
    2592:	4c f5       	brge	.+82     	; 0x25e6 <H_LCD_Void_LCDWriteCommand+0x1d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2594:	6f a1       	ldd	r22, Y+39	; 0x27
    2596:	78 a5       	ldd	r23, Y+40	; 0x28
    2598:	89 a5       	ldd	r24, Y+41	; 0x29
    259a:	9a a5       	ldd	r25, Y+42	; 0x2a
    259c:	20 e0       	ldi	r18, 0x00	; 0
    259e:	30 e0       	ldi	r19, 0x00	; 0
    25a0:	40 e2       	ldi	r20, 0x20	; 32
    25a2:	51 e4       	ldi	r21, 0x41	; 65
    25a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25a8:	dc 01       	movw	r26, r24
    25aa:	cb 01       	movw	r24, r22
    25ac:	bc 01       	movw	r22, r24
    25ae:	cd 01       	movw	r24, r26
    25b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25b4:	dc 01       	movw	r26, r24
    25b6:	cb 01       	movw	r24, r22
    25b8:	9a a3       	std	Y+34, r25	; 0x22
    25ba:	89 a3       	std	Y+33, r24	; 0x21
    25bc:	0f c0       	rjmp	.+30     	; 0x25dc <H_LCD_Void_LCDWriteCommand+0x1ce>
    25be:	80 e9       	ldi	r24, 0x90	; 144
    25c0:	91 e0       	ldi	r25, 0x01	; 1
    25c2:	98 a3       	std	Y+32, r25	; 0x20
    25c4:	8f 8f       	std	Y+31, r24	; 0x1f
    25c6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25c8:	98 a1       	ldd	r25, Y+32	; 0x20
    25ca:	01 97       	sbiw	r24, 0x01	; 1
    25cc:	f1 f7       	brne	.-4      	; 0x25ca <H_LCD_Void_LCDWriteCommand+0x1bc>
    25ce:	98 a3       	std	Y+32, r25	; 0x20
    25d0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25d2:	89 a1       	ldd	r24, Y+33	; 0x21
    25d4:	9a a1       	ldd	r25, Y+34	; 0x22
    25d6:	01 97       	sbiw	r24, 0x01	; 1
    25d8:	9a a3       	std	Y+34, r25	; 0x22
    25da:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25dc:	89 a1       	ldd	r24, Y+33	; 0x21
    25de:	9a a1       	ldd	r25, Y+34	; 0x22
    25e0:	00 97       	sbiw	r24, 0x00	; 0
    25e2:	69 f7       	brne	.-38     	; 0x25be <H_LCD_Void_LCDWriteCommand+0x1b0>
    25e4:	14 c0       	rjmp	.+40     	; 0x260e <H_LCD_Void_LCDWriteCommand+0x200>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25e6:	6b a1       	ldd	r22, Y+35	; 0x23
    25e8:	7c a1       	ldd	r23, Y+36	; 0x24
    25ea:	8d a1       	ldd	r24, Y+37	; 0x25
    25ec:	9e a1       	ldd	r25, Y+38	; 0x26
    25ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25f2:	dc 01       	movw	r26, r24
    25f4:	cb 01       	movw	r24, r22
    25f6:	9a a3       	std	Y+34, r25	; 0x22
    25f8:	89 a3       	std	Y+33, r24	; 0x21
    25fa:	89 a1       	ldd	r24, Y+33	; 0x21
    25fc:	9a a1       	ldd	r25, Y+34	; 0x22
    25fe:	9e 8f       	std	Y+30, r25	; 0x1e
    2600:	8d 8f       	std	Y+29, r24	; 0x1d
    2602:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2604:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2606:	01 97       	sbiw	r24, 0x01	; 1
    2608:	f1 f7       	brne	.-4      	; 0x2606 <H_LCD_Void_LCDWriteCommand+0x1f8>
    260a:	9e 8f       	std	Y+30, r25	; 0x1e
    260c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	H_LCD_Void_SetLCDPins(Copy_U8_Command);
    260e:	89 ad       	ldd	r24, Y+57	; 0x39
    2610:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <H_LCD_Void_SetLCDPins>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    2614:	88 e1       	ldi	r24, 0x18	; 24
    2616:	61 e0       	ldi	r22, 0x01	; 1
    2618:	0e 94 bb 08 	call	0x1176	; 0x1176 <M_DIO_Void_SetPinValue>
    261c:	80 e0       	ldi	r24, 0x00	; 0
    261e:	90 e0       	ldi	r25, 0x00	; 0
    2620:	a0 e8       	ldi	r26, 0x80	; 128
    2622:	bf e3       	ldi	r27, 0x3F	; 63
    2624:	89 8f       	std	Y+25, r24	; 0x19
    2626:	9a 8f       	std	Y+26, r25	; 0x1a
    2628:	ab 8f       	std	Y+27, r26	; 0x1b
    262a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    262c:	69 8d       	ldd	r22, Y+25	; 0x19
    262e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2630:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2632:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2634:	20 e0       	ldi	r18, 0x00	; 0
    2636:	30 e0       	ldi	r19, 0x00	; 0
    2638:	4a e7       	ldi	r20, 0x7A	; 122
    263a:	55 e4       	ldi	r21, 0x45	; 69
    263c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2640:	dc 01       	movw	r26, r24
    2642:	cb 01       	movw	r24, r22
    2644:	8d 8b       	std	Y+21, r24	; 0x15
    2646:	9e 8b       	std	Y+22, r25	; 0x16
    2648:	af 8b       	std	Y+23, r26	; 0x17
    264a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    264c:	6d 89       	ldd	r22, Y+21	; 0x15
    264e:	7e 89       	ldd	r23, Y+22	; 0x16
    2650:	8f 89       	ldd	r24, Y+23	; 0x17
    2652:	98 8d       	ldd	r25, Y+24	; 0x18
    2654:	20 e0       	ldi	r18, 0x00	; 0
    2656:	30 e0       	ldi	r19, 0x00	; 0
    2658:	40 e8       	ldi	r20, 0x80	; 128
    265a:	5f e3       	ldi	r21, 0x3F	; 63
    265c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2660:	88 23       	and	r24, r24
    2662:	2c f4       	brge	.+10     	; 0x266e <H_LCD_Void_LCDWriteCommand+0x260>
		__ticks = 1;
    2664:	81 e0       	ldi	r24, 0x01	; 1
    2666:	90 e0       	ldi	r25, 0x00	; 0
    2668:	9c 8b       	std	Y+20, r25	; 0x14
    266a:	8b 8b       	std	Y+19, r24	; 0x13
    266c:	3f c0       	rjmp	.+126    	; 0x26ec <H_LCD_Void_LCDWriteCommand+0x2de>
	else if (__tmp > 65535)
    266e:	6d 89       	ldd	r22, Y+21	; 0x15
    2670:	7e 89       	ldd	r23, Y+22	; 0x16
    2672:	8f 89       	ldd	r24, Y+23	; 0x17
    2674:	98 8d       	ldd	r25, Y+24	; 0x18
    2676:	20 e0       	ldi	r18, 0x00	; 0
    2678:	3f ef       	ldi	r19, 0xFF	; 255
    267a:	4f e7       	ldi	r20, 0x7F	; 127
    267c:	57 e4       	ldi	r21, 0x47	; 71
    267e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2682:	18 16       	cp	r1, r24
    2684:	4c f5       	brge	.+82     	; 0x26d8 <H_LCD_Void_LCDWriteCommand+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2686:	69 8d       	ldd	r22, Y+25	; 0x19
    2688:	7a 8d       	ldd	r23, Y+26	; 0x1a
    268a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    268c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    268e:	20 e0       	ldi	r18, 0x00	; 0
    2690:	30 e0       	ldi	r19, 0x00	; 0
    2692:	40 e2       	ldi	r20, 0x20	; 32
    2694:	51 e4       	ldi	r21, 0x41	; 65
    2696:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    269a:	dc 01       	movw	r26, r24
    269c:	cb 01       	movw	r24, r22
    269e:	bc 01       	movw	r22, r24
    26a0:	cd 01       	movw	r24, r26
    26a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26a6:	dc 01       	movw	r26, r24
    26a8:	cb 01       	movw	r24, r22
    26aa:	9c 8b       	std	Y+20, r25	; 0x14
    26ac:	8b 8b       	std	Y+19, r24	; 0x13
    26ae:	0f c0       	rjmp	.+30     	; 0x26ce <H_LCD_Void_LCDWriteCommand+0x2c0>
    26b0:	80 e9       	ldi	r24, 0x90	; 144
    26b2:	91 e0       	ldi	r25, 0x01	; 1
    26b4:	9a 8b       	std	Y+18, r25	; 0x12
    26b6:	89 8b       	std	Y+17, r24	; 0x11
    26b8:	89 89       	ldd	r24, Y+17	; 0x11
    26ba:	9a 89       	ldd	r25, Y+18	; 0x12
    26bc:	01 97       	sbiw	r24, 0x01	; 1
    26be:	f1 f7       	brne	.-4      	; 0x26bc <H_LCD_Void_LCDWriteCommand+0x2ae>
    26c0:	9a 8b       	std	Y+18, r25	; 0x12
    26c2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26c4:	8b 89       	ldd	r24, Y+19	; 0x13
    26c6:	9c 89       	ldd	r25, Y+20	; 0x14
    26c8:	01 97       	sbiw	r24, 0x01	; 1
    26ca:	9c 8b       	std	Y+20, r25	; 0x14
    26cc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26ce:	8b 89       	ldd	r24, Y+19	; 0x13
    26d0:	9c 89       	ldd	r25, Y+20	; 0x14
    26d2:	00 97       	sbiw	r24, 0x00	; 0
    26d4:	69 f7       	brne	.-38     	; 0x26b0 <H_LCD_Void_LCDWriteCommand+0x2a2>
    26d6:	14 c0       	rjmp	.+40     	; 0x2700 <H_LCD_Void_LCDWriteCommand+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26d8:	6d 89       	ldd	r22, Y+21	; 0x15
    26da:	7e 89       	ldd	r23, Y+22	; 0x16
    26dc:	8f 89       	ldd	r24, Y+23	; 0x17
    26de:	98 8d       	ldd	r25, Y+24	; 0x18
    26e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26e4:	dc 01       	movw	r26, r24
    26e6:	cb 01       	movw	r24, r22
    26e8:	9c 8b       	std	Y+20, r25	; 0x14
    26ea:	8b 8b       	std	Y+19, r24	; 0x13
    26ec:	8b 89       	ldd	r24, Y+19	; 0x13
    26ee:	9c 89       	ldd	r25, Y+20	; 0x14
    26f0:	98 8b       	std	Y+16, r25	; 0x10
    26f2:	8f 87       	std	Y+15, r24	; 0x0f
    26f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    26f6:	98 89       	ldd	r25, Y+16	; 0x10
    26f8:	01 97       	sbiw	r24, 0x01	; 1
    26fa:	f1 f7       	brne	.-4      	; 0x26f8 <H_LCD_Void_LCDWriteCommand+0x2ea>
    26fc:	98 8b       	std	Y+16, r25	; 0x10
    26fe:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    2700:	88 e1       	ldi	r24, 0x18	; 24
    2702:	60 e0       	ldi	r22, 0x00	; 0
    2704:	0e 94 bb 08 	call	0x1176	; 0x1176 <M_DIO_Void_SetPinValue>
    2708:	80 e0       	ldi	r24, 0x00	; 0
    270a:	90 e0       	ldi	r25, 0x00	; 0
    270c:	a0 e8       	ldi	r26, 0x80	; 128
    270e:	bf e3       	ldi	r27, 0x3F	; 63
    2710:	8b 87       	std	Y+11, r24	; 0x0b
    2712:	9c 87       	std	Y+12, r25	; 0x0c
    2714:	ad 87       	std	Y+13, r26	; 0x0d
    2716:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2718:	6b 85       	ldd	r22, Y+11	; 0x0b
    271a:	7c 85       	ldd	r23, Y+12	; 0x0c
    271c:	8d 85       	ldd	r24, Y+13	; 0x0d
    271e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2720:	20 e0       	ldi	r18, 0x00	; 0
    2722:	30 e0       	ldi	r19, 0x00	; 0
    2724:	4a e7       	ldi	r20, 0x7A	; 122
    2726:	55 e4       	ldi	r21, 0x45	; 69
    2728:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    272c:	dc 01       	movw	r26, r24
    272e:	cb 01       	movw	r24, r22
    2730:	8f 83       	std	Y+7, r24	; 0x07
    2732:	98 87       	std	Y+8, r25	; 0x08
    2734:	a9 87       	std	Y+9, r26	; 0x09
    2736:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2738:	6f 81       	ldd	r22, Y+7	; 0x07
    273a:	78 85       	ldd	r23, Y+8	; 0x08
    273c:	89 85       	ldd	r24, Y+9	; 0x09
    273e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2740:	20 e0       	ldi	r18, 0x00	; 0
    2742:	30 e0       	ldi	r19, 0x00	; 0
    2744:	40 e8       	ldi	r20, 0x80	; 128
    2746:	5f e3       	ldi	r21, 0x3F	; 63
    2748:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    274c:	88 23       	and	r24, r24
    274e:	2c f4       	brge	.+10     	; 0x275a <H_LCD_Void_LCDWriteCommand+0x34c>
		__ticks = 1;
    2750:	81 e0       	ldi	r24, 0x01	; 1
    2752:	90 e0       	ldi	r25, 0x00	; 0
    2754:	9e 83       	std	Y+6, r25	; 0x06
    2756:	8d 83       	std	Y+5, r24	; 0x05
    2758:	3f c0       	rjmp	.+126    	; 0x27d8 <H_LCD_Void_LCDWriteCommand+0x3ca>
	else if (__tmp > 65535)
    275a:	6f 81       	ldd	r22, Y+7	; 0x07
    275c:	78 85       	ldd	r23, Y+8	; 0x08
    275e:	89 85       	ldd	r24, Y+9	; 0x09
    2760:	9a 85       	ldd	r25, Y+10	; 0x0a
    2762:	20 e0       	ldi	r18, 0x00	; 0
    2764:	3f ef       	ldi	r19, 0xFF	; 255
    2766:	4f e7       	ldi	r20, 0x7F	; 127
    2768:	57 e4       	ldi	r21, 0x47	; 71
    276a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    276e:	18 16       	cp	r1, r24
    2770:	4c f5       	brge	.+82     	; 0x27c4 <H_LCD_Void_LCDWriteCommand+0x3b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2772:	6b 85       	ldd	r22, Y+11	; 0x0b
    2774:	7c 85       	ldd	r23, Y+12	; 0x0c
    2776:	8d 85       	ldd	r24, Y+13	; 0x0d
    2778:	9e 85       	ldd	r25, Y+14	; 0x0e
    277a:	20 e0       	ldi	r18, 0x00	; 0
    277c:	30 e0       	ldi	r19, 0x00	; 0
    277e:	40 e2       	ldi	r20, 0x20	; 32
    2780:	51 e4       	ldi	r21, 0x41	; 65
    2782:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2786:	dc 01       	movw	r26, r24
    2788:	cb 01       	movw	r24, r22
    278a:	bc 01       	movw	r22, r24
    278c:	cd 01       	movw	r24, r26
    278e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2792:	dc 01       	movw	r26, r24
    2794:	cb 01       	movw	r24, r22
    2796:	9e 83       	std	Y+6, r25	; 0x06
    2798:	8d 83       	std	Y+5, r24	; 0x05
    279a:	0f c0       	rjmp	.+30     	; 0x27ba <H_LCD_Void_LCDWriteCommand+0x3ac>
    279c:	80 e9       	ldi	r24, 0x90	; 144
    279e:	91 e0       	ldi	r25, 0x01	; 1
    27a0:	9c 83       	std	Y+4, r25	; 0x04
    27a2:	8b 83       	std	Y+3, r24	; 0x03
    27a4:	8b 81       	ldd	r24, Y+3	; 0x03
    27a6:	9c 81       	ldd	r25, Y+4	; 0x04
    27a8:	01 97       	sbiw	r24, 0x01	; 1
    27aa:	f1 f7       	brne	.-4      	; 0x27a8 <H_LCD_Void_LCDWriteCommand+0x39a>
    27ac:	9c 83       	std	Y+4, r25	; 0x04
    27ae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27b0:	8d 81       	ldd	r24, Y+5	; 0x05
    27b2:	9e 81       	ldd	r25, Y+6	; 0x06
    27b4:	01 97       	sbiw	r24, 0x01	; 1
    27b6:	9e 83       	std	Y+6, r25	; 0x06
    27b8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27ba:	8d 81       	ldd	r24, Y+5	; 0x05
    27bc:	9e 81       	ldd	r25, Y+6	; 0x06
    27be:	00 97       	sbiw	r24, 0x00	; 0
    27c0:	69 f7       	brne	.-38     	; 0x279c <H_LCD_Void_LCDWriteCommand+0x38e>
    27c2:	14 c0       	rjmp	.+40     	; 0x27ec <H_LCD_Void_LCDWriteCommand+0x3de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27c4:	6f 81       	ldd	r22, Y+7	; 0x07
    27c6:	78 85       	ldd	r23, Y+8	; 0x08
    27c8:	89 85       	ldd	r24, Y+9	; 0x09
    27ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    27cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d0:	dc 01       	movw	r26, r24
    27d2:	cb 01       	movw	r24, r22
    27d4:	9e 83       	std	Y+6, r25	; 0x06
    27d6:	8d 83       	std	Y+5, r24	; 0x05
    27d8:	8d 81       	ldd	r24, Y+5	; 0x05
    27da:	9e 81       	ldd	r25, Y+6	; 0x06
    27dc:	9a 83       	std	Y+2, r25	; 0x02
    27de:	89 83       	std	Y+1, r24	; 0x01
    27e0:	89 81       	ldd	r24, Y+1	; 0x01
    27e2:	9a 81       	ldd	r25, Y+2	; 0x02
    27e4:	01 97       	sbiw	r24, 0x01	; 1
    27e6:	f1 f7       	brne	.-4      	; 0x27e4 <H_LCD_Void_LCDWriteCommand+0x3d6>
    27e8:	9a 83       	std	Y+2, r25	; 0x02
    27ea:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(1);
}
    27ec:	e9 96       	adiw	r28, 0x39	; 57
    27ee:	0f b6       	in	r0, 0x3f	; 63
    27f0:	f8 94       	cli
    27f2:	de bf       	out	0x3e, r29	; 62
    27f4:	0f be       	out	0x3f, r0	; 63
    27f6:	cd bf       	out	0x3d, r28	; 61
    27f8:	cf 91       	pop	r28
    27fa:	df 91       	pop	r29
    27fc:	08 95       	ret

000027fe <H_LCD_Void_LCDWriteString>:
void H_LCD_Void_LCDWriteString(u8* Copy_U8_P)
{
    27fe:	df 93       	push	r29
    2800:	cf 93       	push	r28
    2802:	00 d0       	rcall	.+0      	; 0x2804 <H_LCD_Void_LCDWriteString+0x6>
    2804:	0f 92       	push	r0
    2806:	cd b7       	in	r28, 0x3d	; 61
    2808:	de b7       	in	r29, 0x3e	; 62
    280a:	9b 83       	std	Y+3, r25	; 0x03
    280c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Counter = 0;
    280e:	19 82       	std	Y+1, r1	; 0x01
    2810:	0e c0       	rjmp	.+28     	; 0x282e <H_LCD_Void_LCDWriteString+0x30>
	while(Copy_U8_P[Local_U8_Counter] != '\0')
	{
		H_LCD_Void_LCDWriteCharacter(Copy_U8_P[Local_U8_Counter]);
    2812:	89 81       	ldd	r24, Y+1	; 0x01
    2814:	28 2f       	mov	r18, r24
    2816:	30 e0       	ldi	r19, 0x00	; 0
    2818:	8a 81       	ldd	r24, Y+2	; 0x02
    281a:	9b 81       	ldd	r25, Y+3	; 0x03
    281c:	fc 01       	movw	r30, r24
    281e:	e2 0f       	add	r30, r18
    2820:	f3 1f       	adc	r31, r19
    2822:	80 81       	ld	r24, Z
    2824:	0e 94 0f 10 	call	0x201e	; 0x201e <H_LCD_Void_LCDWriteCharacter>
		Local_U8_Counter++;
    2828:	89 81       	ldd	r24, Y+1	; 0x01
    282a:	8f 5f       	subi	r24, 0xFF	; 255
    282c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
void H_LCD_Void_LCDWriteString(u8* Copy_U8_P)
{
	u8 Local_U8_Counter = 0;
	while(Copy_U8_P[Local_U8_Counter] != '\0')
    282e:	89 81       	ldd	r24, Y+1	; 0x01
    2830:	28 2f       	mov	r18, r24
    2832:	30 e0       	ldi	r19, 0x00	; 0
    2834:	8a 81       	ldd	r24, Y+2	; 0x02
    2836:	9b 81       	ldd	r25, Y+3	; 0x03
    2838:	fc 01       	movw	r30, r24
    283a:	e2 0f       	add	r30, r18
    283c:	f3 1f       	adc	r31, r19
    283e:	80 81       	ld	r24, Z
    2840:	88 23       	and	r24, r24
    2842:	39 f7       	brne	.-50     	; 0x2812 <H_LCD_Void_LCDWriteString+0x14>
	{
		H_LCD_Void_LCDWriteCharacter(Copy_U8_P[Local_U8_Counter]);
		Local_U8_Counter++;
	}
}
    2844:	0f 90       	pop	r0
    2846:	0f 90       	pop	r0
    2848:	0f 90       	pop	r0
    284a:	cf 91       	pop	r28
    284c:	df 91       	pop	r29
    284e:	08 95       	ret

00002850 <H_LCD_Void_LCDWriteNumber>:
void H_LCD_Void_LCDWriteNumber(s32 Copy_S32_Num)
{
    2850:	0f 93       	push	r16
    2852:	1f 93       	push	r17
    2854:	df 93       	push	r29
    2856:	cf 93       	push	r28
    2858:	cd b7       	in	r28, 0x3d	; 61
    285a:	de b7       	in	r29, 0x3e	; 62
    285c:	65 97       	sbiw	r28, 0x15	; 21
    285e:	0f b6       	in	r0, 0x3f	; 63
    2860:	f8 94       	cli
    2862:	de bf       	out	0x3e, r29	; 62
    2864:	0f be       	out	0x3f, r0	; 63
    2866:	cd bf       	out	0x3d, r28	; 61
    2868:	6a 8b       	std	Y+18, r22	; 0x12
    286a:	7b 8b       	std	Y+19, r23	; 0x13
    286c:	8c 8b       	std	Y+20, r24	; 0x14
    286e:	9d 8b       	std	Y+21, r25	; 0x15
	s8 Local_S8_Counter = -1;
    2870:	8f ef       	ldi	r24, 0xFF	; 255
    2872:	89 83       	std	Y+1, r24	; 0x01
	u8 Local_U8_Arr[16];
	if(Copy_S32_Num < 0)
    2874:	8a 89       	ldd	r24, Y+18	; 0x12
    2876:	9b 89       	ldd	r25, Y+19	; 0x13
    2878:	ac 89       	ldd	r26, Y+20	; 0x14
    287a:	bd 89       	ldd	r27, Y+21	; 0x15
    287c:	bb 23       	and	r27, r27
    287e:	94 f4       	brge	.+36     	; 0x28a4 <H_LCD_Void_LCDWriteNumber+0x54>
	{
		Copy_S32_Num = Copy_S32_Num * -1;
    2880:	8a 89       	ldd	r24, Y+18	; 0x12
    2882:	9b 89       	ldd	r25, Y+19	; 0x13
    2884:	ac 89       	ldd	r26, Y+20	; 0x14
    2886:	bd 89       	ldd	r27, Y+21	; 0x15
    2888:	b0 95       	com	r27
    288a:	a0 95       	com	r26
    288c:	90 95       	com	r25
    288e:	81 95       	neg	r24
    2890:	9f 4f       	sbci	r25, 0xFF	; 255
    2892:	af 4f       	sbci	r26, 0xFF	; 255
    2894:	bf 4f       	sbci	r27, 0xFF	; 255
    2896:	8a 8b       	std	Y+18, r24	; 0x12
    2898:	9b 8b       	std	Y+19, r25	; 0x13
    289a:	ac 8b       	std	Y+20, r26	; 0x14
    289c:	bd 8b       	std	Y+21, r27	; 0x15
		H_LCD_Void_LCDWriteCharacter('-');
    289e:	8d e2       	ldi	r24, 0x2D	; 45
    28a0:	0e 94 0f 10 	call	0x201e	; 0x201e <H_LCD_Void_LCDWriteCharacter>
	}
	do
	{
		Local_S8_Counter++;
    28a4:	89 81       	ldd	r24, Y+1	; 0x01
    28a6:	8f 5f       	subi	r24, 0xFF	; 255
    28a8:	89 83       	std	Y+1, r24	; 0x01
		Local_U8_Arr[Local_S8_Counter]  =  Copy_S32_Num % 10;
    28aa:	89 81       	ldd	r24, Y+1	; 0x01
    28ac:	08 2f       	mov	r16, r24
    28ae:	11 27       	eor	r17, r17
    28b0:	07 fd       	sbrc	r16, 7
    28b2:	10 95       	com	r17
    28b4:	8a 89       	ldd	r24, Y+18	; 0x12
    28b6:	9b 89       	ldd	r25, Y+19	; 0x13
    28b8:	ac 89       	ldd	r26, Y+20	; 0x14
    28ba:	bd 89       	ldd	r27, Y+21	; 0x15
    28bc:	2a e0       	ldi	r18, 0x0A	; 10
    28be:	30 e0       	ldi	r19, 0x00	; 0
    28c0:	40 e0       	ldi	r20, 0x00	; 0
    28c2:	50 e0       	ldi	r21, 0x00	; 0
    28c4:	bc 01       	movw	r22, r24
    28c6:	cd 01       	movw	r24, r26
    28c8:	0e 94 98 1e 	call	0x3d30	; 0x3d30 <__divmodsi4>
    28cc:	dc 01       	movw	r26, r24
    28ce:	cb 01       	movw	r24, r22
    28d0:	28 2f       	mov	r18, r24
    28d2:	ce 01       	movw	r24, r28
    28d4:	02 96       	adiw	r24, 0x02	; 2
    28d6:	fc 01       	movw	r30, r24
    28d8:	e0 0f       	add	r30, r16
    28da:	f1 1f       	adc	r31, r17
    28dc:	20 83       	st	Z, r18
		Copy_S32_Num = Copy_S32_Num / 10;
    28de:	8a 89       	ldd	r24, Y+18	; 0x12
    28e0:	9b 89       	ldd	r25, Y+19	; 0x13
    28e2:	ac 89       	ldd	r26, Y+20	; 0x14
    28e4:	bd 89       	ldd	r27, Y+21	; 0x15
    28e6:	2a e0       	ldi	r18, 0x0A	; 10
    28e8:	30 e0       	ldi	r19, 0x00	; 0
    28ea:	40 e0       	ldi	r20, 0x00	; 0
    28ec:	50 e0       	ldi	r21, 0x00	; 0
    28ee:	bc 01       	movw	r22, r24
    28f0:	cd 01       	movw	r24, r26
    28f2:	0e 94 98 1e 	call	0x3d30	; 0x3d30 <__divmodsi4>
    28f6:	da 01       	movw	r26, r20
    28f8:	c9 01       	movw	r24, r18
    28fa:	8a 8b       	std	Y+18, r24	; 0x12
    28fc:	9b 8b       	std	Y+19, r25	; 0x13
    28fe:	ac 8b       	std	Y+20, r26	; 0x14
    2900:	bd 8b       	std	Y+21, r27	; 0x15
	}while(Copy_S32_Num != 0);
    2902:	8a 89       	ldd	r24, Y+18	; 0x12
    2904:	9b 89       	ldd	r25, Y+19	; 0x13
    2906:	ac 89       	ldd	r26, Y+20	; 0x14
    2908:	bd 89       	ldd	r27, Y+21	; 0x15
    290a:	00 97       	sbiw	r24, 0x00	; 0
    290c:	a1 05       	cpc	r26, r1
    290e:	b1 05       	cpc	r27, r1
    2910:	49 f6       	brne	.-110    	; 0x28a4 <H_LCD_Void_LCDWriteNumber+0x54>
    2912:	11 c0       	rjmp	.+34     	; 0x2936 <H_LCD_Void_LCDWriteNumber+0xe6>
	while(Local_S8_Counter >= 0)
	{
		H_LCD_Void_LCDWriteCharacter(Local_U8_Arr[Local_S8_Counter] + 48);
    2914:	89 81       	ldd	r24, Y+1	; 0x01
    2916:	28 2f       	mov	r18, r24
    2918:	33 27       	eor	r19, r19
    291a:	27 fd       	sbrc	r18, 7
    291c:	30 95       	com	r19
    291e:	ce 01       	movw	r24, r28
    2920:	02 96       	adiw	r24, 0x02	; 2
    2922:	fc 01       	movw	r30, r24
    2924:	e2 0f       	add	r30, r18
    2926:	f3 1f       	adc	r31, r19
    2928:	80 81       	ld	r24, Z
    292a:	80 5d       	subi	r24, 0xD0	; 208
    292c:	0e 94 0f 10 	call	0x201e	; 0x201e <H_LCD_Void_LCDWriteCharacter>
		Local_S8_Counter--;
    2930:	89 81       	ldd	r24, Y+1	; 0x01
    2932:	81 50       	subi	r24, 0x01	; 1
    2934:	89 83       	std	Y+1, r24	; 0x01
	{
		Local_S8_Counter++;
		Local_U8_Arr[Local_S8_Counter]  =  Copy_S32_Num % 10;
		Copy_S32_Num = Copy_S32_Num / 10;
	}while(Copy_S32_Num != 0);
	while(Local_S8_Counter >= 0)
    2936:	89 81       	ldd	r24, Y+1	; 0x01
    2938:	88 23       	and	r24, r24
    293a:	64 f7       	brge	.-40     	; 0x2914 <H_LCD_Void_LCDWriteNumber+0xc4>
		H_LCD_Void_LCDWriteCharacter(Local_U8_Arr[Local_S8_Counter] + 48);
		Local_S8_Counter--;
	}


}
    293c:	65 96       	adiw	r28, 0x15	; 21
    293e:	0f b6       	in	r0, 0x3f	; 63
    2940:	f8 94       	cli
    2942:	de bf       	out	0x3e, r29	; 62
    2944:	0f be       	out	0x3f, r0	; 63
    2946:	cd bf       	out	0x3d, r28	; 61
    2948:	cf 91       	pop	r28
    294a:	df 91       	pop	r29
    294c:	1f 91       	pop	r17
    294e:	0f 91       	pop	r16
    2950:	08 95       	ret

00002952 <H_LCD_Void_LCDGoTo>:




void H_LCD_Void_LCDGoTo(u8 Copy_U8_Row,u8 Copy_U8_Col)
{
    2952:	df 93       	push	r29
    2954:	cf 93       	push	r28
    2956:	00 d0       	rcall	.+0      	; 0x2958 <H_LCD_Void_LCDGoTo+0x6>
    2958:	00 d0       	rcall	.+0      	; 0x295a <H_LCD_Void_LCDGoTo+0x8>
    295a:	cd b7       	in	r28, 0x3d	; 61
    295c:	de b7       	in	r29, 0x3e	; 62
    295e:	8b 83       	std	Y+3, r24	; 0x03
    2960:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_U8Arr [2] = {0x80 , 0xC0};
    2962:	80 e8       	ldi	r24, 0x80	; 128
    2964:	89 83       	std	Y+1, r24	; 0x01
    2966:	80 ec       	ldi	r24, 0xC0	; 192
    2968:	8a 83       	std	Y+2, r24	; 0x02
	H_LCD_Void_LCDWriteCommand(Local_U8Arr[Copy_U8_Row] + Copy_U8_Col);
    296a:	8b 81       	ldd	r24, Y+3	; 0x03
    296c:	28 2f       	mov	r18, r24
    296e:	30 e0       	ldi	r19, 0x00	; 0
    2970:	ce 01       	movw	r24, r28
    2972:	01 96       	adiw	r24, 0x01	; 1
    2974:	fc 01       	movw	r30, r24
    2976:	e2 0f       	add	r30, r18
    2978:	f3 1f       	adc	r31, r19
    297a:	90 81       	ld	r25, Z
    297c:	8c 81       	ldd	r24, Y+4	; 0x04
    297e:	89 0f       	add	r24, r25
    2980:	0e 94 07 12 	call	0x240e	; 0x240e <H_LCD_Void_LCDWriteCommand>
}
    2984:	0f 90       	pop	r0
    2986:	0f 90       	pop	r0
    2988:	0f 90       	pop	r0
    298a:	0f 90       	pop	r0
    298c:	cf 91       	pop	r28
    298e:	df 91       	pop	r29
    2990:	08 95       	ret

00002992 <H_LCD_Void_LCDClear>:




void H_LCD_Void_LCDClear(void)
{
    2992:	df 93       	push	r29
    2994:	cf 93       	push	r28
    2996:	cd b7       	in	r28, 0x3d	; 61
    2998:	de b7       	in	r29, 0x3e	; 62
	H_LCD_Void_LCDWriteCommand(LCD_CLEAR);
    299a:	81 e0       	ldi	r24, 0x01	; 1
    299c:	0e 94 07 12 	call	0x240e	; 0x240e <H_LCD_Void_LCDWriteCommand>
}
    29a0:	cf 91       	pop	r28
    29a2:	df 91       	pop	r29
    29a4:	08 95       	ret

000029a6 <H_LCD_Void_SetLCDPins>:

static void H_LCD_Void_SetLCDPins(u8 Copy_U8_Pins)
{
    29a6:	df 93       	push	r29
    29a8:	cf 93       	push	r28
    29aa:	0f 92       	push	r0
    29ac:	cd b7       	in	r28, 0x3d	; 61
    29ae:	de b7       	in	r29, 0x3e	; 62
    29b0:	89 83       	std	Y+1, r24	; 0x01


	M_DIO_Void_SetPinValue(LCD_D4_PIN,Copy_U8_Pins >> 0 & 0x01);
    29b2:	89 81       	ldd	r24, Y+1	; 0x01
    29b4:	98 2f       	mov	r25, r24
    29b6:	91 70       	andi	r25, 0x01	; 1
    29b8:	8e e0       	ldi	r24, 0x0E	; 14
    29ba:	69 2f       	mov	r22, r25
    29bc:	0e 94 bb 08 	call	0x1176	; 0x1176 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,Copy_U8_Pins >> 1 & 0x01);
    29c0:	89 81       	ldd	r24, Y+1	; 0x01
    29c2:	86 95       	lsr	r24
    29c4:	98 2f       	mov	r25, r24
    29c6:	91 70       	andi	r25, 0x01	; 1
    29c8:	8f e0       	ldi	r24, 0x0F	; 15
    29ca:	69 2f       	mov	r22, r25
    29cc:	0e 94 bb 08 	call	0x1176	; 0x1176 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,Copy_U8_Pins >> 2 & 0x01);
    29d0:	89 81       	ldd	r24, Y+1	; 0x01
    29d2:	86 95       	lsr	r24
    29d4:	86 95       	lsr	r24
    29d6:	98 2f       	mov	r25, r24
    29d8:	91 70       	andi	r25, 0x01	; 1
    29da:	80 e1       	ldi	r24, 0x10	; 16
    29dc:	69 2f       	mov	r22, r25
    29de:	0e 94 bb 08 	call	0x1176	; 0x1176 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,Copy_U8_Pins >> 3 & 0x01);
    29e2:	89 81       	ldd	r24, Y+1	; 0x01
    29e4:	86 95       	lsr	r24
    29e6:	86 95       	lsr	r24
    29e8:	86 95       	lsr	r24
    29ea:	98 2f       	mov	r25, r24
    29ec:	91 70       	andi	r25, 0x01	; 1
    29ee:	81 e1       	ldi	r24, 0x11	; 17
    29f0:	69 2f       	mov	r22, r25
    29f2:	0e 94 bb 08 	call	0x1176	; 0x1176 <M_DIO_Void_SetPinValue>

}
    29f6:	0f 90       	pop	r0
    29f8:	cf 91       	pop	r28
    29fa:	df 91       	pop	r29
    29fc:	08 95       	ret

000029fe <H_Servo_Void_ServoInit>:
 */

#include "Servo_Interface.h"
#include "Timer_Interface.h"
void H_Servo_Void_ServoInit(void)
{
    29fe:	df 93       	push	r29
    2a00:	cf 93       	push	r28
    2a02:	cd b7       	in	r28, 0x3d	; 61
    2a04:	de b7       	in	r29, 0x3e	; 62
        M_DIO_Void_SetPinDirection(PB3_PIN,OUTPUT);
    2a06:	87 e1       	ldi	r24, 0x17	; 23
    2a08:	61 e0       	ldi	r22, 0x01	; 1
    2a0a:	0e 94 a5 07 	call	0xf4a	; 0xf4a <M_DIO_Void_SetPinDirection>
	M_Timer_Void_PWMInit(TIMER0_CHANNEL);
    2a0e:	80 e0       	ldi	r24, 0x00	; 0
    2a10:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <M_Timer_Void_PWMInit>
	M_Timer_Void_PWMSetFreaquancy(50);
    2a14:	82 e3       	ldi	r24, 0x32	; 50
    2a16:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <M_Timer_Void_PWMSetFreaquancy>
}
    2a1a:	cf 91       	pop	r28
    2a1c:	df 91       	pop	r29
    2a1e:	08 95       	ret

00002a20 <H_Servo_Void_ServoSetAngel>:
void H_Servo_Void_ServoSetAngel(s16 Copy_U8_Angel)
{
    2a20:	df 93       	push	r29
    2a22:	cf 93       	push	r28
    2a24:	00 d0       	rcall	.+0      	; 0x2a26 <H_Servo_Void_ServoSetAngel+0x6>
    2a26:	00 d0       	rcall	.+0      	; 0x2a28 <H_Servo_Void_ServoSetAngel+0x8>
    2a28:	00 d0       	rcall	.+0      	; 0x2a2a <H_Servo_Void_ServoSetAngel+0xa>
    2a2a:	cd b7       	in	r28, 0x3d	; 61
    2a2c:	de b7       	in	r29, 0x3e	; 62
    2a2e:	9e 83       	std	Y+6, r25	; 0x06
    2a30:	8d 83       	std	Y+5, r24	; 0x05
	f32 Local_F32_Value = ((Copy_U8_Angel * 5.0 ) / 180.0) + 5.0;
    2a32:	8d 81       	ldd	r24, Y+5	; 0x05
    2a34:	9e 81       	ldd	r25, Y+6	; 0x06
    2a36:	aa 27       	eor	r26, r26
    2a38:	97 fd       	sbrc	r25, 7
    2a3a:	a0 95       	com	r26
    2a3c:	ba 2f       	mov	r27, r26
    2a3e:	bc 01       	movw	r22, r24
    2a40:	cd 01       	movw	r24, r26
    2a42:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    2a46:	dc 01       	movw	r26, r24
    2a48:	cb 01       	movw	r24, r22
    2a4a:	bc 01       	movw	r22, r24
    2a4c:	cd 01       	movw	r24, r26
    2a4e:	20 e0       	ldi	r18, 0x00	; 0
    2a50:	30 e0       	ldi	r19, 0x00	; 0
    2a52:	40 ea       	ldi	r20, 0xA0	; 160
    2a54:	50 e4       	ldi	r21, 0x40	; 64
    2a56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a5a:	dc 01       	movw	r26, r24
    2a5c:	cb 01       	movw	r24, r22
    2a5e:	bc 01       	movw	r22, r24
    2a60:	cd 01       	movw	r24, r26
    2a62:	20 e0       	ldi	r18, 0x00	; 0
    2a64:	30 e0       	ldi	r19, 0x00	; 0
    2a66:	44 e3       	ldi	r20, 0x34	; 52
    2a68:	53 e4       	ldi	r21, 0x43	; 67
    2a6a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2a6e:	dc 01       	movw	r26, r24
    2a70:	cb 01       	movw	r24, r22
    2a72:	bc 01       	movw	r22, r24
    2a74:	cd 01       	movw	r24, r26
    2a76:	20 e0       	ldi	r18, 0x00	; 0
    2a78:	30 e0       	ldi	r19, 0x00	; 0
    2a7a:	40 ea       	ldi	r20, 0xA0	; 160
    2a7c:	50 e4       	ldi	r21, 0x40	; 64
    2a7e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2a82:	dc 01       	movw	r26, r24
    2a84:	cb 01       	movw	r24, r22
    2a86:	89 83       	std	Y+1, r24	; 0x01
    2a88:	9a 83       	std	Y+2, r25	; 0x02
    2a8a:	ab 83       	std	Y+3, r26	; 0x03
    2a8c:	bc 83       	std	Y+4, r27	; 0x04
	M_Timer_Void_PWMSetDutyCycle(TIMER0_CHANNEL,Local_F32_Value);
    2a8e:	29 81       	ldd	r18, Y+1	; 0x01
    2a90:	3a 81       	ldd	r19, Y+2	; 0x02
    2a92:	4b 81       	ldd	r20, Y+3	; 0x03
    2a94:	5c 81       	ldd	r21, Y+4	; 0x04
    2a96:	80 e0       	ldi	r24, 0x00	; 0
    2a98:	ba 01       	movw	r22, r20
    2a9a:	a9 01       	movw	r20, r18
    2a9c:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <M_Timer_Void_PWMSetDutyCycle>
}
    2aa0:	26 96       	adiw	r28, 0x06	; 6
    2aa2:	0f b6       	in	r0, 0x3f	; 63
    2aa4:	f8 94       	cli
    2aa6:	de bf       	out	0x3e, r29	; 62
    2aa8:	0f be       	out	0x3f, r0	; 63
    2aaa:	cd bf       	out	0x3d, r28	; 61
    2aac:	cf 91       	pop	r28
    2aae:	df 91       	pop	r29
    2ab0:	08 95       	ret

00002ab2 <H_Servo_Void_ServoSetStart>:
void H_Servo_Void_ServoSetStart(void)
{
    2ab2:	df 93       	push	r29
    2ab4:	cf 93       	push	r28
    2ab6:	cd b7       	in	r28, 0x3d	; 61
    2ab8:	de b7       	in	r29, 0x3e	; 62
	M_Timer_Void_PWMStart(TIMER0_CHANNEL);
    2aba:	80 e0       	ldi	r24, 0x00	; 0
    2abc:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <M_Timer_Void_PWMStart>
}
    2ac0:	cf 91       	pop	r28
    2ac2:	df 91       	pop	r29
    2ac4:	08 95       	ret

00002ac6 <H_Servo_Void_ServoSetStop>:
void H_Servo_Void_ServoSetStop(void)
{
    2ac6:	df 93       	push	r29
    2ac8:	cf 93       	push	r28
    2aca:	cd b7       	in	r28, 0x3d	; 61
    2acc:	de b7       	in	r29, 0x3e	; 62
M_Timer_Void_PWMStop(TIMER0_CHANNEL);
    2ace:	80 e0       	ldi	r24, 0x00	; 0
    2ad0:	0e 94 56 0e 	call	0x1cac	; 0x1cac <M_Timer_Void_PWMStop>
}
    2ad4:	cf 91       	pop	r28
    2ad6:	df 91       	pop	r29
    2ad8:	08 95       	ret

00002ada <H_Servo_Void_ServoForward>:
void H_Servo_Void_ServoForward(void)
{
    2ada:	df 93       	push	r29
    2adc:	cf 93       	push	r28
    2ade:	cd b7       	in	r28, 0x3d	; 61
    2ae0:	de b7       	in	r29, 0x3e	; 62
	H_Servo_Void_ServoSetAngel(90);
    2ae2:	8a e5       	ldi	r24, 0x5A	; 90
    2ae4:	90 e0       	ldi	r25, 0x00	; 0
    2ae6:	0e 94 10 15 	call	0x2a20	; 0x2a20 <H_Servo_Void_ServoSetAngel>
	H_Servo_Void_ServoSetStart();
    2aea:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <H_Servo_Void_ServoSetStart>
}
    2aee:	cf 91       	pop	r28
    2af0:	df 91       	pop	r29
    2af2:	08 95       	ret

00002af4 <H_Servo_Void_ServoLeft>:
void H_Servo_Void_ServoLeft(void)
{
    2af4:	df 93       	push	r29
    2af6:	cf 93       	push	r28
    2af8:	cd b7       	in	r28, 0x3d	; 61
    2afa:	de b7       	in	r29, 0x3e	; 62
	H_Servo_Void_ServoSetAngel(300);
    2afc:	8c e2       	ldi	r24, 0x2C	; 44
    2afe:	91 e0       	ldi	r25, 0x01	; 1
    2b00:	0e 94 10 15 	call	0x2a20	; 0x2a20 <H_Servo_Void_ServoSetAngel>
	H_Servo_Void_ServoSetStart();
    2b04:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <H_Servo_Void_ServoSetStart>
}
    2b08:	cf 91       	pop	r28
    2b0a:	df 91       	pop	r29
    2b0c:	08 95       	ret

00002b0e <H_Servo_Void_ServoRight>:
void H_Servo_Void_ServoRight(void)
{
    2b0e:	df 93       	push	r29
    2b10:	cf 93       	push	r28
    2b12:	cd b7       	in	r28, 0x3d	; 61
    2b14:	de b7       	in	r29, 0x3e	; 62
	H_Servo_Void_ServoSetAngel(-90);
    2b16:	86 ea       	ldi	r24, 0xA6	; 166
    2b18:	9f ef       	ldi	r25, 0xFF	; 255
    2b1a:	0e 94 10 15 	call	0x2a20	; 0x2a20 <H_Servo_Void_ServoSetAngel>
	H_Servo_Void_ServoSetStart();
    2b1e:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <H_Servo_Void_ServoSetStart>
}
    2b22:	cf 91       	pop	r28
    2b24:	df 91       	pop	r29
    2b26:	08 95       	ret

00002b28 <__vector_9>:
#include "DIO_Interface.h"
#define  Trigger_pin	PA0	/* Trigger pin */

int TimerOverflow = 0;

ISR(TIMER1_OVF_vect) {
    2b28:	1f 92       	push	r1
    2b2a:	0f 92       	push	r0
    2b2c:	0f b6       	in	r0, 0x3f	; 63
    2b2e:	0f 92       	push	r0
    2b30:	11 24       	eor	r1, r1
    2b32:	8f 93       	push	r24
    2b34:	9f 93       	push	r25
    2b36:	df 93       	push	r29
    2b38:	cf 93       	push	r28
    2b3a:	cd b7       	in	r28, 0x3d	; 61
    2b3c:	de b7       	in	r29, 0x3e	; 62
	TimerOverflow++; /* Increment Timer Overflow count */
    2b3e:	80 91 a1 01 	lds	r24, 0x01A1
    2b42:	90 91 a2 01 	lds	r25, 0x01A2
    2b46:	01 96       	adiw	r24, 0x01	; 1
    2b48:	90 93 a2 01 	sts	0x01A2, r25
    2b4c:	80 93 a1 01 	sts	0x01A1, r24
}
    2b50:	cf 91       	pop	r28
    2b52:	df 91       	pop	r29
    2b54:	9f 91       	pop	r25
    2b56:	8f 91       	pop	r24
    2b58:	0f 90       	pop	r0
    2b5a:	0f be       	out	0x3f, r0	; 63
    2b5c:	0f 90       	pop	r0
    2b5e:	1f 90       	pop	r1
    2b60:	18 95       	reti

00002b62 <Ultrasonic_getDist>:

long count;
u8 distance;
/* Set all bit to zero Normal operation */

u8 Ultrasonic_getDist(void) {
    2b62:	ef 92       	push	r14
    2b64:	ff 92       	push	r15
    2b66:	0f 93       	push	r16
    2b68:	1f 93       	push	r17
    2b6a:	df 93       	push	r29
    2b6c:	cf 93       	push	r28
    2b6e:	cd b7       	in	r28, 0x3d	; 61
    2b70:	de b7       	in	r29, 0x3e	; 62
    2b72:	68 97       	sbiw	r28, 0x18	; 24
    2b74:	0f b6       	in	r0, 0x3f	; 63
    2b76:	f8 94       	cli
    2b78:	de bf       	out	0x3e, r29	; 62
    2b7a:	0f be       	out	0x3f, r0	; 63
    2b7c:	cd bf       	out	0x3d, r28	; 61

	M_DIO_Void_SetPinDirection(PA0_PIN,OUTPUT);
    2b7e:	8a e0       	ldi	r24, 0x0A	; 10
    2b80:	61 e0       	ldi	r22, 0x01	; 1
    2b82:	0e 94 a5 07 	call	0xf4a	; 0xf4a <M_DIO_Void_SetPinDirection>
	//DDRA = 0x01; /* Make trigger pin as output */
	PORTD = 0xFF; /* Turn on Pull-up */
    2b86:	e2 e3       	ldi	r30, 0x32	; 50
    2b88:	f0 e0       	ldi	r31, 0x00	; 0
    2b8a:	8f ef       	ldi	r24, 0xFF	; 255
    2b8c:	80 83       	st	Z, r24

	sei();// A
    2b8e:	78 94       	sei

	TIMSK = (1 << TOIE1); //Enable Timer1 overflow interrupt
    2b90:	e9 e5       	ldi	r30, 0x59	; 89
    2b92:	f0 e0       	ldi	r31, 0x00	; 0
    2b94:	84 e0       	ldi	r24, 0x04	; 4
    2b96:	80 83       	st	Z, r24
	TCCR1A = 0;
    2b98:	ef e4       	ldi	r30, 0x4F	; 79
    2b9a:	f0 e0       	ldi	r31, 0x00	; 0
    2b9c:	10 82       	st	Z, r1
	/* Give 10us trigger pulse on trig. pin to HC-SR04 */
	PORTA |= (1 << Trigger_pin);
    2b9e:	ab e3       	ldi	r26, 0x3B	; 59
    2ba0:	b0 e0       	ldi	r27, 0x00	; 0
    2ba2:	eb e3       	ldi	r30, 0x3B	; 59
    2ba4:	f0 e0       	ldi	r31, 0x00	; 0
    2ba6:	80 81       	ld	r24, Z
    2ba8:	81 60       	ori	r24, 0x01	; 1
    2baa:	8c 93       	st	X, r24
    2bac:	80 e0       	ldi	r24, 0x00	; 0
    2bae:	90 e0       	ldi	r25, 0x00	; 0
    2bb0:	a0 e2       	ldi	r26, 0x20	; 32
    2bb2:	b1 e4       	ldi	r27, 0x41	; 65
    2bb4:	8d 8b       	std	Y+21, r24	; 0x15
    2bb6:	9e 8b       	std	Y+22, r25	; 0x16
    2bb8:	af 8b       	std	Y+23, r26	; 0x17
    2bba:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2bbc:	6d 89       	ldd	r22, Y+21	; 0x15
    2bbe:	7e 89       	ldd	r23, Y+22	; 0x16
    2bc0:	8f 89       	ldd	r24, Y+23	; 0x17
    2bc2:	98 8d       	ldd	r25, Y+24	; 0x18
    2bc4:	2b ea       	ldi	r18, 0xAB	; 171
    2bc6:	3a ea       	ldi	r19, 0xAA	; 170
    2bc8:	4a ea       	ldi	r20, 0xAA	; 170
    2bca:	50 e4       	ldi	r21, 0x40	; 64
    2bcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bd0:	dc 01       	movw	r26, r24
    2bd2:	cb 01       	movw	r24, r22
    2bd4:	89 8b       	std	Y+17, r24	; 0x11
    2bd6:	9a 8b       	std	Y+18, r25	; 0x12
    2bd8:	ab 8b       	std	Y+19, r26	; 0x13
    2bda:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2bdc:	69 89       	ldd	r22, Y+17	; 0x11
    2bde:	7a 89       	ldd	r23, Y+18	; 0x12
    2be0:	8b 89       	ldd	r24, Y+19	; 0x13
    2be2:	9c 89       	ldd	r25, Y+20	; 0x14
    2be4:	20 e0       	ldi	r18, 0x00	; 0
    2be6:	30 e0       	ldi	r19, 0x00	; 0
    2be8:	40 e8       	ldi	r20, 0x80	; 128
    2bea:	5f e3       	ldi	r21, 0x3F	; 63
    2bec:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2bf0:	88 23       	and	r24, r24
    2bf2:	1c f4       	brge	.+6      	; 0x2bfa <Ultrasonic_getDist+0x98>
		__ticks = 1;
    2bf4:	81 e0       	ldi	r24, 0x01	; 1
    2bf6:	88 8b       	std	Y+16, r24	; 0x10
    2bf8:	91 c0       	rjmp	.+290    	; 0x2d1c <Ultrasonic_getDist+0x1ba>
	else if (__tmp > 255)
    2bfa:	69 89       	ldd	r22, Y+17	; 0x11
    2bfc:	7a 89       	ldd	r23, Y+18	; 0x12
    2bfe:	8b 89       	ldd	r24, Y+19	; 0x13
    2c00:	9c 89       	ldd	r25, Y+20	; 0x14
    2c02:	20 e0       	ldi	r18, 0x00	; 0
    2c04:	30 e0       	ldi	r19, 0x00	; 0
    2c06:	4f e7       	ldi	r20, 0x7F	; 127
    2c08:	53 e4       	ldi	r21, 0x43	; 67
    2c0a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2c0e:	18 16       	cp	r1, r24
    2c10:	0c f0       	brlt	.+2      	; 0x2c14 <Ultrasonic_getDist+0xb2>
    2c12:	7b c0       	rjmp	.+246    	; 0x2d0a <Ultrasonic_getDist+0x1a8>
	{
		_delay_ms(__us / 1000.0);
    2c14:	6d 89       	ldd	r22, Y+21	; 0x15
    2c16:	7e 89       	ldd	r23, Y+22	; 0x16
    2c18:	8f 89       	ldd	r24, Y+23	; 0x17
    2c1a:	98 8d       	ldd	r25, Y+24	; 0x18
    2c1c:	20 e0       	ldi	r18, 0x00	; 0
    2c1e:	30 e0       	ldi	r19, 0x00	; 0
    2c20:	4a e7       	ldi	r20, 0x7A	; 122
    2c22:	54 e4       	ldi	r21, 0x44	; 68
    2c24:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2c28:	dc 01       	movw	r26, r24
    2c2a:	cb 01       	movw	r24, r22
    2c2c:	8c 87       	std	Y+12, r24	; 0x0c
    2c2e:	9d 87       	std	Y+13, r25	; 0x0d
    2c30:	ae 87       	std	Y+14, r26	; 0x0e
    2c32:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c34:	6c 85       	ldd	r22, Y+12	; 0x0c
    2c36:	7d 85       	ldd	r23, Y+13	; 0x0d
    2c38:	8e 85       	ldd	r24, Y+14	; 0x0e
    2c3a:	9f 85       	ldd	r25, Y+15	; 0x0f
    2c3c:	20 e0       	ldi	r18, 0x00	; 0
    2c3e:	30 e0       	ldi	r19, 0x00	; 0
    2c40:	4a e7       	ldi	r20, 0x7A	; 122
    2c42:	55 e4       	ldi	r21, 0x45	; 69
    2c44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c48:	dc 01       	movw	r26, r24
    2c4a:	cb 01       	movw	r24, r22
    2c4c:	88 87       	std	Y+8, r24	; 0x08
    2c4e:	99 87       	std	Y+9, r25	; 0x09
    2c50:	aa 87       	std	Y+10, r26	; 0x0a
    2c52:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2c54:	68 85       	ldd	r22, Y+8	; 0x08
    2c56:	79 85       	ldd	r23, Y+9	; 0x09
    2c58:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c5a:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c5c:	20 e0       	ldi	r18, 0x00	; 0
    2c5e:	30 e0       	ldi	r19, 0x00	; 0
    2c60:	40 e8       	ldi	r20, 0x80	; 128
    2c62:	5f e3       	ldi	r21, 0x3F	; 63
    2c64:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2c68:	88 23       	and	r24, r24
    2c6a:	2c f4       	brge	.+10     	; 0x2c76 <Ultrasonic_getDist+0x114>
		__ticks = 1;
    2c6c:	81 e0       	ldi	r24, 0x01	; 1
    2c6e:	90 e0       	ldi	r25, 0x00	; 0
    2c70:	9f 83       	std	Y+7, r25	; 0x07
    2c72:	8e 83       	std	Y+6, r24	; 0x06
    2c74:	3f c0       	rjmp	.+126    	; 0x2cf4 <Ultrasonic_getDist+0x192>
	else if (__tmp > 65535)
    2c76:	68 85       	ldd	r22, Y+8	; 0x08
    2c78:	79 85       	ldd	r23, Y+9	; 0x09
    2c7a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c7c:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c7e:	20 e0       	ldi	r18, 0x00	; 0
    2c80:	3f ef       	ldi	r19, 0xFF	; 255
    2c82:	4f e7       	ldi	r20, 0x7F	; 127
    2c84:	57 e4       	ldi	r21, 0x47	; 71
    2c86:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2c8a:	18 16       	cp	r1, r24
    2c8c:	4c f5       	brge	.+82     	; 0x2ce0 <Ultrasonic_getDist+0x17e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c8e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2c90:	7d 85       	ldd	r23, Y+13	; 0x0d
    2c92:	8e 85       	ldd	r24, Y+14	; 0x0e
    2c94:	9f 85       	ldd	r25, Y+15	; 0x0f
    2c96:	20 e0       	ldi	r18, 0x00	; 0
    2c98:	30 e0       	ldi	r19, 0x00	; 0
    2c9a:	40 e2       	ldi	r20, 0x20	; 32
    2c9c:	51 e4       	ldi	r21, 0x41	; 65
    2c9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ca2:	dc 01       	movw	r26, r24
    2ca4:	cb 01       	movw	r24, r22
    2ca6:	bc 01       	movw	r22, r24
    2ca8:	cd 01       	movw	r24, r26
    2caa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cae:	dc 01       	movw	r26, r24
    2cb0:	cb 01       	movw	r24, r22
    2cb2:	9f 83       	std	Y+7, r25	; 0x07
    2cb4:	8e 83       	std	Y+6, r24	; 0x06
    2cb6:	0f c0       	rjmp	.+30     	; 0x2cd6 <Ultrasonic_getDist+0x174>
    2cb8:	80 e9       	ldi	r24, 0x90	; 144
    2cba:	91 e0       	ldi	r25, 0x01	; 1
    2cbc:	9d 83       	std	Y+5, r25	; 0x05
    2cbe:	8c 83       	std	Y+4, r24	; 0x04
    2cc0:	8c 81       	ldd	r24, Y+4	; 0x04
    2cc2:	9d 81       	ldd	r25, Y+5	; 0x05
    2cc4:	01 97       	sbiw	r24, 0x01	; 1
    2cc6:	f1 f7       	brne	.-4      	; 0x2cc4 <Ultrasonic_getDist+0x162>
    2cc8:	9d 83       	std	Y+5, r25	; 0x05
    2cca:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ccc:	8e 81       	ldd	r24, Y+6	; 0x06
    2cce:	9f 81       	ldd	r25, Y+7	; 0x07
    2cd0:	01 97       	sbiw	r24, 0x01	; 1
    2cd2:	9f 83       	std	Y+7, r25	; 0x07
    2cd4:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cd6:	8e 81       	ldd	r24, Y+6	; 0x06
    2cd8:	9f 81       	ldd	r25, Y+7	; 0x07
    2cda:	00 97       	sbiw	r24, 0x00	; 0
    2cdc:	69 f7       	brne	.-38     	; 0x2cb8 <Ultrasonic_getDist+0x156>
    2cde:	24 c0       	rjmp	.+72     	; 0x2d28 <Ultrasonic_getDist+0x1c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ce0:	68 85       	ldd	r22, Y+8	; 0x08
    2ce2:	79 85       	ldd	r23, Y+9	; 0x09
    2ce4:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ce6:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ce8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cec:	dc 01       	movw	r26, r24
    2cee:	cb 01       	movw	r24, r22
    2cf0:	9f 83       	std	Y+7, r25	; 0x07
    2cf2:	8e 83       	std	Y+6, r24	; 0x06
    2cf4:	8e 81       	ldd	r24, Y+6	; 0x06
    2cf6:	9f 81       	ldd	r25, Y+7	; 0x07
    2cf8:	9b 83       	std	Y+3, r25	; 0x03
    2cfa:	8a 83       	std	Y+2, r24	; 0x02
    2cfc:	8a 81       	ldd	r24, Y+2	; 0x02
    2cfe:	9b 81       	ldd	r25, Y+3	; 0x03
    2d00:	01 97       	sbiw	r24, 0x01	; 1
    2d02:	f1 f7       	brne	.-4      	; 0x2d00 <Ultrasonic_getDist+0x19e>
    2d04:	9b 83       	std	Y+3, r25	; 0x03
    2d06:	8a 83       	std	Y+2, r24	; 0x02
    2d08:	0f c0       	rjmp	.+30     	; 0x2d28 <Ultrasonic_getDist+0x1c6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2d0a:	69 89       	ldd	r22, Y+17	; 0x11
    2d0c:	7a 89       	ldd	r23, Y+18	; 0x12
    2d0e:	8b 89       	ldd	r24, Y+19	; 0x13
    2d10:	9c 89       	ldd	r25, Y+20	; 0x14
    2d12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d16:	dc 01       	movw	r26, r24
    2d18:	cb 01       	movw	r24, r22
    2d1a:	88 8b       	std	Y+16, r24	; 0x10
    2d1c:	88 89       	ldd	r24, Y+16	; 0x10
    2d1e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2d20:	89 81       	ldd	r24, Y+1	; 0x01
    2d22:	8a 95       	dec	r24
    2d24:	f1 f7       	brne	.-4      	; 0x2d22 <Ultrasonic_getDist+0x1c0>
    2d26:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	PORTA &= (~(1 << Trigger_pin));
    2d28:	ab e3       	ldi	r26, 0x3B	; 59
    2d2a:	b0 e0       	ldi	r27, 0x00	; 0
    2d2c:	eb e3       	ldi	r30, 0x3B	; 59
    2d2e:	f0 e0       	ldi	r31, 0x00	; 0
    2d30:	80 81       	ld	r24, Z
    2d32:	8e 7f       	andi	r24, 0xFE	; 254
    2d34:	8c 93       	st	X, r24

	TCNT1 = 0; /* Clear Timer counter */
    2d36:	ec e4       	ldi	r30, 0x4C	; 76
    2d38:	f0 e0       	ldi	r31, 0x00	; 0
    2d3a:	11 82       	std	Z+1, r1	; 0x01
    2d3c:	10 82       	st	Z, r1
	TCCR1B = 0x41; /* Capture on rising edge, No prescaler*/
    2d3e:	ee e4       	ldi	r30, 0x4E	; 78
    2d40:	f0 e0       	ldi	r31, 0x00	; 0
    2d42:	81 e4       	ldi	r24, 0x41	; 65
    2d44:	80 83       	st	Z, r24
	TIFR = 1 << ICF1; /* Clear ICP flag (Input Capture flag) */
    2d46:	e8 e5       	ldi	r30, 0x58	; 88
    2d48:	f0 e0       	ldi	r31, 0x00	; 0
    2d4a:	80 e2       	ldi	r24, 0x20	; 32
    2d4c:	80 83       	st	Z, r24
	TIFR = 1 << TOV1; /* Clear Timer Overflow flag */
    2d4e:	e8 e5       	ldi	r30, 0x58	; 88
    2d50:	f0 e0       	ldi	r31, 0x00	; 0
    2d52:	84 e0       	ldi	r24, 0x04	; 4
    2d54:	80 83       	st	Z, r24

	/*Calculate width of Echo by Input Capture (ICP) */

	while ((TIFR & (1 << ICF1)) == 0)
    2d56:	e8 e5       	ldi	r30, 0x58	; 88
    2d58:	f0 e0       	ldi	r31, 0x00	; 0
    2d5a:	80 81       	ld	r24, Z
    2d5c:	88 2f       	mov	r24, r24
    2d5e:	90 e0       	ldi	r25, 0x00	; 0
    2d60:	80 72       	andi	r24, 0x20	; 32
    2d62:	90 70       	andi	r25, 0x00	; 0
    2d64:	00 97       	sbiw	r24, 0x00	; 0
    2d66:	b9 f3       	breq	.-18     	; 0x2d56 <Ultrasonic_getDist+0x1f4>
		;/* Wait for rising edge */
	TCNT1 = 0; /* Clear Timer counter */
    2d68:	ec e4       	ldi	r30, 0x4C	; 76
    2d6a:	f0 e0       	ldi	r31, 0x00	; 0
    2d6c:	11 82       	std	Z+1, r1	; 0x01
    2d6e:	10 82       	st	Z, r1
	TCCR1B = 0x01; /* Capture on falling edge, No prescaler */
    2d70:	ee e4       	ldi	r30, 0x4E	; 78
    2d72:	f0 e0       	ldi	r31, 0x00	; 0
    2d74:	81 e0       	ldi	r24, 0x01	; 1
    2d76:	80 83       	st	Z, r24
	TIFR = 1 << ICF1; /* Clear ICP flag (Input Capture flag) */
    2d78:	e8 e5       	ldi	r30, 0x58	; 88
    2d7a:	f0 e0       	ldi	r31, 0x00	; 0
    2d7c:	80 e2       	ldi	r24, 0x20	; 32
    2d7e:	80 83       	st	Z, r24
	TIFR = 1 << TOV1; /* Clear Timer Overflow flag */
    2d80:	e8 e5       	ldi	r30, 0x58	; 88
    2d82:	f0 e0       	ldi	r31, 0x00	; 0
    2d84:	84 e0       	ldi	r24, 0x04	; 4
    2d86:	80 83       	st	Z, r24
	TimerOverflow = 0;/* Clear Timer overflow count */
    2d88:	10 92 a2 01 	sts	0x01A2, r1
    2d8c:	10 92 a1 01 	sts	0x01A1, r1

	while ((TIFR & (1 << ICF1)) == 0)
    2d90:	e8 e5       	ldi	r30, 0x58	; 88
    2d92:	f0 e0       	ldi	r31, 0x00	; 0
    2d94:	80 81       	ld	r24, Z
    2d96:	88 2f       	mov	r24, r24
    2d98:	90 e0       	ldi	r25, 0x00	; 0
    2d9a:	80 72       	andi	r24, 0x20	; 32
    2d9c:	90 70       	andi	r25, 0x00	; 0
    2d9e:	00 97       	sbiw	r24, 0x00	; 0
    2da0:	b9 f3       	breq	.-18     	; 0x2d90 <Ultrasonic_getDist+0x22e>
		;/* Wait for falling edge */
	count = ICR1 + (65535 * TimerOverflow); /* Take count */
    2da2:	e6 e4       	ldi	r30, 0x46	; 70
    2da4:	f0 e0       	ldi	r31, 0x00	; 0
    2da6:	80 81       	ld	r24, Z
    2da8:	91 81       	ldd	r25, Z+1	; 0x01
    2daa:	7c 01       	movw	r14, r24
    2dac:	00 e0       	ldi	r16, 0x00	; 0
    2dae:	10 e0       	ldi	r17, 0x00	; 0
    2db0:	80 91 a1 01 	lds	r24, 0x01A1
    2db4:	90 91 a2 01 	lds	r25, 0x01A2
    2db8:	aa 27       	eor	r26, r26
    2dba:	97 fd       	sbrc	r25, 7
    2dbc:	a0 95       	com	r26
    2dbe:	ba 2f       	mov	r27, r26
    2dc0:	2f ef       	ldi	r18, 0xFF	; 255
    2dc2:	3f ef       	ldi	r19, 0xFF	; 255
    2dc4:	40 e0       	ldi	r20, 0x00	; 0
    2dc6:	50 e0       	ldi	r21, 0x00	; 0
    2dc8:	bc 01       	movw	r22, r24
    2dca:	cd 01       	movw	r24, r26
    2dcc:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <__mulsi3>
    2dd0:	dc 01       	movw	r26, r24
    2dd2:	cb 01       	movw	r24, r22
    2dd4:	8e 0d       	add	r24, r14
    2dd6:	9f 1d       	adc	r25, r15
    2dd8:	a0 1f       	adc	r26, r16
    2dda:	b1 1f       	adc	r27, r17
    2ddc:	80 93 aa 01 	sts	0x01AA, r24
    2de0:	90 93 ab 01 	sts	0x01AB, r25
    2de4:	a0 93 ac 01 	sts	0x01AC, r26
    2de8:	b0 93 ad 01 	sts	0x01AD, r27
	/* 8MHz Timer freq, sound speed =343 m/s */
	distance = (double) count / 57;
    2dec:	80 91 aa 01 	lds	r24, 0x01AA
    2df0:	90 91 ab 01 	lds	r25, 0x01AB
    2df4:	a0 91 ac 01 	lds	r26, 0x01AC
    2df8:	b0 91 ad 01 	lds	r27, 0x01AD
    2dfc:	bc 01       	movw	r22, r24
    2dfe:	cd 01       	movw	r24, r26
    2e00:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    2e04:	dc 01       	movw	r26, r24
    2e06:	cb 01       	movw	r24, r22
    2e08:	bc 01       	movw	r22, r24
    2e0a:	cd 01       	movw	r24, r26
    2e0c:	20 e0       	ldi	r18, 0x00	; 0
    2e0e:	30 e0       	ldi	r19, 0x00	; 0
    2e10:	44 e6       	ldi	r20, 0x64	; 100
    2e12:	52 e4       	ldi	r21, 0x42	; 66
    2e14:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2e18:	dc 01       	movw	r26, r24
    2e1a:	cb 01       	movw	r24, r22
    2e1c:	bc 01       	movw	r22, r24
    2e1e:	cd 01       	movw	r24, r26
    2e20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e24:	dc 01       	movw	r26, r24
    2e26:	cb 01       	movw	r24, r22
    2e28:	80 93 a9 01 	sts	0x01A9, r24

	return distance;
    2e2c:	80 91 a9 01 	lds	r24, 0x01A9

}
    2e30:	68 96       	adiw	r28, 0x18	; 24
    2e32:	0f b6       	in	r0, 0x3f	; 63
    2e34:	f8 94       	cli
    2e36:	de bf       	out	0x3e, r29	; 62
    2e38:	0f be       	out	0x3f, r0	; 63
    2e3a:	cd bf       	out	0x3d, r28	; 61
    2e3c:	cf 91       	pop	r28
    2e3e:	df 91       	pop	r29
    2e40:	1f 91       	pop	r17
    2e42:	0f 91       	pop	r16
    2e44:	ff 90       	pop	r15
    2e46:	ef 90       	pop	r14
    2e48:	08 95       	ret

00002e4a <main>:
#include "Ultrasonic.h"
#include "Servo_Interface.h"
#include "Timer_Interface.h"
#include "DCMotor_Interface.h"

int main() {
    2e4a:	0f 93       	push	r16
    2e4c:	1f 93       	push	r17
    2e4e:	df 93       	push	r29
    2e50:	cf 93       	push	r28
    2e52:	cd b7       	in	r28, 0x3d	; 61
    2e54:	de b7       	in	r29, 0x3e	; 62
    2e56:	cd 59       	subi	r28, 0x9D	; 157
    2e58:	d0 40       	sbci	r29, 0x00	; 0
    2e5a:	0f b6       	in	r0, 0x3f	; 63
    2e5c:	f8 94       	cli
    2e5e:	de bf       	out	0x3e, r29	; 62
    2e60:	0f be       	out	0x3f, r0	; 63
    2e62:	cd bf       	out	0x3d, r28	; 61
   
	u8 dist;
	u8 distRight;
	u8 distLeft;

	H_Servo_Void_ServoInit();
    2e64:	0e 94 ff 14 	call	0x29fe	; 0x29fe <H_Servo_Void_ServoInit>
	H_DCMotor_Void_DCMotorInit();
    2e68:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <H_DCMotor_Void_DCMotorInit>
	while (1) {
		H_Servo_Void_ServoForward();
    2e6c:	0e 94 6d 15 	call	0x2ada	; 0x2ada <H_Servo_Void_ServoForward>
		H_LCD_Void_LCDInit();
    2e70:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <H_LCD_Void_LCDInit>
	   
		H_DCMotor_Void_DCMotorForward();
    2e74:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <H_DCMotor_Void_DCMotorForward>
		H_DCMotor_Void_DCMotorStart();
    2e78:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <H_DCMotor_Void_DCMotorStart>
		dist = Ultrasonic_getDist();
    2e7c:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <Ultrasonic_getDist>
    2e80:	fe 01       	movw	r30, r28
    2e82:	e3 56       	subi	r30, 0x63	; 99
    2e84:	ff 4f       	sbci	r31, 0xFF	; 255
    2e86:	80 83       	st	Z, r24
    2e88:	fe c6       	rjmp	.+3580   	; 0x3c86 <main+0xe3c>

		//while obstacle close
		while (dist<20) {
			H_DCMotor_Void_DCMotorStopBoth();
    2e8a:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <H_DCMotor_Void_DCMotorStopBoth>
			H_Servo_Void_ServoInit(); //Activate Servo
    2e8e:	0e 94 ff 14 	call	0x29fe	; 0x29fe <H_Servo_Void_ServoInit>
			H_Servo_Void_ServoRight(); // Turn right
    2e92:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <H_Servo_Void_ServoRight>
			H_Servo_Void_ServoSetStart();
    2e96:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <H_Servo_Void_ServoSetStart>
		
		        H_LCD_Void_LCDWriteString((u8*)"Servo right");
    2e9a:	80 e6       	ldi	r24, 0x60	; 96
    2e9c:	90 e0       	ldi	r25, 0x00	; 0
    2e9e:	0e 94 ff 13 	call	0x27fe	; 0x27fe <H_LCD_Void_LCDWriteString>
    2ea2:	fe 01       	movw	r30, r28
    2ea4:	e9 56       	subi	r30, 0x69	; 105
    2ea6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea8:	80 e0       	ldi	r24, 0x00	; 0
    2eaa:	90 e0       	ldi	r25, 0x00	; 0
    2eac:	aa e7       	ldi	r26, 0x7A	; 122
    2eae:	b4 e4       	ldi	r27, 0x44	; 68
    2eb0:	80 83       	st	Z, r24
    2eb2:	91 83       	std	Z+1, r25	; 0x01
    2eb4:	a2 83       	std	Z+2, r26	; 0x02
    2eb6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2eb8:	8e 01       	movw	r16, r28
    2eba:	0d 56       	subi	r16, 0x6D	; 109
    2ebc:	1f 4f       	sbci	r17, 0xFF	; 255
    2ebe:	fe 01       	movw	r30, r28
    2ec0:	e9 56       	subi	r30, 0x69	; 105
    2ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec4:	60 81       	ld	r22, Z
    2ec6:	71 81       	ldd	r23, Z+1	; 0x01
    2ec8:	82 81       	ldd	r24, Z+2	; 0x02
    2eca:	93 81       	ldd	r25, Z+3	; 0x03
    2ecc:	20 e0       	ldi	r18, 0x00	; 0
    2ece:	30 e0       	ldi	r19, 0x00	; 0
    2ed0:	4a e7       	ldi	r20, 0x7A	; 122
    2ed2:	55 e4       	ldi	r21, 0x45	; 69
    2ed4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ed8:	dc 01       	movw	r26, r24
    2eda:	cb 01       	movw	r24, r22
    2edc:	f8 01       	movw	r30, r16
    2ede:	80 83       	st	Z, r24
    2ee0:	91 83       	std	Z+1, r25	; 0x01
    2ee2:	a2 83       	std	Z+2, r26	; 0x02
    2ee4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ee6:	fe 01       	movw	r30, r28
    2ee8:	ed 56       	subi	r30, 0x6D	; 109
    2eea:	ff 4f       	sbci	r31, 0xFF	; 255
    2eec:	60 81       	ld	r22, Z
    2eee:	71 81       	ldd	r23, Z+1	; 0x01
    2ef0:	82 81       	ldd	r24, Z+2	; 0x02
    2ef2:	93 81       	ldd	r25, Z+3	; 0x03
    2ef4:	20 e0       	ldi	r18, 0x00	; 0
    2ef6:	30 e0       	ldi	r19, 0x00	; 0
    2ef8:	40 e8       	ldi	r20, 0x80	; 128
    2efa:	5f e3       	ldi	r21, 0x3F	; 63
    2efc:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2f00:	88 23       	and	r24, r24
    2f02:	44 f4       	brge	.+16     	; 0x2f14 <main+0xca>
		__ticks = 1;
    2f04:	fe 01       	movw	r30, r28
    2f06:	ef 56       	subi	r30, 0x6F	; 111
    2f08:	ff 4f       	sbci	r31, 0xFF	; 255
    2f0a:	81 e0       	ldi	r24, 0x01	; 1
    2f0c:	90 e0       	ldi	r25, 0x00	; 0
    2f0e:	91 83       	std	Z+1, r25	; 0x01
    2f10:	80 83       	st	Z, r24
    2f12:	64 c0       	rjmp	.+200    	; 0x2fdc <main+0x192>
	else if (__tmp > 65535)
    2f14:	fe 01       	movw	r30, r28
    2f16:	ed 56       	subi	r30, 0x6D	; 109
    2f18:	ff 4f       	sbci	r31, 0xFF	; 255
    2f1a:	60 81       	ld	r22, Z
    2f1c:	71 81       	ldd	r23, Z+1	; 0x01
    2f1e:	82 81       	ldd	r24, Z+2	; 0x02
    2f20:	93 81       	ldd	r25, Z+3	; 0x03
    2f22:	20 e0       	ldi	r18, 0x00	; 0
    2f24:	3f ef       	ldi	r19, 0xFF	; 255
    2f26:	4f e7       	ldi	r20, 0x7F	; 127
    2f28:	57 e4       	ldi	r21, 0x47	; 71
    2f2a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2f2e:	18 16       	cp	r1, r24
    2f30:	0c f0       	brlt	.+2      	; 0x2f34 <main+0xea>
    2f32:	43 c0       	rjmp	.+134    	; 0x2fba <main+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f34:	fe 01       	movw	r30, r28
    2f36:	e9 56       	subi	r30, 0x69	; 105
    2f38:	ff 4f       	sbci	r31, 0xFF	; 255
    2f3a:	60 81       	ld	r22, Z
    2f3c:	71 81       	ldd	r23, Z+1	; 0x01
    2f3e:	82 81       	ldd	r24, Z+2	; 0x02
    2f40:	93 81       	ldd	r25, Z+3	; 0x03
    2f42:	20 e0       	ldi	r18, 0x00	; 0
    2f44:	30 e0       	ldi	r19, 0x00	; 0
    2f46:	40 e2       	ldi	r20, 0x20	; 32
    2f48:	51 e4       	ldi	r21, 0x41	; 65
    2f4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f4e:	dc 01       	movw	r26, r24
    2f50:	cb 01       	movw	r24, r22
    2f52:	8e 01       	movw	r16, r28
    2f54:	0f 56       	subi	r16, 0x6F	; 111
    2f56:	1f 4f       	sbci	r17, 0xFF	; 255
    2f58:	bc 01       	movw	r22, r24
    2f5a:	cd 01       	movw	r24, r26
    2f5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f60:	dc 01       	movw	r26, r24
    2f62:	cb 01       	movw	r24, r22
    2f64:	f8 01       	movw	r30, r16
    2f66:	91 83       	std	Z+1, r25	; 0x01
    2f68:	80 83       	st	Z, r24
    2f6a:	1f c0       	rjmp	.+62     	; 0x2faa <main+0x160>
    2f6c:	fe 01       	movw	r30, r28
    2f6e:	e1 57       	subi	r30, 0x71	; 113
    2f70:	ff 4f       	sbci	r31, 0xFF	; 255
    2f72:	80 e9       	ldi	r24, 0x90	; 144
    2f74:	91 e0       	ldi	r25, 0x01	; 1
    2f76:	91 83       	std	Z+1, r25	; 0x01
    2f78:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2f7a:	fe 01       	movw	r30, r28
    2f7c:	e1 57       	subi	r30, 0x71	; 113
    2f7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f80:	80 81       	ld	r24, Z
    2f82:	91 81       	ldd	r25, Z+1	; 0x01
    2f84:	01 97       	sbiw	r24, 0x01	; 1
    2f86:	f1 f7       	brne	.-4      	; 0x2f84 <main+0x13a>
    2f88:	fe 01       	movw	r30, r28
    2f8a:	e1 57       	subi	r30, 0x71	; 113
    2f8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f8e:	91 83       	std	Z+1, r25	; 0x01
    2f90:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f92:	de 01       	movw	r26, r28
    2f94:	af 56       	subi	r26, 0x6F	; 111
    2f96:	bf 4f       	sbci	r27, 0xFF	; 255
    2f98:	fe 01       	movw	r30, r28
    2f9a:	ef 56       	subi	r30, 0x6F	; 111
    2f9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f9e:	80 81       	ld	r24, Z
    2fa0:	91 81       	ldd	r25, Z+1	; 0x01
    2fa2:	01 97       	sbiw	r24, 0x01	; 1
    2fa4:	11 96       	adiw	r26, 0x01	; 1
    2fa6:	9c 93       	st	X, r25
    2fa8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2faa:	fe 01       	movw	r30, r28
    2fac:	ef 56       	subi	r30, 0x6F	; 111
    2fae:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb0:	80 81       	ld	r24, Z
    2fb2:	91 81       	ldd	r25, Z+1	; 0x01
    2fb4:	00 97       	sbiw	r24, 0x00	; 0
    2fb6:	d1 f6       	brne	.-76     	; 0x2f6c <main+0x122>
    2fb8:	27 c0       	rjmp	.+78     	; 0x3008 <main+0x1be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fba:	8e 01       	movw	r16, r28
    2fbc:	0f 56       	subi	r16, 0x6F	; 111
    2fbe:	1f 4f       	sbci	r17, 0xFF	; 255
    2fc0:	fe 01       	movw	r30, r28
    2fc2:	ed 56       	subi	r30, 0x6D	; 109
    2fc4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc6:	60 81       	ld	r22, Z
    2fc8:	71 81       	ldd	r23, Z+1	; 0x01
    2fca:	82 81       	ldd	r24, Z+2	; 0x02
    2fcc:	93 81       	ldd	r25, Z+3	; 0x03
    2fce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fd2:	dc 01       	movw	r26, r24
    2fd4:	cb 01       	movw	r24, r22
    2fd6:	f8 01       	movw	r30, r16
    2fd8:	91 83       	std	Z+1, r25	; 0x01
    2fda:	80 83       	st	Z, r24
    2fdc:	de 01       	movw	r26, r28
    2fde:	a3 57       	subi	r26, 0x73	; 115
    2fe0:	bf 4f       	sbci	r27, 0xFF	; 255
    2fe2:	fe 01       	movw	r30, r28
    2fe4:	ef 56       	subi	r30, 0x6F	; 111
    2fe6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe8:	80 81       	ld	r24, Z
    2fea:	91 81       	ldd	r25, Z+1	; 0x01
    2fec:	8d 93       	st	X+, r24
    2fee:	9c 93       	st	X, r25
    2ff0:	fe 01       	movw	r30, r28
    2ff2:	e3 57       	subi	r30, 0x73	; 115
    2ff4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff6:	80 81       	ld	r24, Z
    2ff8:	91 81       	ldd	r25, Z+1	; 0x01
    2ffa:	01 97       	sbiw	r24, 0x01	; 1
    2ffc:	f1 f7       	brne	.-4      	; 0x2ffa <main+0x1b0>
    2ffe:	fe 01       	movw	r30, r28
    3000:	e3 57       	subi	r30, 0x73	; 115
    3002:	ff 4f       	sbci	r31, 0xFF	; 255
    3004:	91 83       	std	Z+1, r25	; 0x01
    3006:	80 83       	st	Z, r24
		       _delay_ms(1000);
		        H_LCD_Void_LCDClear();
    3008:	0e 94 c9 14 	call	0x2992	; 0x2992 <H_LCD_Void_LCDClear>
    300c:	fe 01       	movw	r30, r28
    300e:	e7 57       	subi	r30, 0x77	; 119
    3010:	ff 4f       	sbci	r31, 0xFF	; 255
    3012:	80 e0       	ldi	r24, 0x00	; 0
    3014:	90 e4       	ldi	r25, 0x40	; 64
    3016:	ac e1       	ldi	r26, 0x1C	; 28
    3018:	b6 e4       	ldi	r27, 0x46	; 70
    301a:	80 83       	st	Z, r24
    301c:	91 83       	std	Z+1, r25	; 0x01
    301e:	a2 83       	std	Z+2, r26	; 0x02
    3020:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3022:	8e 01       	movw	r16, r28
    3024:	0b 57       	subi	r16, 0x7B	; 123
    3026:	1f 4f       	sbci	r17, 0xFF	; 255
    3028:	fe 01       	movw	r30, r28
    302a:	e7 57       	subi	r30, 0x77	; 119
    302c:	ff 4f       	sbci	r31, 0xFF	; 255
    302e:	60 81       	ld	r22, Z
    3030:	71 81       	ldd	r23, Z+1	; 0x01
    3032:	82 81       	ldd	r24, Z+2	; 0x02
    3034:	93 81       	ldd	r25, Z+3	; 0x03
    3036:	20 e0       	ldi	r18, 0x00	; 0
    3038:	30 e0       	ldi	r19, 0x00	; 0
    303a:	4a e7       	ldi	r20, 0x7A	; 122
    303c:	55 e4       	ldi	r21, 0x45	; 69
    303e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3042:	dc 01       	movw	r26, r24
    3044:	cb 01       	movw	r24, r22
    3046:	f8 01       	movw	r30, r16
    3048:	80 83       	st	Z, r24
    304a:	91 83       	std	Z+1, r25	; 0x01
    304c:	a2 83       	std	Z+2, r26	; 0x02
    304e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3050:	fe 01       	movw	r30, r28
    3052:	eb 57       	subi	r30, 0x7B	; 123
    3054:	ff 4f       	sbci	r31, 0xFF	; 255
    3056:	60 81       	ld	r22, Z
    3058:	71 81       	ldd	r23, Z+1	; 0x01
    305a:	82 81       	ldd	r24, Z+2	; 0x02
    305c:	93 81       	ldd	r25, Z+3	; 0x03
    305e:	20 e0       	ldi	r18, 0x00	; 0
    3060:	30 e0       	ldi	r19, 0x00	; 0
    3062:	40 e8       	ldi	r20, 0x80	; 128
    3064:	5f e3       	ldi	r21, 0x3F	; 63
    3066:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    306a:	88 23       	and	r24, r24
    306c:	44 f4       	brge	.+16     	; 0x307e <main+0x234>
		__ticks = 1;
    306e:	fe 01       	movw	r30, r28
    3070:	ed 57       	subi	r30, 0x7D	; 125
    3072:	ff 4f       	sbci	r31, 0xFF	; 255
    3074:	81 e0       	ldi	r24, 0x01	; 1
    3076:	90 e0       	ldi	r25, 0x00	; 0
    3078:	91 83       	std	Z+1, r25	; 0x01
    307a:	80 83       	st	Z, r24
    307c:	64 c0       	rjmp	.+200    	; 0x3146 <main+0x2fc>
	else if (__tmp > 65535)
    307e:	fe 01       	movw	r30, r28
    3080:	eb 57       	subi	r30, 0x7B	; 123
    3082:	ff 4f       	sbci	r31, 0xFF	; 255
    3084:	60 81       	ld	r22, Z
    3086:	71 81       	ldd	r23, Z+1	; 0x01
    3088:	82 81       	ldd	r24, Z+2	; 0x02
    308a:	93 81       	ldd	r25, Z+3	; 0x03
    308c:	20 e0       	ldi	r18, 0x00	; 0
    308e:	3f ef       	ldi	r19, 0xFF	; 255
    3090:	4f e7       	ldi	r20, 0x7F	; 127
    3092:	57 e4       	ldi	r21, 0x47	; 71
    3094:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3098:	18 16       	cp	r1, r24
    309a:	0c f0       	brlt	.+2      	; 0x309e <main+0x254>
    309c:	43 c0       	rjmp	.+134    	; 0x3124 <main+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    309e:	fe 01       	movw	r30, r28
    30a0:	e7 57       	subi	r30, 0x77	; 119
    30a2:	ff 4f       	sbci	r31, 0xFF	; 255
    30a4:	60 81       	ld	r22, Z
    30a6:	71 81       	ldd	r23, Z+1	; 0x01
    30a8:	82 81       	ldd	r24, Z+2	; 0x02
    30aa:	93 81       	ldd	r25, Z+3	; 0x03
    30ac:	20 e0       	ldi	r18, 0x00	; 0
    30ae:	30 e0       	ldi	r19, 0x00	; 0
    30b0:	40 e2       	ldi	r20, 0x20	; 32
    30b2:	51 e4       	ldi	r21, 0x41	; 65
    30b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30b8:	dc 01       	movw	r26, r24
    30ba:	cb 01       	movw	r24, r22
    30bc:	8e 01       	movw	r16, r28
    30be:	0d 57       	subi	r16, 0x7D	; 125
    30c0:	1f 4f       	sbci	r17, 0xFF	; 255
    30c2:	bc 01       	movw	r22, r24
    30c4:	cd 01       	movw	r24, r26
    30c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30ca:	dc 01       	movw	r26, r24
    30cc:	cb 01       	movw	r24, r22
    30ce:	f8 01       	movw	r30, r16
    30d0:	91 83       	std	Z+1, r25	; 0x01
    30d2:	80 83       	st	Z, r24
    30d4:	1f c0       	rjmp	.+62     	; 0x3114 <main+0x2ca>
    30d6:	fe 01       	movw	r30, r28
    30d8:	ef 57       	subi	r30, 0x7F	; 127
    30da:	ff 4f       	sbci	r31, 0xFF	; 255
    30dc:	80 e9       	ldi	r24, 0x90	; 144
    30de:	91 e0       	ldi	r25, 0x01	; 1
    30e0:	91 83       	std	Z+1, r25	; 0x01
    30e2:	80 83       	st	Z, r24
    30e4:	fe 01       	movw	r30, r28
    30e6:	ef 57       	subi	r30, 0x7F	; 127
    30e8:	ff 4f       	sbci	r31, 0xFF	; 255
    30ea:	80 81       	ld	r24, Z
    30ec:	91 81       	ldd	r25, Z+1	; 0x01
    30ee:	01 97       	sbiw	r24, 0x01	; 1
    30f0:	f1 f7       	brne	.-4      	; 0x30ee <main+0x2a4>
    30f2:	fe 01       	movw	r30, r28
    30f4:	ef 57       	subi	r30, 0x7F	; 127
    30f6:	ff 4f       	sbci	r31, 0xFF	; 255
    30f8:	91 83       	std	Z+1, r25	; 0x01
    30fa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30fc:	de 01       	movw	r26, r28
    30fe:	ad 57       	subi	r26, 0x7D	; 125
    3100:	bf 4f       	sbci	r27, 0xFF	; 255
    3102:	fe 01       	movw	r30, r28
    3104:	ed 57       	subi	r30, 0x7D	; 125
    3106:	ff 4f       	sbci	r31, 0xFF	; 255
    3108:	80 81       	ld	r24, Z
    310a:	91 81       	ldd	r25, Z+1	; 0x01
    310c:	01 97       	sbiw	r24, 0x01	; 1
    310e:	11 96       	adiw	r26, 0x01	; 1
    3110:	9c 93       	st	X, r25
    3112:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3114:	fe 01       	movw	r30, r28
    3116:	ed 57       	subi	r30, 0x7D	; 125
    3118:	ff 4f       	sbci	r31, 0xFF	; 255
    311a:	80 81       	ld	r24, Z
    311c:	91 81       	ldd	r25, Z+1	; 0x01
    311e:	00 97       	sbiw	r24, 0x00	; 0
    3120:	d1 f6       	brne	.-76     	; 0x30d6 <main+0x28c>
    3122:	27 c0       	rjmp	.+78     	; 0x3172 <main+0x328>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3124:	8e 01       	movw	r16, r28
    3126:	0d 57       	subi	r16, 0x7D	; 125
    3128:	1f 4f       	sbci	r17, 0xFF	; 255
    312a:	fe 01       	movw	r30, r28
    312c:	eb 57       	subi	r30, 0x7B	; 123
    312e:	ff 4f       	sbci	r31, 0xFF	; 255
    3130:	60 81       	ld	r22, Z
    3132:	71 81       	ldd	r23, Z+1	; 0x01
    3134:	82 81       	ldd	r24, Z+2	; 0x02
    3136:	93 81       	ldd	r25, Z+3	; 0x03
    3138:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    313c:	dc 01       	movw	r26, r24
    313e:	cb 01       	movw	r24, r22
    3140:	f8 01       	movw	r30, r16
    3142:	91 83       	std	Z+1, r25	; 0x01
    3144:	80 83       	st	Z, r24
    3146:	de 01       	movw	r26, r28
    3148:	a1 58       	subi	r26, 0x81	; 129
    314a:	bf 4f       	sbci	r27, 0xFF	; 255
    314c:	fe 01       	movw	r30, r28
    314e:	ed 57       	subi	r30, 0x7D	; 125
    3150:	ff 4f       	sbci	r31, 0xFF	; 255
    3152:	80 81       	ld	r24, Z
    3154:	91 81       	ldd	r25, Z+1	; 0x01
    3156:	8d 93       	st	X+, r24
    3158:	9c 93       	st	X, r25
    315a:	fe 01       	movw	r30, r28
    315c:	e1 58       	subi	r30, 0x81	; 129
    315e:	ff 4f       	sbci	r31, 0xFF	; 255
    3160:	80 81       	ld	r24, Z
    3162:	91 81       	ldd	r25, Z+1	; 0x01
    3164:	01 97       	sbiw	r24, 0x01	; 1
    3166:	f1 f7       	brne	.-4      	; 0x3164 <main+0x31a>
    3168:	fe 01       	movw	r30, r28
    316a:	e1 58       	subi	r30, 0x81	; 129
    316c:	ff 4f       	sbci	r31, 0xFF	; 255
    316e:	91 83       	std	Z+1, r25	; 0x01
    3170:	80 83       	st	Z, r24
                        _delay_ms(10000);
			distRight = Ultrasonic_getDist();
    3172:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <Ultrasonic_getDist>
    3176:	fe 01       	movw	r30, r28
    3178:	e4 56       	subi	r30, 0x64	; 100
    317a:	ff 4f       	sbci	r31, 0xFF	; 255
    317c:	80 83       	st	Z, r24
		       H_LCD_Void_LCDWriteNumber(distRight);
    317e:	fe 01       	movw	r30, r28
    3180:	e4 56       	subi	r30, 0x64	; 100
    3182:	ff 4f       	sbci	r31, 0xFF	; 255
    3184:	80 81       	ld	r24, Z
    3186:	88 2f       	mov	r24, r24
    3188:	90 e0       	ldi	r25, 0x00	; 0
    318a:	a0 e0       	ldi	r26, 0x00	; 0
    318c:	b0 e0       	ldi	r27, 0x00	; 0
    318e:	bc 01       	movw	r22, r24
    3190:	cd 01       	movw	r24, r26
    3192:	0e 94 28 14 	call	0x2850	; 0x2850 <H_LCD_Void_LCDWriteNumber>
    3196:	fe 01       	movw	r30, r28
    3198:	e5 58       	subi	r30, 0x85	; 133
    319a:	ff 4f       	sbci	r31, 0xFF	; 255
    319c:	80 e0       	ldi	r24, 0x00	; 0
    319e:	90 e0       	ldi	r25, 0x00	; 0
    31a0:	aa e7       	ldi	r26, 0x7A	; 122
    31a2:	b4 e4       	ldi	r27, 0x44	; 68
    31a4:	80 83       	st	Z, r24
    31a6:	91 83       	std	Z+1, r25	; 0x01
    31a8:	a2 83       	std	Z+2, r26	; 0x02
    31aa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31ac:	8e 01       	movw	r16, r28
    31ae:	09 58       	subi	r16, 0x89	; 137
    31b0:	1f 4f       	sbci	r17, 0xFF	; 255
    31b2:	fe 01       	movw	r30, r28
    31b4:	e5 58       	subi	r30, 0x85	; 133
    31b6:	ff 4f       	sbci	r31, 0xFF	; 255
    31b8:	60 81       	ld	r22, Z
    31ba:	71 81       	ldd	r23, Z+1	; 0x01
    31bc:	82 81       	ldd	r24, Z+2	; 0x02
    31be:	93 81       	ldd	r25, Z+3	; 0x03
    31c0:	20 e0       	ldi	r18, 0x00	; 0
    31c2:	30 e0       	ldi	r19, 0x00	; 0
    31c4:	4a e7       	ldi	r20, 0x7A	; 122
    31c6:	55 e4       	ldi	r21, 0x45	; 69
    31c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31cc:	dc 01       	movw	r26, r24
    31ce:	cb 01       	movw	r24, r22
    31d0:	f8 01       	movw	r30, r16
    31d2:	80 83       	st	Z, r24
    31d4:	91 83       	std	Z+1, r25	; 0x01
    31d6:	a2 83       	std	Z+2, r26	; 0x02
    31d8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    31da:	fe 01       	movw	r30, r28
    31dc:	e9 58       	subi	r30, 0x89	; 137
    31de:	ff 4f       	sbci	r31, 0xFF	; 255
    31e0:	60 81       	ld	r22, Z
    31e2:	71 81       	ldd	r23, Z+1	; 0x01
    31e4:	82 81       	ldd	r24, Z+2	; 0x02
    31e6:	93 81       	ldd	r25, Z+3	; 0x03
    31e8:	20 e0       	ldi	r18, 0x00	; 0
    31ea:	30 e0       	ldi	r19, 0x00	; 0
    31ec:	40 e8       	ldi	r20, 0x80	; 128
    31ee:	5f e3       	ldi	r21, 0x3F	; 63
    31f0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    31f4:	88 23       	and	r24, r24
    31f6:	44 f4       	brge	.+16     	; 0x3208 <main+0x3be>
		__ticks = 1;
    31f8:	fe 01       	movw	r30, r28
    31fa:	eb 58       	subi	r30, 0x8B	; 139
    31fc:	ff 4f       	sbci	r31, 0xFF	; 255
    31fe:	81 e0       	ldi	r24, 0x01	; 1
    3200:	90 e0       	ldi	r25, 0x00	; 0
    3202:	91 83       	std	Z+1, r25	; 0x01
    3204:	80 83       	st	Z, r24
    3206:	64 c0       	rjmp	.+200    	; 0x32d0 <main+0x486>
	else if (__tmp > 65535)
    3208:	fe 01       	movw	r30, r28
    320a:	e9 58       	subi	r30, 0x89	; 137
    320c:	ff 4f       	sbci	r31, 0xFF	; 255
    320e:	60 81       	ld	r22, Z
    3210:	71 81       	ldd	r23, Z+1	; 0x01
    3212:	82 81       	ldd	r24, Z+2	; 0x02
    3214:	93 81       	ldd	r25, Z+3	; 0x03
    3216:	20 e0       	ldi	r18, 0x00	; 0
    3218:	3f ef       	ldi	r19, 0xFF	; 255
    321a:	4f e7       	ldi	r20, 0x7F	; 127
    321c:	57 e4       	ldi	r21, 0x47	; 71
    321e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3222:	18 16       	cp	r1, r24
    3224:	0c f0       	brlt	.+2      	; 0x3228 <main+0x3de>
    3226:	43 c0       	rjmp	.+134    	; 0x32ae <main+0x464>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3228:	fe 01       	movw	r30, r28
    322a:	e5 58       	subi	r30, 0x85	; 133
    322c:	ff 4f       	sbci	r31, 0xFF	; 255
    322e:	60 81       	ld	r22, Z
    3230:	71 81       	ldd	r23, Z+1	; 0x01
    3232:	82 81       	ldd	r24, Z+2	; 0x02
    3234:	93 81       	ldd	r25, Z+3	; 0x03
    3236:	20 e0       	ldi	r18, 0x00	; 0
    3238:	30 e0       	ldi	r19, 0x00	; 0
    323a:	40 e2       	ldi	r20, 0x20	; 32
    323c:	51 e4       	ldi	r21, 0x41	; 65
    323e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3242:	dc 01       	movw	r26, r24
    3244:	cb 01       	movw	r24, r22
    3246:	8e 01       	movw	r16, r28
    3248:	0b 58       	subi	r16, 0x8B	; 139
    324a:	1f 4f       	sbci	r17, 0xFF	; 255
    324c:	bc 01       	movw	r22, r24
    324e:	cd 01       	movw	r24, r26
    3250:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3254:	dc 01       	movw	r26, r24
    3256:	cb 01       	movw	r24, r22
    3258:	f8 01       	movw	r30, r16
    325a:	91 83       	std	Z+1, r25	; 0x01
    325c:	80 83       	st	Z, r24
    325e:	1f c0       	rjmp	.+62     	; 0x329e <main+0x454>
    3260:	fe 01       	movw	r30, r28
    3262:	ed 58       	subi	r30, 0x8D	; 141
    3264:	ff 4f       	sbci	r31, 0xFF	; 255
    3266:	80 e9       	ldi	r24, 0x90	; 144
    3268:	91 e0       	ldi	r25, 0x01	; 1
    326a:	91 83       	std	Z+1, r25	; 0x01
    326c:	80 83       	st	Z, r24
    326e:	fe 01       	movw	r30, r28
    3270:	ed 58       	subi	r30, 0x8D	; 141
    3272:	ff 4f       	sbci	r31, 0xFF	; 255
    3274:	80 81       	ld	r24, Z
    3276:	91 81       	ldd	r25, Z+1	; 0x01
    3278:	01 97       	sbiw	r24, 0x01	; 1
    327a:	f1 f7       	brne	.-4      	; 0x3278 <main+0x42e>
    327c:	fe 01       	movw	r30, r28
    327e:	ed 58       	subi	r30, 0x8D	; 141
    3280:	ff 4f       	sbci	r31, 0xFF	; 255
    3282:	91 83       	std	Z+1, r25	; 0x01
    3284:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3286:	de 01       	movw	r26, r28
    3288:	ab 58       	subi	r26, 0x8B	; 139
    328a:	bf 4f       	sbci	r27, 0xFF	; 255
    328c:	fe 01       	movw	r30, r28
    328e:	eb 58       	subi	r30, 0x8B	; 139
    3290:	ff 4f       	sbci	r31, 0xFF	; 255
    3292:	80 81       	ld	r24, Z
    3294:	91 81       	ldd	r25, Z+1	; 0x01
    3296:	01 97       	sbiw	r24, 0x01	; 1
    3298:	11 96       	adiw	r26, 0x01	; 1
    329a:	9c 93       	st	X, r25
    329c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    329e:	fe 01       	movw	r30, r28
    32a0:	eb 58       	subi	r30, 0x8B	; 139
    32a2:	ff 4f       	sbci	r31, 0xFF	; 255
    32a4:	80 81       	ld	r24, Z
    32a6:	91 81       	ldd	r25, Z+1	; 0x01
    32a8:	00 97       	sbiw	r24, 0x00	; 0
    32aa:	d1 f6       	brne	.-76     	; 0x3260 <main+0x416>
    32ac:	27 c0       	rjmp	.+78     	; 0x32fc <main+0x4b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32ae:	8e 01       	movw	r16, r28
    32b0:	0b 58       	subi	r16, 0x8B	; 139
    32b2:	1f 4f       	sbci	r17, 0xFF	; 255
    32b4:	fe 01       	movw	r30, r28
    32b6:	e9 58       	subi	r30, 0x89	; 137
    32b8:	ff 4f       	sbci	r31, 0xFF	; 255
    32ba:	60 81       	ld	r22, Z
    32bc:	71 81       	ldd	r23, Z+1	; 0x01
    32be:	82 81       	ldd	r24, Z+2	; 0x02
    32c0:	93 81       	ldd	r25, Z+3	; 0x03
    32c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32c6:	dc 01       	movw	r26, r24
    32c8:	cb 01       	movw	r24, r22
    32ca:	f8 01       	movw	r30, r16
    32cc:	91 83       	std	Z+1, r25	; 0x01
    32ce:	80 83       	st	Z, r24
    32d0:	de 01       	movw	r26, r28
    32d2:	af 58       	subi	r26, 0x8F	; 143
    32d4:	bf 4f       	sbci	r27, 0xFF	; 255
    32d6:	fe 01       	movw	r30, r28
    32d8:	eb 58       	subi	r30, 0x8B	; 139
    32da:	ff 4f       	sbci	r31, 0xFF	; 255
    32dc:	80 81       	ld	r24, Z
    32de:	91 81       	ldd	r25, Z+1	; 0x01
    32e0:	8d 93       	st	X+, r24
    32e2:	9c 93       	st	X, r25
    32e4:	fe 01       	movw	r30, r28
    32e6:	ef 58       	subi	r30, 0x8F	; 143
    32e8:	ff 4f       	sbci	r31, 0xFF	; 255
    32ea:	80 81       	ld	r24, Z
    32ec:	91 81       	ldd	r25, Z+1	; 0x01
    32ee:	01 97       	sbiw	r24, 0x01	; 1
    32f0:	f1 f7       	brne	.-4      	; 0x32ee <main+0x4a4>
    32f2:	fe 01       	movw	r30, r28
    32f4:	ef 58       	subi	r30, 0x8F	; 143
    32f6:	ff 4f       	sbci	r31, 0xFF	; 255
    32f8:	91 83       	std	Z+1, r25	; 0x01
    32fa:	80 83       	st	Z, r24
		       _delay_ms(1000);
		       H_LCD_Void_LCDClear();
    32fc:	0e 94 c9 14 	call	0x2992	; 0x2992 <H_LCD_Void_LCDClear>
		      
		   
                  
			  H_LCD_Void_LCDWriteString((u8*)"Servo left");
    3300:	8c e6       	ldi	r24, 0x6C	; 108
    3302:	90 e0       	ldi	r25, 0x00	; 0
    3304:	0e 94 ff 13 	call	0x27fe	; 0x27fe <H_LCD_Void_LCDWriteString>
    3308:	fe 01       	movw	r30, r28
    330a:	e3 59       	subi	r30, 0x93	; 147
    330c:	ff 4f       	sbci	r31, 0xFF	; 255
    330e:	80 e0       	ldi	r24, 0x00	; 0
    3310:	90 e0       	ldi	r25, 0x00	; 0
    3312:	aa e7       	ldi	r26, 0x7A	; 122
    3314:	b4 e4       	ldi	r27, 0x44	; 68
    3316:	80 83       	st	Z, r24
    3318:	91 83       	std	Z+1, r25	; 0x01
    331a:	a2 83       	std	Z+2, r26	; 0x02
    331c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    331e:	8e 01       	movw	r16, r28
    3320:	07 59       	subi	r16, 0x97	; 151
    3322:	1f 4f       	sbci	r17, 0xFF	; 255
    3324:	fe 01       	movw	r30, r28
    3326:	e3 59       	subi	r30, 0x93	; 147
    3328:	ff 4f       	sbci	r31, 0xFF	; 255
    332a:	60 81       	ld	r22, Z
    332c:	71 81       	ldd	r23, Z+1	; 0x01
    332e:	82 81       	ldd	r24, Z+2	; 0x02
    3330:	93 81       	ldd	r25, Z+3	; 0x03
    3332:	20 e0       	ldi	r18, 0x00	; 0
    3334:	30 e0       	ldi	r19, 0x00	; 0
    3336:	4a e7       	ldi	r20, 0x7A	; 122
    3338:	55 e4       	ldi	r21, 0x45	; 69
    333a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    333e:	dc 01       	movw	r26, r24
    3340:	cb 01       	movw	r24, r22
    3342:	f8 01       	movw	r30, r16
    3344:	80 83       	st	Z, r24
    3346:	91 83       	std	Z+1, r25	; 0x01
    3348:	a2 83       	std	Z+2, r26	; 0x02
    334a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    334c:	fe 01       	movw	r30, r28
    334e:	e7 59       	subi	r30, 0x97	; 151
    3350:	ff 4f       	sbci	r31, 0xFF	; 255
    3352:	60 81       	ld	r22, Z
    3354:	71 81       	ldd	r23, Z+1	; 0x01
    3356:	82 81       	ldd	r24, Z+2	; 0x02
    3358:	93 81       	ldd	r25, Z+3	; 0x03
    335a:	20 e0       	ldi	r18, 0x00	; 0
    335c:	30 e0       	ldi	r19, 0x00	; 0
    335e:	40 e8       	ldi	r20, 0x80	; 128
    3360:	5f e3       	ldi	r21, 0x3F	; 63
    3362:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3366:	88 23       	and	r24, r24
    3368:	44 f4       	brge	.+16     	; 0x337a <main+0x530>
		__ticks = 1;
    336a:	fe 01       	movw	r30, r28
    336c:	e9 59       	subi	r30, 0x99	; 153
    336e:	ff 4f       	sbci	r31, 0xFF	; 255
    3370:	81 e0       	ldi	r24, 0x01	; 1
    3372:	90 e0       	ldi	r25, 0x00	; 0
    3374:	91 83       	std	Z+1, r25	; 0x01
    3376:	80 83       	st	Z, r24
    3378:	64 c0       	rjmp	.+200    	; 0x3442 <main+0x5f8>
	else if (__tmp > 65535)
    337a:	fe 01       	movw	r30, r28
    337c:	e7 59       	subi	r30, 0x97	; 151
    337e:	ff 4f       	sbci	r31, 0xFF	; 255
    3380:	60 81       	ld	r22, Z
    3382:	71 81       	ldd	r23, Z+1	; 0x01
    3384:	82 81       	ldd	r24, Z+2	; 0x02
    3386:	93 81       	ldd	r25, Z+3	; 0x03
    3388:	20 e0       	ldi	r18, 0x00	; 0
    338a:	3f ef       	ldi	r19, 0xFF	; 255
    338c:	4f e7       	ldi	r20, 0x7F	; 127
    338e:	57 e4       	ldi	r21, 0x47	; 71
    3390:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3394:	18 16       	cp	r1, r24
    3396:	0c f0       	brlt	.+2      	; 0x339a <main+0x550>
    3398:	43 c0       	rjmp	.+134    	; 0x3420 <main+0x5d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    339a:	fe 01       	movw	r30, r28
    339c:	e3 59       	subi	r30, 0x93	; 147
    339e:	ff 4f       	sbci	r31, 0xFF	; 255
    33a0:	60 81       	ld	r22, Z
    33a2:	71 81       	ldd	r23, Z+1	; 0x01
    33a4:	82 81       	ldd	r24, Z+2	; 0x02
    33a6:	93 81       	ldd	r25, Z+3	; 0x03
    33a8:	20 e0       	ldi	r18, 0x00	; 0
    33aa:	30 e0       	ldi	r19, 0x00	; 0
    33ac:	40 e2       	ldi	r20, 0x20	; 32
    33ae:	51 e4       	ldi	r21, 0x41	; 65
    33b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33b4:	dc 01       	movw	r26, r24
    33b6:	cb 01       	movw	r24, r22
    33b8:	8e 01       	movw	r16, r28
    33ba:	09 59       	subi	r16, 0x99	; 153
    33bc:	1f 4f       	sbci	r17, 0xFF	; 255
    33be:	bc 01       	movw	r22, r24
    33c0:	cd 01       	movw	r24, r26
    33c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33c6:	dc 01       	movw	r26, r24
    33c8:	cb 01       	movw	r24, r22
    33ca:	f8 01       	movw	r30, r16
    33cc:	91 83       	std	Z+1, r25	; 0x01
    33ce:	80 83       	st	Z, r24
    33d0:	1f c0       	rjmp	.+62     	; 0x3410 <main+0x5c6>
    33d2:	fe 01       	movw	r30, r28
    33d4:	eb 59       	subi	r30, 0x9B	; 155
    33d6:	ff 4f       	sbci	r31, 0xFF	; 255
    33d8:	80 e9       	ldi	r24, 0x90	; 144
    33da:	91 e0       	ldi	r25, 0x01	; 1
    33dc:	91 83       	std	Z+1, r25	; 0x01
    33de:	80 83       	st	Z, r24
    33e0:	fe 01       	movw	r30, r28
    33e2:	eb 59       	subi	r30, 0x9B	; 155
    33e4:	ff 4f       	sbci	r31, 0xFF	; 255
    33e6:	80 81       	ld	r24, Z
    33e8:	91 81       	ldd	r25, Z+1	; 0x01
    33ea:	01 97       	sbiw	r24, 0x01	; 1
    33ec:	f1 f7       	brne	.-4      	; 0x33ea <main+0x5a0>
    33ee:	fe 01       	movw	r30, r28
    33f0:	eb 59       	subi	r30, 0x9B	; 155
    33f2:	ff 4f       	sbci	r31, 0xFF	; 255
    33f4:	91 83       	std	Z+1, r25	; 0x01
    33f6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33f8:	de 01       	movw	r26, r28
    33fa:	a9 59       	subi	r26, 0x99	; 153
    33fc:	bf 4f       	sbci	r27, 0xFF	; 255
    33fe:	fe 01       	movw	r30, r28
    3400:	e9 59       	subi	r30, 0x99	; 153
    3402:	ff 4f       	sbci	r31, 0xFF	; 255
    3404:	80 81       	ld	r24, Z
    3406:	91 81       	ldd	r25, Z+1	; 0x01
    3408:	01 97       	sbiw	r24, 0x01	; 1
    340a:	11 96       	adiw	r26, 0x01	; 1
    340c:	9c 93       	st	X, r25
    340e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3410:	fe 01       	movw	r30, r28
    3412:	e9 59       	subi	r30, 0x99	; 153
    3414:	ff 4f       	sbci	r31, 0xFF	; 255
    3416:	80 81       	ld	r24, Z
    3418:	91 81       	ldd	r25, Z+1	; 0x01
    341a:	00 97       	sbiw	r24, 0x00	; 0
    341c:	d1 f6       	brne	.-76     	; 0x33d2 <main+0x588>
    341e:	27 c0       	rjmp	.+78     	; 0x346e <main+0x624>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3420:	8e 01       	movw	r16, r28
    3422:	09 59       	subi	r16, 0x99	; 153
    3424:	1f 4f       	sbci	r17, 0xFF	; 255
    3426:	fe 01       	movw	r30, r28
    3428:	e7 59       	subi	r30, 0x97	; 151
    342a:	ff 4f       	sbci	r31, 0xFF	; 255
    342c:	60 81       	ld	r22, Z
    342e:	71 81       	ldd	r23, Z+1	; 0x01
    3430:	82 81       	ldd	r24, Z+2	; 0x02
    3432:	93 81       	ldd	r25, Z+3	; 0x03
    3434:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3438:	dc 01       	movw	r26, r24
    343a:	cb 01       	movw	r24, r22
    343c:	f8 01       	movw	r30, r16
    343e:	91 83       	std	Z+1, r25	; 0x01
    3440:	80 83       	st	Z, r24
    3442:	de 01       	movw	r26, r28
    3444:	ad 59       	subi	r26, 0x9D	; 157
    3446:	bf 4f       	sbci	r27, 0xFF	; 255
    3448:	fe 01       	movw	r30, r28
    344a:	e9 59       	subi	r30, 0x99	; 153
    344c:	ff 4f       	sbci	r31, 0xFF	; 255
    344e:	80 81       	ld	r24, Z
    3450:	91 81       	ldd	r25, Z+1	; 0x01
    3452:	8d 93       	st	X+, r24
    3454:	9c 93       	st	X, r25
    3456:	fe 01       	movw	r30, r28
    3458:	ed 59       	subi	r30, 0x9D	; 157
    345a:	ff 4f       	sbci	r31, 0xFF	; 255
    345c:	80 81       	ld	r24, Z
    345e:	91 81       	ldd	r25, Z+1	; 0x01
    3460:	01 97       	sbiw	r24, 0x01	; 1
    3462:	f1 f7       	brne	.-4      	; 0x3460 <main+0x616>
    3464:	fe 01       	movw	r30, r28
    3466:	ed 59       	subi	r30, 0x9D	; 157
    3468:	ff 4f       	sbci	r31, 0xFF	; 255
    346a:	91 83       	std	Z+1, r25	; 0x01
    346c:	80 83       	st	Z, r24
		       _delay_ms(1000);
		        H_LCD_Void_LCDClear();
    346e:	0e 94 c9 14 	call	0x2992	; 0x2992 <H_LCD_Void_LCDClear>
    3472:	fe 01       	movw	r30, r28
    3474:	e1 5a       	subi	r30, 0xA1	; 161
    3476:	ff 4f       	sbci	r31, 0xFF	; 255
    3478:	80 e0       	ldi	r24, 0x00	; 0
    347a:	90 e4       	ldi	r25, 0x40	; 64
    347c:	ac e1       	ldi	r26, 0x1C	; 28
    347e:	b6 e4       	ldi	r27, 0x46	; 70
    3480:	80 83       	st	Z, r24
    3482:	91 83       	std	Z+1, r25	; 0x01
    3484:	a2 83       	std	Z+2, r26	; 0x02
    3486:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3488:	8e 01       	movw	r16, r28
    348a:	05 5a       	subi	r16, 0xA5	; 165
    348c:	1f 4f       	sbci	r17, 0xFF	; 255
    348e:	fe 01       	movw	r30, r28
    3490:	e1 5a       	subi	r30, 0xA1	; 161
    3492:	ff 4f       	sbci	r31, 0xFF	; 255
    3494:	60 81       	ld	r22, Z
    3496:	71 81       	ldd	r23, Z+1	; 0x01
    3498:	82 81       	ldd	r24, Z+2	; 0x02
    349a:	93 81       	ldd	r25, Z+3	; 0x03
    349c:	20 e0       	ldi	r18, 0x00	; 0
    349e:	30 e0       	ldi	r19, 0x00	; 0
    34a0:	4a e7       	ldi	r20, 0x7A	; 122
    34a2:	55 e4       	ldi	r21, 0x45	; 69
    34a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34a8:	dc 01       	movw	r26, r24
    34aa:	cb 01       	movw	r24, r22
    34ac:	f8 01       	movw	r30, r16
    34ae:	80 83       	st	Z, r24
    34b0:	91 83       	std	Z+1, r25	; 0x01
    34b2:	a2 83       	std	Z+2, r26	; 0x02
    34b4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    34b6:	fe 01       	movw	r30, r28
    34b8:	e5 5a       	subi	r30, 0xA5	; 165
    34ba:	ff 4f       	sbci	r31, 0xFF	; 255
    34bc:	60 81       	ld	r22, Z
    34be:	71 81       	ldd	r23, Z+1	; 0x01
    34c0:	82 81       	ldd	r24, Z+2	; 0x02
    34c2:	93 81       	ldd	r25, Z+3	; 0x03
    34c4:	20 e0       	ldi	r18, 0x00	; 0
    34c6:	30 e0       	ldi	r19, 0x00	; 0
    34c8:	40 e8       	ldi	r20, 0x80	; 128
    34ca:	5f e3       	ldi	r21, 0x3F	; 63
    34cc:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    34d0:	88 23       	and	r24, r24
    34d2:	44 f4       	brge	.+16     	; 0x34e4 <main+0x69a>
		__ticks = 1;
    34d4:	fe 01       	movw	r30, r28
    34d6:	e7 5a       	subi	r30, 0xA7	; 167
    34d8:	ff 4f       	sbci	r31, 0xFF	; 255
    34da:	81 e0       	ldi	r24, 0x01	; 1
    34dc:	90 e0       	ldi	r25, 0x00	; 0
    34de:	91 83       	std	Z+1, r25	; 0x01
    34e0:	80 83       	st	Z, r24
    34e2:	64 c0       	rjmp	.+200    	; 0x35ac <main+0x762>
	else if (__tmp > 65535)
    34e4:	fe 01       	movw	r30, r28
    34e6:	e5 5a       	subi	r30, 0xA5	; 165
    34e8:	ff 4f       	sbci	r31, 0xFF	; 255
    34ea:	60 81       	ld	r22, Z
    34ec:	71 81       	ldd	r23, Z+1	; 0x01
    34ee:	82 81       	ldd	r24, Z+2	; 0x02
    34f0:	93 81       	ldd	r25, Z+3	; 0x03
    34f2:	20 e0       	ldi	r18, 0x00	; 0
    34f4:	3f ef       	ldi	r19, 0xFF	; 255
    34f6:	4f e7       	ldi	r20, 0x7F	; 127
    34f8:	57 e4       	ldi	r21, 0x47	; 71
    34fa:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    34fe:	18 16       	cp	r1, r24
    3500:	0c f0       	brlt	.+2      	; 0x3504 <main+0x6ba>
    3502:	43 c0       	rjmp	.+134    	; 0x358a <main+0x740>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3504:	fe 01       	movw	r30, r28
    3506:	e1 5a       	subi	r30, 0xA1	; 161
    3508:	ff 4f       	sbci	r31, 0xFF	; 255
    350a:	60 81       	ld	r22, Z
    350c:	71 81       	ldd	r23, Z+1	; 0x01
    350e:	82 81       	ldd	r24, Z+2	; 0x02
    3510:	93 81       	ldd	r25, Z+3	; 0x03
    3512:	20 e0       	ldi	r18, 0x00	; 0
    3514:	30 e0       	ldi	r19, 0x00	; 0
    3516:	40 e2       	ldi	r20, 0x20	; 32
    3518:	51 e4       	ldi	r21, 0x41	; 65
    351a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    351e:	dc 01       	movw	r26, r24
    3520:	cb 01       	movw	r24, r22
    3522:	8e 01       	movw	r16, r28
    3524:	07 5a       	subi	r16, 0xA7	; 167
    3526:	1f 4f       	sbci	r17, 0xFF	; 255
    3528:	bc 01       	movw	r22, r24
    352a:	cd 01       	movw	r24, r26
    352c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3530:	dc 01       	movw	r26, r24
    3532:	cb 01       	movw	r24, r22
    3534:	f8 01       	movw	r30, r16
    3536:	91 83       	std	Z+1, r25	; 0x01
    3538:	80 83       	st	Z, r24
    353a:	1f c0       	rjmp	.+62     	; 0x357a <main+0x730>
    353c:	fe 01       	movw	r30, r28
    353e:	e9 5a       	subi	r30, 0xA9	; 169
    3540:	ff 4f       	sbci	r31, 0xFF	; 255
    3542:	80 e9       	ldi	r24, 0x90	; 144
    3544:	91 e0       	ldi	r25, 0x01	; 1
    3546:	91 83       	std	Z+1, r25	; 0x01
    3548:	80 83       	st	Z, r24
    354a:	fe 01       	movw	r30, r28
    354c:	e9 5a       	subi	r30, 0xA9	; 169
    354e:	ff 4f       	sbci	r31, 0xFF	; 255
    3550:	80 81       	ld	r24, Z
    3552:	91 81       	ldd	r25, Z+1	; 0x01
    3554:	01 97       	sbiw	r24, 0x01	; 1
    3556:	f1 f7       	brne	.-4      	; 0x3554 <main+0x70a>
    3558:	fe 01       	movw	r30, r28
    355a:	e9 5a       	subi	r30, 0xA9	; 169
    355c:	ff 4f       	sbci	r31, 0xFF	; 255
    355e:	91 83       	std	Z+1, r25	; 0x01
    3560:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3562:	de 01       	movw	r26, r28
    3564:	a7 5a       	subi	r26, 0xA7	; 167
    3566:	bf 4f       	sbci	r27, 0xFF	; 255
    3568:	fe 01       	movw	r30, r28
    356a:	e7 5a       	subi	r30, 0xA7	; 167
    356c:	ff 4f       	sbci	r31, 0xFF	; 255
    356e:	80 81       	ld	r24, Z
    3570:	91 81       	ldd	r25, Z+1	; 0x01
    3572:	01 97       	sbiw	r24, 0x01	; 1
    3574:	11 96       	adiw	r26, 0x01	; 1
    3576:	9c 93       	st	X, r25
    3578:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    357a:	fe 01       	movw	r30, r28
    357c:	e7 5a       	subi	r30, 0xA7	; 167
    357e:	ff 4f       	sbci	r31, 0xFF	; 255
    3580:	80 81       	ld	r24, Z
    3582:	91 81       	ldd	r25, Z+1	; 0x01
    3584:	00 97       	sbiw	r24, 0x00	; 0
    3586:	d1 f6       	brne	.-76     	; 0x353c <main+0x6f2>
    3588:	27 c0       	rjmp	.+78     	; 0x35d8 <main+0x78e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    358a:	8e 01       	movw	r16, r28
    358c:	07 5a       	subi	r16, 0xA7	; 167
    358e:	1f 4f       	sbci	r17, 0xFF	; 255
    3590:	fe 01       	movw	r30, r28
    3592:	e5 5a       	subi	r30, 0xA5	; 165
    3594:	ff 4f       	sbci	r31, 0xFF	; 255
    3596:	60 81       	ld	r22, Z
    3598:	71 81       	ldd	r23, Z+1	; 0x01
    359a:	82 81       	ldd	r24, Z+2	; 0x02
    359c:	93 81       	ldd	r25, Z+3	; 0x03
    359e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35a2:	dc 01       	movw	r26, r24
    35a4:	cb 01       	movw	r24, r22
    35a6:	f8 01       	movw	r30, r16
    35a8:	91 83       	std	Z+1, r25	; 0x01
    35aa:	80 83       	st	Z, r24
    35ac:	de 01       	movw	r26, r28
    35ae:	ab 5a       	subi	r26, 0xAB	; 171
    35b0:	bf 4f       	sbci	r27, 0xFF	; 255
    35b2:	fe 01       	movw	r30, r28
    35b4:	e7 5a       	subi	r30, 0xA7	; 167
    35b6:	ff 4f       	sbci	r31, 0xFF	; 255
    35b8:	80 81       	ld	r24, Z
    35ba:	91 81       	ldd	r25, Z+1	; 0x01
    35bc:	8d 93       	st	X+, r24
    35be:	9c 93       	st	X, r25
    35c0:	fe 01       	movw	r30, r28
    35c2:	eb 5a       	subi	r30, 0xAB	; 171
    35c4:	ff 4f       	sbci	r31, 0xFF	; 255
    35c6:	80 81       	ld	r24, Z
    35c8:	91 81       	ldd	r25, Z+1	; 0x01
    35ca:	01 97       	sbiw	r24, 0x01	; 1
    35cc:	f1 f7       	brne	.-4      	; 0x35ca <main+0x780>
    35ce:	fe 01       	movw	r30, r28
    35d0:	eb 5a       	subi	r30, 0xAB	; 171
    35d2:	ff 4f       	sbci	r31, 0xFF	; 255
    35d4:	91 83       	std	Z+1, r25	; 0x01
    35d6:	80 83       	st	Z, r24
                        _delay_ms(10000);
			distLeft = Ultrasonic_getDist();
    35d8:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <Ultrasonic_getDist>
    35dc:	fe 01       	movw	r30, r28
    35de:	e5 56       	subi	r30, 0x65	; 101
    35e0:	ff 4f       	sbci	r31, 0xFF	; 255
    35e2:	80 83       	st	Z, r24
		       H_LCD_Void_LCDWriteNumber(distLeft);
    35e4:	fe 01       	movw	r30, r28
    35e6:	e5 56       	subi	r30, 0x65	; 101
    35e8:	ff 4f       	sbci	r31, 0xFF	; 255
    35ea:	80 81       	ld	r24, Z
    35ec:	88 2f       	mov	r24, r24
    35ee:	90 e0       	ldi	r25, 0x00	; 0
    35f0:	a0 e0       	ldi	r26, 0x00	; 0
    35f2:	b0 e0       	ldi	r27, 0x00	; 0
    35f4:	bc 01       	movw	r22, r24
    35f6:	cd 01       	movw	r24, r26
    35f8:	0e 94 28 14 	call	0x2850	; 0x2850 <H_LCD_Void_LCDWriteNumber>
    35fc:	fe 01       	movw	r30, r28
    35fe:	ef 5a       	subi	r30, 0xAF	; 175
    3600:	ff 4f       	sbci	r31, 0xFF	; 255
    3602:	80 e0       	ldi	r24, 0x00	; 0
    3604:	90 e0       	ldi	r25, 0x00	; 0
    3606:	aa e7       	ldi	r26, 0x7A	; 122
    3608:	b4 e4       	ldi	r27, 0x44	; 68
    360a:	80 83       	st	Z, r24
    360c:	91 83       	std	Z+1, r25	; 0x01
    360e:	a2 83       	std	Z+2, r26	; 0x02
    3610:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3612:	8e 01       	movw	r16, r28
    3614:	03 5b       	subi	r16, 0xB3	; 179
    3616:	1f 4f       	sbci	r17, 0xFF	; 255
    3618:	fe 01       	movw	r30, r28
    361a:	ef 5a       	subi	r30, 0xAF	; 175
    361c:	ff 4f       	sbci	r31, 0xFF	; 255
    361e:	60 81       	ld	r22, Z
    3620:	71 81       	ldd	r23, Z+1	; 0x01
    3622:	82 81       	ldd	r24, Z+2	; 0x02
    3624:	93 81       	ldd	r25, Z+3	; 0x03
    3626:	20 e0       	ldi	r18, 0x00	; 0
    3628:	30 e0       	ldi	r19, 0x00	; 0
    362a:	4a e7       	ldi	r20, 0x7A	; 122
    362c:	55 e4       	ldi	r21, 0x45	; 69
    362e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3632:	dc 01       	movw	r26, r24
    3634:	cb 01       	movw	r24, r22
    3636:	f8 01       	movw	r30, r16
    3638:	80 83       	st	Z, r24
    363a:	91 83       	std	Z+1, r25	; 0x01
    363c:	a2 83       	std	Z+2, r26	; 0x02
    363e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3640:	fe 01       	movw	r30, r28
    3642:	e3 5b       	subi	r30, 0xB3	; 179
    3644:	ff 4f       	sbci	r31, 0xFF	; 255
    3646:	60 81       	ld	r22, Z
    3648:	71 81       	ldd	r23, Z+1	; 0x01
    364a:	82 81       	ldd	r24, Z+2	; 0x02
    364c:	93 81       	ldd	r25, Z+3	; 0x03
    364e:	20 e0       	ldi	r18, 0x00	; 0
    3650:	30 e0       	ldi	r19, 0x00	; 0
    3652:	40 e8       	ldi	r20, 0x80	; 128
    3654:	5f e3       	ldi	r21, 0x3F	; 63
    3656:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    365a:	88 23       	and	r24, r24
    365c:	44 f4       	brge	.+16     	; 0x366e <main+0x824>
		__ticks = 1;
    365e:	fe 01       	movw	r30, r28
    3660:	e5 5b       	subi	r30, 0xB5	; 181
    3662:	ff 4f       	sbci	r31, 0xFF	; 255
    3664:	81 e0       	ldi	r24, 0x01	; 1
    3666:	90 e0       	ldi	r25, 0x00	; 0
    3668:	91 83       	std	Z+1, r25	; 0x01
    366a:	80 83       	st	Z, r24
    366c:	64 c0       	rjmp	.+200    	; 0x3736 <main+0x8ec>
	else if (__tmp > 65535)
    366e:	fe 01       	movw	r30, r28
    3670:	e3 5b       	subi	r30, 0xB3	; 179
    3672:	ff 4f       	sbci	r31, 0xFF	; 255
    3674:	60 81       	ld	r22, Z
    3676:	71 81       	ldd	r23, Z+1	; 0x01
    3678:	82 81       	ldd	r24, Z+2	; 0x02
    367a:	93 81       	ldd	r25, Z+3	; 0x03
    367c:	20 e0       	ldi	r18, 0x00	; 0
    367e:	3f ef       	ldi	r19, 0xFF	; 255
    3680:	4f e7       	ldi	r20, 0x7F	; 127
    3682:	57 e4       	ldi	r21, 0x47	; 71
    3684:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3688:	18 16       	cp	r1, r24
    368a:	0c f0       	brlt	.+2      	; 0x368e <main+0x844>
    368c:	43 c0       	rjmp	.+134    	; 0x3714 <main+0x8ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    368e:	fe 01       	movw	r30, r28
    3690:	ef 5a       	subi	r30, 0xAF	; 175
    3692:	ff 4f       	sbci	r31, 0xFF	; 255
    3694:	60 81       	ld	r22, Z
    3696:	71 81       	ldd	r23, Z+1	; 0x01
    3698:	82 81       	ldd	r24, Z+2	; 0x02
    369a:	93 81       	ldd	r25, Z+3	; 0x03
    369c:	20 e0       	ldi	r18, 0x00	; 0
    369e:	30 e0       	ldi	r19, 0x00	; 0
    36a0:	40 e2       	ldi	r20, 0x20	; 32
    36a2:	51 e4       	ldi	r21, 0x41	; 65
    36a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36a8:	dc 01       	movw	r26, r24
    36aa:	cb 01       	movw	r24, r22
    36ac:	8e 01       	movw	r16, r28
    36ae:	05 5b       	subi	r16, 0xB5	; 181
    36b0:	1f 4f       	sbci	r17, 0xFF	; 255
    36b2:	bc 01       	movw	r22, r24
    36b4:	cd 01       	movw	r24, r26
    36b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36ba:	dc 01       	movw	r26, r24
    36bc:	cb 01       	movw	r24, r22
    36be:	f8 01       	movw	r30, r16
    36c0:	91 83       	std	Z+1, r25	; 0x01
    36c2:	80 83       	st	Z, r24
    36c4:	1f c0       	rjmp	.+62     	; 0x3704 <main+0x8ba>
    36c6:	fe 01       	movw	r30, r28
    36c8:	e7 5b       	subi	r30, 0xB7	; 183
    36ca:	ff 4f       	sbci	r31, 0xFF	; 255
    36cc:	80 e9       	ldi	r24, 0x90	; 144
    36ce:	91 e0       	ldi	r25, 0x01	; 1
    36d0:	91 83       	std	Z+1, r25	; 0x01
    36d2:	80 83       	st	Z, r24
    36d4:	fe 01       	movw	r30, r28
    36d6:	e7 5b       	subi	r30, 0xB7	; 183
    36d8:	ff 4f       	sbci	r31, 0xFF	; 255
    36da:	80 81       	ld	r24, Z
    36dc:	91 81       	ldd	r25, Z+1	; 0x01
    36de:	01 97       	sbiw	r24, 0x01	; 1
    36e0:	f1 f7       	brne	.-4      	; 0x36de <main+0x894>
    36e2:	fe 01       	movw	r30, r28
    36e4:	e7 5b       	subi	r30, 0xB7	; 183
    36e6:	ff 4f       	sbci	r31, 0xFF	; 255
    36e8:	91 83       	std	Z+1, r25	; 0x01
    36ea:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36ec:	de 01       	movw	r26, r28
    36ee:	a5 5b       	subi	r26, 0xB5	; 181
    36f0:	bf 4f       	sbci	r27, 0xFF	; 255
    36f2:	fe 01       	movw	r30, r28
    36f4:	e5 5b       	subi	r30, 0xB5	; 181
    36f6:	ff 4f       	sbci	r31, 0xFF	; 255
    36f8:	80 81       	ld	r24, Z
    36fa:	91 81       	ldd	r25, Z+1	; 0x01
    36fc:	01 97       	sbiw	r24, 0x01	; 1
    36fe:	11 96       	adiw	r26, 0x01	; 1
    3700:	9c 93       	st	X, r25
    3702:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3704:	fe 01       	movw	r30, r28
    3706:	e5 5b       	subi	r30, 0xB5	; 181
    3708:	ff 4f       	sbci	r31, 0xFF	; 255
    370a:	80 81       	ld	r24, Z
    370c:	91 81       	ldd	r25, Z+1	; 0x01
    370e:	00 97       	sbiw	r24, 0x00	; 0
    3710:	d1 f6       	brne	.-76     	; 0x36c6 <main+0x87c>
    3712:	27 c0       	rjmp	.+78     	; 0x3762 <main+0x918>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3714:	8e 01       	movw	r16, r28
    3716:	05 5b       	subi	r16, 0xB5	; 181
    3718:	1f 4f       	sbci	r17, 0xFF	; 255
    371a:	fe 01       	movw	r30, r28
    371c:	e3 5b       	subi	r30, 0xB3	; 179
    371e:	ff 4f       	sbci	r31, 0xFF	; 255
    3720:	60 81       	ld	r22, Z
    3722:	71 81       	ldd	r23, Z+1	; 0x01
    3724:	82 81       	ldd	r24, Z+2	; 0x02
    3726:	93 81       	ldd	r25, Z+3	; 0x03
    3728:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    372c:	dc 01       	movw	r26, r24
    372e:	cb 01       	movw	r24, r22
    3730:	f8 01       	movw	r30, r16
    3732:	91 83       	std	Z+1, r25	; 0x01
    3734:	80 83       	st	Z, r24
    3736:	de 01       	movw	r26, r28
    3738:	a9 5b       	subi	r26, 0xB9	; 185
    373a:	bf 4f       	sbci	r27, 0xFF	; 255
    373c:	fe 01       	movw	r30, r28
    373e:	e5 5b       	subi	r30, 0xB5	; 181
    3740:	ff 4f       	sbci	r31, 0xFF	; 255
    3742:	80 81       	ld	r24, Z
    3744:	91 81       	ldd	r25, Z+1	; 0x01
    3746:	8d 93       	st	X+, r24
    3748:	9c 93       	st	X, r25
    374a:	fe 01       	movw	r30, r28
    374c:	e9 5b       	subi	r30, 0xB9	; 185
    374e:	ff 4f       	sbci	r31, 0xFF	; 255
    3750:	80 81       	ld	r24, Z
    3752:	91 81       	ldd	r25, Z+1	; 0x01
    3754:	01 97       	sbiw	r24, 0x01	; 1
    3756:	f1 f7       	brne	.-4      	; 0x3754 <main+0x90a>
    3758:	fe 01       	movw	r30, r28
    375a:	e9 5b       	subi	r30, 0xB9	; 185
    375c:	ff 4f       	sbci	r31, 0xFF	; 255
    375e:	91 83       	std	Z+1, r25	; 0x01
    3760:	80 83       	st	Z, r24
		       _delay_ms(1000);
		       H_LCD_Void_LCDClear();
    3762:	0e 94 c9 14 	call	0x2992	; 0x2992 <H_LCD_Void_LCDClear>
			
			 
			
			H_Servo_Void_ServoForward(); // Face forward
    3766:	0e 94 6d 15 	call	0x2ada	; 0x2ada <H_Servo_Void_ServoForward>
			H_Servo_Void_ServoSetStart();
    376a:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <H_Servo_Void_ServoSetStart>
    376e:	fe 01       	movw	r30, r28
    3770:	ed 5b       	subi	r30, 0xBD	; 189
    3772:	ff 4f       	sbci	r31, 0xFF	; 255
    3774:	80 e0       	ldi	r24, 0x00	; 0
    3776:	90 e4       	ldi	r25, 0x40	; 64
    3778:	ac e1       	ldi	r26, 0x1C	; 28
    377a:	b6 e4       	ldi	r27, 0x46	; 70
    377c:	80 83       	st	Z, r24
    377e:	91 83       	std	Z+1, r25	; 0x01
    3780:	a2 83       	std	Z+2, r26	; 0x02
    3782:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3784:	8e 01       	movw	r16, r28
    3786:	01 5c       	subi	r16, 0xC1	; 193
    3788:	1f 4f       	sbci	r17, 0xFF	; 255
    378a:	fe 01       	movw	r30, r28
    378c:	ed 5b       	subi	r30, 0xBD	; 189
    378e:	ff 4f       	sbci	r31, 0xFF	; 255
    3790:	60 81       	ld	r22, Z
    3792:	71 81       	ldd	r23, Z+1	; 0x01
    3794:	82 81       	ldd	r24, Z+2	; 0x02
    3796:	93 81       	ldd	r25, Z+3	; 0x03
    3798:	20 e0       	ldi	r18, 0x00	; 0
    379a:	30 e0       	ldi	r19, 0x00	; 0
    379c:	4a e7       	ldi	r20, 0x7A	; 122
    379e:	55 e4       	ldi	r21, 0x45	; 69
    37a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37a4:	dc 01       	movw	r26, r24
    37a6:	cb 01       	movw	r24, r22
    37a8:	f8 01       	movw	r30, r16
    37aa:	80 83       	st	Z, r24
    37ac:	91 83       	std	Z+1, r25	; 0x01
    37ae:	a2 83       	std	Z+2, r26	; 0x02
    37b0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    37b2:	fe 01       	movw	r30, r28
    37b4:	ff 96       	adiw	r30, 0x3f	; 63
    37b6:	60 81       	ld	r22, Z
    37b8:	71 81       	ldd	r23, Z+1	; 0x01
    37ba:	82 81       	ldd	r24, Z+2	; 0x02
    37bc:	93 81       	ldd	r25, Z+3	; 0x03
    37be:	20 e0       	ldi	r18, 0x00	; 0
    37c0:	30 e0       	ldi	r19, 0x00	; 0
    37c2:	40 e8       	ldi	r20, 0x80	; 128
    37c4:	5f e3       	ldi	r21, 0x3F	; 63
    37c6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    37ca:	88 23       	and	r24, r24
    37cc:	2c f4       	brge	.+10     	; 0x37d8 <main+0x98e>
		__ticks = 1;
    37ce:	81 e0       	ldi	r24, 0x01	; 1
    37d0:	90 e0       	ldi	r25, 0x00	; 0
    37d2:	9e af       	std	Y+62, r25	; 0x3e
    37d4:	8d af       	std	Y+61, r24	; 0x3d
    37d6:	46 c0       	rjmp	.+140    	; 0x3864 <main+0xa1a>
	else if (__tmp > 65535)
    37d8:	fe 01       	movw	r30, r28
    37da:	ff 96       	adiw	r30, 0x3f	; 63
    37dc:	60 81       	ld	r22, Z
    37de:	71 81       	ldd	r23, Z+1	; 0x01
    37e0:	82 81       	ldd	r24, Z+2	; 0x02
    37e2:	93 81       	ldd	r25, Z+3	; 0x03
    37e4:	20 e0       	ldi	r18, 0x00	; 0
    37e6:	3f ef       	ldi	r19, 0xFF	; 255
    37e8:	4f e7       	ldi	r20, 0x7F	; 127
    37ea:	57 e4       	ldi	r21, 0x47	; 71
    37ec:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    37f0:	18 16       	cp	r1, r24
    37f2:	64 f5       	brge	.+88     	; 0x384c <main+0xa02>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37f4:	fe 01       	movw	r30, r28
    37f6:	ed 5b       	subi	r30, 0xBD	; 189
    37f8:	ff 4f       	sbci	r31, 0xFF	; 255
    37fa:	60 81       	ld	r22, Z
    37fc:	71 81       	ldd	r23, Z+1	; 0x01
    37fe:	82 81       	ldd	r24, Z+2	; 0x02
    3800:	93 81       	ldd	r25, Z+3	; 0x03
    3802:	20 e0       	ldi	r18, 0x00	; 0
    3804:	30 e0       	ldi	r19, 0x00	; 0
    3806:	40 e2       	ldi	r20, 0x20	; 32
    3808:	51 e4       	ldi	r21, 0x41	; 65
    380a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    380e:	dc 01       	movw	r26, r24
    3810:	cb 01       	movw	r24, r22
    3812:	bc 01       	movw	r22, r24
    3814:	cd 01       	movw	r24, r26
    3816:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    381a:	dc 01       	movw	r26, r24
    381c:	cb 01       	movw	r24, r22
    381e:	9e af       	std	Y+62, r25	; 0x3e
    3820:	8d af       	std	Y+61, r24	; 0x3d
    3822:	0f c0       	rjmp	.+30     	; 0x3842 <main+0x9f8>
    3824:	80 e9       	ldi	r24, 0x90	; 144
    3826:	91 e0       	ldi	r25, 0x01	; 1
    3828:	9c af       	std	Y+60, r25	; 0x3c
    382a:	8b af       	std	Y+59, r24	; 0x3b
    382c:	8b ad       	ldd	r24, Y+59	; 0x3b
    382e:	9c ad       	ldd	r25, Y+60	; 0x3c
    3830:	01 97       	sbiw	r24, 0x01	; 1
    3832:	f1 f7       	brne	.-4      	; 0x3830 <main+0x9e6>
    3834:	9c af       	std	Y+60, r25	; 0x3c
    3836:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3838:	8d ad       	ldd	r24, Y+61	; 0x3d
    383a:	9e ad       	ldd	r25, Y+62	; 0x3e
    383c:	01 97       	sbiw	r24, 0x01	; 1
    383e:	9e af       	std	Y+62, r25	; 0x3e
    3840:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3842:	8d ad       	ldd	r24, Y+61	; 0x3d
    3844:	9e ad       	ldd	r25, Y+62	; 0x3e
    3846:	00 97       	sbiw	r24, 0x00	; 0
    3848:	69 f7       	brne	.-38     	; 0x3824 <main+0x9da>
    384a:	16 c0       	rjmp	.+44     	; 0x3878 <main+0xa2e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    384c:	fe 01       	movw	r30, r28
    384e:	ff 96       	adiw	r30, 0x3f	; 63
    3850:	60 81       	ld	r22, Z
    3852:	71 81       	ldd	r23, Z+1	; 0x01
    3854:	82 81       	ldd	r24, Z+2	; 0x02
    3856:	93 81       	ldd	r25, Z+3	; 0x03
    3858:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    385c:	dc 01       	movw	r26, r24
    385e:	cb 01       	movw	r24, r22
    3860:	9e af       	std	Y+62, r25	; 0x3e
    3862:	8d af       	std	Y+61, r24	; 0x3d
    3864:	8d ad       	ldd	r24, Y+61	; 0x3d
    3866:	9e ad       	ldd	r25, Y+62	; 0x3e
    3868:	9a af       	std	Y+58, r25	; 0x3a
    386a:	89 af       	std	Y+57, r24	; 0x39
    386c:	89 ad       	ldd	r24, Y+57	; 0x39
    386e:	9a ad       	ldd	r25, Y+58	; 0x3a
    3870:	01 97       	sbiw	r24, 0x01	; 1
    3872:	f1 f7       	brne	.-4      	; 0x3870 <main+0xa26>
    3874:	9a af       	std	Y+58, r25	; 0x3a
    3876:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(10000);
		
                        
			//decide which direction to turn
			if(distRight>distLeft)
    3878:	fe 01       	movw	r30, r28
    387a:	e4 56       	subi	r30, 0x64	; 100
    387c:	ff 4f       	sbci	r31, 0xFF	; 255
    387e:	de 01       	movw	r26, r28
    3880:	a5 56       	subi	r26, 0x65	; 101
    3882:	bf 4f       	sbci	r27, 0xFF	; 255
    3884:	90 81       	ld	r25, Z
    3886:	8c 91       	ld	r24, X
    3888:	89 17       	cp	r24, r25
    388a:	08 f0       	brcs	.+2      	; 0x388e <main+0xa44>
    388c:	fe c0       	rjmp	.+508    	; 0x3a8a <main+0xc40>
			{
			   dist=distRight;
    388e:	de 01       	movw	r26, r28
    3890:	a3 56       	subi	r26, 0x63	; 99
    3892:	bf 4f       	sbci	r27, 0xFF	; 255
    3894:	fe 01       	movw	r30, r28
    3896:	e4 56       	subi	r30, 0x64	; 100
    3898:	ff 4f       	sbci	r31, 0xFF	; 255
    389a:	80 81       	ld	r24, Z
    389c:	8c 93       	st	X, r24
			   if(dist>20)
    389e:	fe 01       	movw	r30, r28
    38a0:	e3 56       	subi	r30, 0x63	; 99
    38a2:	ff 4f       	sbci	r31, 0xFF	; 255
    38a4:	80 81       	ld	r24, Z
    38a6:	85 31       	cpi	r24, 0x15	; 21
    38a8:	08 f4       	brcc	.+2      	; 0x38ac <main+0xa62>
    38aa:	ed c1       	rjmp	.+986    	; 0x3c86 <main+0xe3c>
			   {
				H_DCMotor_Void_DCMotorTurnRight();//turn left wheel
    38ac:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <H_DCMotor_Void_DCMotorTurnRight>
    38b0:	80 e0       	ldi	r24, 0x00	; 0
    38b2:	90 e0       	ldi	r25, 0x00	; 0
    38b4:	aa e7       	ldi	r26, 0x7A	; 122
    38b6:	b4 e4       	ldi	r27, 0x44	; 68
    38b8:	8d ab       	std	Y+53, r24	; 0x35
    38ba:	9e ab       	std	Y+54, r25	; 0x36
    38bc:	af ab       	std	Y+55, r26	; 0x37
    38be:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38c0:	6d a9       	ldd	r22, Y+53	; 0x35
    38c2:	7e a9       	ldd	r23, Y+54	; 0x36
    38c4:	8f a9       	ldd	r24, Y+55	; 0x37
    38c6:	98 ad       	ldd	r25, Y+56	; 0x38
    38c8:	20 e0       	ldi	r18, 0x00	; 0
    38ca:	30 e0       	ldi	r19, 0x00	; 0
    38cc:	4a e7       	ldi	r20, 0x7A	; 122
    38ce:	55 e4       	ldi	r21, 0x45	; 69
    38d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38d4:	dc 01       	movw	r26, r24
    38d6:	cb 01       	movw	r24, r22
    38d8:	89 ab       	std	Y+49, r24	; 0x31
    38da:	9a ab       	std	Y+50, r25	; 0x32
    38dc:	ab ab       	std	Y+51, r26	; 0x33
    38de:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    38e0:	69 a9       	ldd	r22, Y+49	; 0x31
    38e2:	7a a9       	ldd	r23, Y+50	; 0x32
    38e4:	8b a9       	ldd	r24, Y+51	; 0x33
    38e6:	9c a9       	ldd	r25, Y+52	; 0x34
    38e8:	20 e0       	ldi	r18, 0x00	; 0
    38ea:	30 e0       	ldi	r19, 0x00	; 0
    38ec:	40 e8       	ldi	r20, 0x80	; 128
    38ee:	5f e3       	ldi	r21, 0x3F	; 63
    38f0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    38f4:	88 23       	and	r24, r24
    38f6:	2c f4       	brge	.+10     	; 0x3902 <main+0xab8>
		__ticks = 1;
    38f8:	81 e0       	ldi	r24, 0x01	; 1
    38fa:	90 e0       	ldi	r25, 0x00	; 0
    38fc:	98 ab       	std	Y+48, r25	; 0x30
    38fe:	8f a7       	std	Y+47, r24	; 0x2f
    3900:	3f c0       	rjmp	.+126    	; 0x3980 <main+0xb36>
	else if (__tmp > 65535)
    3902:	69 a9       	ldd	r22, Y+49	; 0x31
    3904:	7a a9       	ldd	r23, Y+50	; 0x32
    3906:	8b a9       	ldd	r24, Y+51	; 0x33
    3908:	9c a9       	ldd	r25, Y+52	; 0x34
    390a:	20 e0       	ldi	r18, 0x00	; 0
    390c:	3f ef       	ldi	r19, 0xFF	; 255
    390e:	4f e7       	ldi	r20, 0x7F	; 127
    3910:	57 e4       	ldi	r21, 0x47	; 71
    3912:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3916:	18 16       	cp	r1, r24
    3918:	4c f5       	brge	.+82     	; 0x396c <main+0xb22>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    391a:	6d a9       	ldd	r22, Y+53	; 0x35
    391c:	7e a9       	ldd	r23, Y+54	; 0x36
    391e:	8f a9       	ldd	r24, Y+55	; 0x37
    3920:	98 ad       	ldd	r25, Y+56	; 0x38
    3922:	20 e0       	ldi	r18, 0x00	; 0
    3924:	30 e0       	ldi	r19, 0x00	; 0
    3926:	40 e2       	ldi	r20, 0x20	; 32
    3928:	51 e4       	ldi	r21, 0x41	; 65
    392a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    392e:	dc 01       	movw	r26, r24
    3930:	cb 01       	movw	r24, r22
    3932:	bc 01       	movw	r22, r24
    3934:	cd 01       	movw	r24, r26
    3936:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    393a:	dc 01       	movw	r26, r24
    393c:	cb 01       	movw	r24, r22
    393e:	98 ab       	std	Y+48, r25	; 0x30
    3940:	8f a7       	std	Y+47, r24	; 0x2f
    3942:	0f c0       	rjmp	.+30     	; 0x3962 <main+0xb18>
    3944:	80 e9       	ldi	r24, 0x90	; 144
    3946:	91 e0       	ldi	r25, 0x01	; 1
    3948:	9e a7       	std	Y+46, r25	; 0x2e
    394a:	8d a7       	std	Y+45, r24	; 0x2d
    394c:	8d a5       	ldd	r24, Y+45	; 0x2d
    394e:	9e a5       	ldd	r25, Y+46	; 0x2e
    3950:	01 97       	sbiw	r24, 0x01	; 1
    3952:	f1 f7       	brne	.-4      	; 0x3950 <main+0xb06>
    3954:	9e a7       	std	Y+46, r25	; 0x2e
    3956:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3958:	8f a5       	ldd	r24, Y+47	; 0x2f
    395a:	98 a9       	ldd	r25, Y+48	; 0x30
    395c:	01 97       	sbiw	r24, 0x01	; 1
    395e:	98 ab       	std	Y+48, r25	; 0x30
    3960:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3962:	8f a5       	ldd	r24, Y+47	; 0x2f
    3964:	98 a9       	ldd	r25, Y+48	; 0x30
    3966:	00 97       	sbiw	r24, 0x00	; 0
    3968:	69 f7       	brne	.-38     	; 0x3944 <main+0xafa>
    396a:	14 c0       	rjmp	.+40     	; 0x3994 <main+0xb4a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    396c:	69 a9       	ldd	r22, Y+49	; 0x31
    396e:	7a a9       	ldd	r23, Y+50	; 0x32
    3970:	8b a9       	ldd	r24, Y+51	; 0x33
    3972:	9c a9       	ldd	r25, Y+52	; 0x34
    3974:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3978:	dc 01       	movw	r26, r24
    397a:	cb 01       	movw	r24, r22
    397c:	98 ab       	std	Y+48, r25	; 0x30
    397e:	8f a7       	std	Y+47, r24	; 0x2f
    3980:	8f a5       	ldd	r24, Y+47	; 0x2f
    3982:	98 a9       	ldd	r25, Y+48	; 0x30
    3984:	9c a7       	std	Y+44, r25	; 0x2c
    3986:	8b a7       	std	Y+43, r24	; 0x2b
    3988:	8b a5       	ldd	r24, Y+43	; 0x2b
    398a:	9c a5       	ldd	r25, Y+44	; 0x2c
    398c:	01 97       	sbiw	r24, 0x01	; 1
    398e:	f1 f7       	brne	.-4      	; 0x398c <main+0xb42>
    3990:	9c a7       	std	Y+44, r25	; 0x2c
    3992:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(1000);
				H_DCMotor_Void_DCMotorForward();//turn both wheels
    3994:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <H_DCMotor_Void_DCMotorForward>
			        H_LCD_Void_LCDWriteString((u8*)"Car  right");
    3998:	87 e7       	ldi	r24, 0x77	; 119
    399a:	90 e0       	ldi	r25, 0x00	; 0
    399c:	0e 94 ff 13 	call	0x27fe	; 0x27fe <H_LCD_Void_LCDWriteString>
    39a0:	80 e0       	ldi	r24, 0x00	; 0
    39a2:	90 e4       	ldi	r25, 0x40	; 64
    39a4:	ac e1       	ldi	r26, 0x1C	; 28
    39a6:	b6 e4       	ldi	r27, 0x46	; 70
    39a8:	8f a3       	std	Y+39, r24	; 0x27
    39aa:	98 a7       	std	Y+40, r25	; 0x28
    39ac:	a9 a7       	std	Y+41, r26	; 0x29
    39ae:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39b0:	6f a1       	ldd	r22, Y+39	; 0x27
    39b2:	78 a5       	ldd	r23, Y+40	; 0x28
    39b4:	89 a5       	ldd	r24, Y+41	; 0x29
    39b6:	9a a5       	ldd	r25, Y+42	; 0x2a
    39b8:	20 e0       	ldi	r18, 0x00	; 0
    39ba:	30 e0       	ldi	r19, 0x00	; 0
    39bc:	4a e7       	ldi	r20, 0x7A	; 122
    39be:	55 e4       	ldi	r21, 0x45	; 69
    39c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39c4:	dc 01       	movw	r26, r24
    39c6:	cb 01       	movw	r24, r22
    39c8:	8b a3       	std	Y+35, r24	; 0x23
    39ca:	9c a3       	std	Y+36, r25	; 0x24
    39cc:	ad a3       	std	Y+37, r26	; 0x25
    39ce:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    39d0:	6b a1       	ldd	r22, Y+35	; 0x23
    39d2:	7c a1       	ldd	r23, Y+36	; 0x24
    39d4:	8d a1       	ldd	r24, Y+37	; 0x25
    39d6:	9e a1       	ldd	r25, Y+38	; 0x26
    39d8:	20 e0       	ldi	r18, 0x00	; 0
    39da:	30 e0       	ldi	r19, 0x00	; 0
    39dc:	40 e8       	ldi	r20, 0x80	; 128
    39de:	5f e3       	ldi	r21, 0x3F	; 63
    39e0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    39e4:	88 23       	and	r24, r24
    39e6:	2c f4       	brge	.+10     	; 0x39f2 <main+0xba8>
		__ticks = 1;
    39e8:	81 e0       	ldi	r24, 0x01	; 1
    39ea:	90 e0       	ldi	r25, 0x00	; 0
    39ec:	9a a3       	std	Y+34, r25	; 0x22
    39ee:	89 a3       	std	Y+33, r24	; 0x21
    39f0:	3f c0       	rjmp	.+126    	; 0x3a70 <main+0xc26>
	else if (__tmp > 65535)
    39f2:	6b a1       	ldd	r22, Y+35	; 0x23
    39f4:	7c a1       	ldd	r23, Y+36	; 0x24
    39f6:	8d a1       	ldd	r24, Y+37	; 0x25
    39f8:	9e a1       	ldd	r25, Y+38	; 0x26
    39fa:	20 e0       	ldi	r18, 0x00	; 0
    39fc:	3f ef       	ldi	r19, 0xFF	; 255
    39fe:	4f e7       	ldi	r20, 0x7F	; 127
    3a00:	57 e4       	ldi	r21, 0x47	; 71
    3a02:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3a06:	18 16       	cp	r1, r24
    3a08:	4c f5       	brge	.+82     	; 0x3a5c <main+0xc12>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a0a:	6f a1       	ldd	r22, Y+39	; 0x27
    3a0c:	78 a5       	ldd	r23, Y+40	; 0x28
    3a0e:	89 a5       	ldd	r24, Y+41	; 0x29
    3a10:	9a a5       	ldd	r25, Y+42	; 0x2a
    3a12:	20 e0       	ldi	r18, 0x00	; 0
    3a14:	30 e0       	ldi	r19, 0x00	; 0
    3a16:	40 e2       	ldi	r20, 0x20	; 32
    3a18:	51 e4       	ldi	r21, 0x41	; 65
    3a1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a1e:	dc 01       	movw	r26, r24
    3a20:	cb 01       	movw	r24, r22
    3a22:	bc 01       	movw	r22, r24
    3a24:	cd 01       	movw	r24, r26
    3a26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a2a:	dc 01       	movw	r26, r24
    3a2c:	cb 01       	movw	r24, r22
    3a2e:	9a a3       	std	Y+34, r25	; 0x22
    3a30:	89 a3       	std	Y+33, r24	; 0x21
    3a32:	0f c0       	rjmp	.+30     	; 0x3a52 <main+0xc08>
    3a34:	80 e9       	ldi	r24, 0x90	; 144
    3a36:	91 e0       	ldi	r25, 0x01	; 1
    3a38:	98 a3       	std	Y+32, r25	; 0x20
    3a3a:	8f 8f       	std	Y+31, r24	; 0x1f
    3a3c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3a3e:	98 a1       	ldd	r25, Y+32	; 0x20
    3a40:	01 97       	sbiw	r24, 0x01	; 1
    3a42:	f1 f7       	brne	.-4      	; 0x3a40 <main+0xbf6>
    3a44:	98 a3       	std	Y+32, r25	; 0x20
    3a46:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a48:	89 a1       	ldd	r24, Y+33	; 0x21
    3a4a:	9a a1       	ldd	r25, Y+34	; 0x22
    3a4c:	01 97       	sbiw	r24, 0x01	; 1
    3a4e:	9a a3       	std	Y+34, r25	; 0x22
    3a50:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a52:	89 a1       	ldd	r24, Y+33	; 0x21
    3a54:	9a a1       	ldd	r25, Y+34	; 0x22
    3a56:	00 97       	sbiw	r24, 0x00	; 0
    3a58:	69 f7       	brne	.-38     	; 0x3a34 <main+0xbea>
    3a5a:	14 c0       	rjmp	.+40     	; 0x3a84 <main+0xc3a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a5c:	6b a1       	ldd	r22, Y+35	; 0x23
    3a5e:	7c a1       	ldd	r23, Y+36	; 0x24
    3a60:	8d a1       	ldd	r24, Y+37	; 0x25
    3a62:	9e a1       	ldd	r25, Y+38	; 0x26
    3a64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a68:	dc 01       	movw	r26, r24
    3a6a:	cb 01       	movw	r24, r22
    3a6c:	9a a3       	std	Y+34, r25	; 0x22
    3a6e:	89 a3       	std	Y+33, r24	; 0x21
    3a70:	89 a1       	ldd	r24, Y+33	; 0x21
    3a72:	9a a1       	ldd	r25, Y+34	; 0x22
    3a74:	9e 8f       	std	Y+30, r25	; 0x1e
    3a76:	8d 8f       	std	Y+29, r24	; 0x1d
    3a78:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3a7a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3a7c:	01 97       	sbiw	r24, 0x01	; 1
    3a7e:	f1 f7       	brne	.-4      	; 0x3a7c <main+0xc32>
    3a80:	9e 8f       	std	Y+30, r25	; 0x1e
    3a82:	8d 8f       	std	Y+29, r24	; 0x1d
                               _delay_ms(10000);
			      H_LCD_Void_LCDClear();
    3a84:	0e 94 c9 14 	call	0x2992	; 0x2992 <H_LCD_Void_LCDClear>
    3a88:	f1 c9       	rjmp	.-3102   	; 0x2e6c <main+0x22>
			      break;
			   }
			}
			else 
			{
			   dist=distLeft;
    3a8a:	de 01       	movw	r26, r28
    3a8c:	a3 56       	subi	r26, 0x63	; 99
    3a8e:	bf 4f       	sbci	r27, 0xFF	; 255
    3a90:	fe 01       	movw	r30, r28
    3a92:	e5 56       	subi	r30, 0x65	; 101
    3a94:	ff 4f       	sbci	r31, 0xFF	; 255
    3a96:	80 81       	ld	r24, Z
    3a98:	8c 93       	st	X, r24
			   if(dist>20)
    3a9a:	fe 01       	movw	r30, r28
    3a9c:	e3 56       	subi	r30, 0x63	; 99
    3a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    3aa0:	80 81       	ld	r24, Z
    3aa2:	85 31       	cpi	r24, 0x15	; 21
    3aa4:	08 f4       	brcc	.+2      	; 0x3aa8 <main+0xc5e>
    3aa6:	ef c0       	rjmp	.+478    	; 0x3c86 <main+0xe3c>
			   {
			      
				H_DCMotor_Void_DCMotorTurnLeft();//turn right wheel
    3aa8:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <H_DCMotor_Void_DCMotorTurnLeft>
    3aac:	80 e0       	ldi	r24, 0x00	; 0
    3aae:	90 e0       	ldi	r25, 0x00	; 0
    3ab0:	aa e7       	ldi	r26, 0x7A	; 122
    3ab2:	b4 e4       	ldi	r27, 0x44	; 68
    3ab4:	89 8f       	std	Y+25, r24	; 0x19
    3ab6:	9a 8f       	std	Y+26, r25	; 0x1a
    3ab8:	ab 8f       	std	Y+27, r26	; 0x1b
    3aba:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3abc:	69 8d       	ldd	r22, Y+25	; 0x19
    3abe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3ac0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ac2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ac4:	20 e0       	ldi	r18, 0x00	; 0
    3ac6:	30 e0       	ldi	r19, 0x00	; 0
    3ac8:	4a e7       	ldi	r20, 0x7A	; 122
    3aca:	55 e4       	ldi	r21, 0x45	; 69
    3acc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ad0:	dc 01       	movw	r26, r24
    3ad2:	cb 01       	movw	r24, r22
    3ad4:	8d 8b       	std	Y+21, r24	; 0x15
    3ad6:	9e 8b       	std	Y+22, r25	; 0x16
    3ad8:	af 8b       	std	Y+23, r26	; 0x17
    3ada:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3adc:	6d 89       	ldd	r22, Y+21	; 0x15
    3ade:	7e 89       	ldd	r23, Y+22	; 0x16
    3ae0:	8f 89       	ldd	r24, Y+23	; 0x17
    3ae2:	98 8d       	ldd	r25, Y+24	; 0x18
    3ae4:	20 e0       	ldi	r18, 0x00	; 0
    3ae6:	30 e0       	ldi	r19, 0x00	; 0
    3ae8:	40 e8       	ldi	r20, 0x80	; 128
    3aea:	5f e3       	ldi	r21, 0x3F	; 63
    3aec:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3af0:	88 23       	and	r24, r24
    3af2:	2c f4       	brge	.+10     	; 0x3afe <main+0xcb4>
		__ticks = 1;
    3af4:	81 e0       	ldi	r24, 0x01	; 1
    3af6:	90 e0       	ldi	r25, 0x00	; 0
    3af8:	9c 8b       	std	Y+20, r25	; 0x14
    3afa:	8b 8b       	std	Y+19, r24	; 0x13
    3afc:	3f c0       	rjmp	.+126    	; 0x3b7c <main+0xd32>
	else if (__tmp > 65535)
    3afe:	6d 89       	ldd	r22, Y+21	; 0x15
    3b00:	7e 89       	ldd	r23, Y+22	; 0x16
    3b02:	8f 89       	ldd	r24, Y+23	; 0x17
    3b04:	98 8d       	ldd	r25, Y+24	; 0x18
    3b06:	20 e0       	ldi	r18, 0x00	; 0
    3b08:	3f ef       	ldi	r19, 0xFF	; 255
    3b0a:	4f e7       	ldi	r20, 0x7F	; 127
    3b0c:	57 e4       	ldi	r21, 0x47	; 71
    3b0e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3b12:	18 16       	cp	r1, r24
    3b14:	4c f5       	brge	.+82     	; 0x3b68 <main+0xd1e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b16:	69 8d       	ldd	r22, Y+25	; 0x19
    3b18:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b1a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b1c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b1e:	20 e0       	ldi	r18, 0x00	; 0
    3b20:	30 e0       	ldi	r19, 0x00	; 0
    3b22:	40 e2       	ldi	r20, 0x20	; 32
    3b24:	51 e4       	ldi	r21, 0x41	; 65
    3b26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b2a:	dc 01       	movw	r26, r24
    3b2c:	cb 01       	movw	r24, r22
    3b2e:	bc 01       	movw	r22, r24
    3b30:	cd 01       	movw	r24, r26
    3b32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b36:	dc 01       	movw	r26, r24
    3b38:	cb 01       	movw	r24, r22
    3b3a:	9c 8b       	std	Y+20, r25	; 0x14
    3b3c:	8b 8b       	std	Y+19, r24	; 0x13
    3b3e:	0f c0       	rjmp	.+30     	; 0x3b5e <main+0xd14>
    3b40:	80 e9       	ldi	r24, 0x90	; 144
    3b42:	91 e0       	ldi	r25, 0x01	; 1
    3b44:	9a 8b       	std	Y+18, r25	; 0x12
    3b46:	89 8b       	std	Y+17, r24	; 0x11
    3b48:	89 89       	ldd	r24, Y+17	; 0x11
    3b4a:	9a 89       	ldd	r25, Y+18	; 0x12
    3b4c:	01 97       	sbiw	r24, 0x01	; 1
    3b4e:	f1 f7       	brne	.-4      	; 0x3b4c <main+0xd02>
    3b50:	9a 8b       	std	Y+18, r25	; 0x12
    3b52:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b54:	8b 89       	ldd	r24, Y+19	; 0x13
    3b56:	9c 89       	ldd	r25, Y+20	; 0x14
    3b58:	01 97       	sbiw	r24, 0x01	; 1
    3b5a:	9c 8b       	std	Y+20, r25	; 0x14
    3b5c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b5e:	8b 89       	ldd	r24, Y+19	; 0x13
    3b60:	9c 89       	ldd	r25, Y+20	; 0x14
    3b62:	00 97       	sbiw	r24, 0x00	; 0
    3b64:	69 f7       	brne	.-38     	; 0x3b40 <main+0xcf6>
    3b66:	14 c0       	rjmp	.+40     	; 0x3b90 <main+0xd46>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b68:	6d 89       	ldd	r22, Y+21	; 0x15
    3b6a:	7e 89       	ldd	r23, Y+22	; 0x16
    3b6c:	8f 89       	ldd	r24, Y+23	; 0x17
    3b6e:	98 8d       	ldd	r25, Y+24	; 0x18
    3b70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b74:	dc 01       	movw	r26, r24
    3b76:	cb 01       	movw	r24, r22
    3b78:	9c 8b       	std	Y+20, r25	; 0x14
    3b7a:	8b 8b       	std	Y+19, r24	; 0x13
    3b7c:	8b 89       	ldd	r24, Y+19	; 0x13
    3b7e:	9c 89       	ldd	r25, Y+20	; 0x14
    3b80:	98 8b       	std	Y+16, r25	; 0x10
    3b82:	8f 87       	std	Y+15, r24	; 0x0f
    3b84:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b86:	98 89       	ldd	r25, Y+16	; 0x10
    3b88:	01 97       	sbiw	r24, 0x01	; 1
    3b8a:	f1 f7       	brne	.-4      	; 0x3b88 <main+0xd3e>
    3b8c:	98 8b       	std	Y+16, r25	; 0x10
    3b8e:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(1000);
				H_DCMotor_Void_DCMotorForward();//turn both wheels
    3b90:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <H_DCMotor_Void_DCMotorForward>
			       H_LCD_Void_LCDWriteString((u8*)"Cart left");
    3b94:	82 e8       	ldi	r24, 0x82	; 130
    3b96:	90 e0       	ldi	r25, 0x00	; 0
    3b98:	0e 94 ff 13 	call	0x27fe	; 0x27fe <H_LCD_Void_LCDWriteString>
    3b9c:	80 e0       	ldi	r24, 0x00	; 0
    3b9e:	90 e4       	ldi	r25, 0x40	; 64
    3ba0:	ac e1       	ldi	r26, 0x1C	; 28
    3ba2:	b6 e4       	ldi	r27, 0x46	; 70
    3ba4:	8b 87       	std	Y+11, r24	; 0x0b
    3ba6:	9c 87       	std	Y+12, r25	; 0x0c
    3ba8:	ad 87       	std	Y+13, r26	; 0x0d
    3baa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bac:	6b 85       	ldd	r22, Y+11	; 0x0b
    3bae:	7c 85       	ldd	r23, Y+12	; 0x0c
    3bb0:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bb2:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bb4:	20 e0       	ldi	r18, 0x00	; 0
    3bb6:	30 e0       	ldi	r19, 0x00	; 0
    3bb8:	4a e7       	ldi	r20, 0x7A	; 122
    3bba:	55 e4       	ldi	r21, 0x45	; 69
    3bbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bc0:	dc 01       	movw	r26, r24
    3bc2:	cb 01       	movw	r24, r22
    3bc4:	8f 83       	std	Y+7, r24	; 0x07
    3bc6:	98 87       	std	Y+8, r25	; 0x08
    3bc8:	a9 87       	std	Y+9, r26	; 0x09
    3bca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3bcc:	6f 81       	ldd	r22, Y+7	; 0x07
    3bce:	78 85       	ldd	r23, Y+8	; 0x08
    3bd0:	89 85       	ldd	r24, Y+9	; 0x09
    3bd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bd4:	20 e0       	ldi	r18, 0x00	; 0
    3bd6:	30 e0       	ldi	r19, 0x00	; 0
    3bd8:	40 e8       	ldi	r20, 0x80	; 128
    3bda:	5f e3       	ldi	r21, 0x3F	; 63
    3bdc:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3be0:	88 23       	and	r24, r24
    3be2:	2c f4       	brge	.+10     	; 0x3bee <main+0xda4>
		__ticks = 1;
    3be4:	81 e0       	ldi	r24, 0x01	; 1
    3be6:	90 e0       	ldi	r25, 0x00	; 0
    3be8:	9e 83       	std	Y+6, r25	; 0x06
    3bea:	8d 83       	std	Y+5, r24	; 0x05
    3bec:	3f c0       	rjmp	.+126    	; 0x3c6c <main+0xe22>
	else if (__tmp > 65535)
    3bee:	6f 81       	ldd	r22, Y+7	; 0x07
    3bf0:	78 85       	ldd	r23, Y+8	; 0x08
    3bf2:	89 85       	ldd	r24, Y+9	; 0x09
    3bf4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bf6:	20 e0       	ldi	r18, 0x00	; 0
    3bf8:	3f ef       	ldi	r19, 0xFF	; 255
    3bfa:	4f e7       	ldi	r20, 0x7F	; 127
    3bfc:	57 e4       	ldi	r21, 0x47	; 71
    3bfe:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3c02:	18 16       	cp	r1, r24
    3c04:	4c f5       	brge	.+82     	; 0x3c58 <main+0xe0e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c06:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c08:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c0e:	20 e0       	ldi	r18, 0x00	; 0
    3c10:	30 e0       	ldi	r19, 0x00	; 0
    3c12:	40 e2       	ldi	r20, 0x20	; 32
    3c14:	51 e4       	ldi	r21, 0x41	; 65
    3c16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c1a:	dc 01       	movw	r26, r24
    3c1c:	cb 01       	movw	r24, r22
    3c1e:	bc 01       	movw	r22, r24
    3c20:	cd 01       	movw	r24, r26
    3c22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c26:	dc 01       	movw	r26, r24
    3c28:	cb 01       	movw	r24, r22
    3c2a:	9e 83       	std	Y+6, r25	; 0x06
    3c2c:	8d 83       	std	Y+5, r24	; 0x05
    3c2e:	0f c0       	rjmp	.+30     	; 0x3c4e <main+0xe04>
    3c30:	80 e9       	ldi	r24, 0x90	; 144
    3c32:	91 e0       	ldi	r25, 0x01	; 1
    3c34:	9c 83       	std	Y+4, r25	; 0x04
    3c36:	8b 83       	std	Y+3, r24	; 0x03
    3c38:	8b 81       	ldd	r24, Y+3	; 0x03
    3c3a:	9c 81       	ldd	r25, Y+4	; 0x04
    3c3c:	01 97       	sbiw	r24, 0x01	; 1
    3c3e:	f1 f7       	brne	.-4      	; 0x3c3c <main+0xdf2>
    3c40:	9c 83       	std	Y+4, r25	; 0x04
    3c42:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c44:	8d 81       	ldd	r24, Y+5	; 0x05
    3c46:	9e 81       	ldd	r25, Y+6	; 0x06
    3c48:	01 97       	sbiw	r24, 0x01	; 1
    3c4a:	9e 83       	std	Y+6, r25	; 0x06
    3c4c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c4e:	8d 81       	ldd	r24, Y+5	; 0x05
    3c50:	9e 81       	ldd	r25, Y+6	; 0x06
    3c52:	00 97       	sbiw	r24, 0x00	; 0
    3c54:	69 f7       	brne	.-38     	; 0x3c30 <main+0xde6>
    3c56:	14 c0       	rjmp	.+40     	; 0x3c80 <main+0xe36>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c58:	6f 81       	ldd	r22, Y+7	; 0x07
    3c5a:	78 85       	ldd	r23, Y+8	; 0x08
    3c5c:	89 85       	ldd	r24, Y+9	; 0x09
    3c5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c64:	dc 01       	movw	r26, r24
    3c66:	cb 01       	movw	r24, r22
    3c68:	9e 83       	std	Y+6, r25	; 0x06
    3c6a:	8d 83       	std	Y+5, r24	; 0x05
    3c6c:	8d 81       	ldd	r24, Y+5	; 0x05
    3c6e:	9e 81       	ldd	r25, Y+6	; 0x06
    3c70:	9a 83       	std	Y+2, r25	; 0x02
    3c72:	89 83       	std	Y+1, r24	; 0x01
    3c74:	89 81       	ldd	r24, Y+1	; 0x01
    3c76:	9a 81       	ldd	r25, Y+2	; 0x02
    3c78:	01 97       	sbiw	r24, 0x01	; 1
    3c7a:	f1 f7       	brne	.-4      	; 0x3c78 <main+0xe2e>
    3c7c:	9a 83       	std	Y+2, r25	; 0x02
    3c7e:	89 83       	std	Y+1, r24	; 0x01
                               _delay_ms(10000);
			      H_LCD_Void_LCDClear();
    3c80:	0e 94 c9 14 	call	0x2992	; 0x2992 <H_LCD_Void_LCDClear>
    3c84:	f3 c8       	rjmp	.-3610   	; 0x2e6c <main+0x22>
		H_DCMotor_Void_DCMotorForward();
		H_DCMotor_Void_DCMotorStart();
		dist = Ultrasonic_getDist();

		//while obstacle close
		while (dist<20) {
    3c86:	fe 01       	movw	r30, r28
    3c88:	e3 56       	subi	r30, 0x63	; 99
    3c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c8c:	80 81       	ld	r24, Z
    3c8e:	84 31       	cpi	r24, 0x14	; 20
    3c90:	08 f4       	brcc	.+2      	; 0x3c94 <main+0xe4a>
    3c92:	fb c8       	rjmp	.-3594   	; 0x2e8a <main+0x40>
    3c94:	eb c8       	rjmp	.-3626   	; 0x2e6c <main+0x22>

00003c96 <__mulsi3>:
    3c96:	62 9f       	mul	r22, r18
    3c98:	d0 01       	movw	r26, r0
    3c9a:	73 9f       	mul	r23, r19
    3c9c:	f0 01       	movw	r30, r0
    3c9e:	82 9f       	mul	r24, r18
    3ca0:	e0 0d       	add	r30, r0
    3ca2:	f1 1d       	adc	r31, r1
    3ca4:	64 9f       	mul	r22, r20
    3ca6:	e0 0d       	add	r30, r0
    3ca8:	f1 1d       	adc	r31, r1
    3caa:	92 9f       	mul	r25, r18
    3cac:	f0 0d       	add	r31, r0
    3cae:	83 9f       	mul	r24, r19
    3cb0:	f0 0d       	add	r31, r0
    3cb2:	74 9f       	mul	r23, r20
    3cb4:	f0 0d       	add	r31, r0
    3cb6:	65 9f       	mul	r22, r21
    3cb8:	f0 0d       	add	r31, r0
    3cba:	99 27       	eor	r25, r25
    3cbc:	72 9f       	mul	r23, r18
    3cbe:	b0 0d       	add	r27, r0
    3cc0:	e1 1d       	adc	r30, r1
    3cc2:	f9 1f       	adc	r31, r25
    3cc4:	63 9f       	mul	r22, r19
    3cc6:	b0 0d       	add	r27, r0
    3cc8:	e1 1d       	adc	r30, r1
    3cca:	f9 1f       	adc	r31, r25
    3ccc:	bd 01       	movw	r22, r26
    3cce:	cf 01       	movw	r24, r30
    3cd0:	11 24       	eor	r1, r1
    3cd2:	08 95       	ret

00003cd4 <__udivmodqi4>:
    3cd4:	99 1b       	sub	r25, r25
    3cd6:	79 e0       	ldi	r23, 0x09	; 9
    3cd8:	04 c0       	rjmp	.+8      	; 0x3ce2 <__udivmodqi4_ep>

00003cda <__udivmodqi4_loop>:
    3cda:	99 1f       	adc	r25, r25
    3cdc:	96 17       	cp	r25, r22
    3cde:	08 f0       	brcs	.+2      	; 0x3ce2 <__udivmodqi4_ep>
    3ce0:	96 1b       	sub	r25, r22

00003ce2 <__udivmodqi4_ep>:
    3ce2:	88 1f       	adc	r24, r24
    3ce4:	7a 95       	dec	r23
    3ce6:	c9 f7       	brne	.-14     	; 0x3cda <__udivmodqi4_loop>
    3ce8:	80 95       	com	r24
    3cea:	08 95       	ret

00003cec <__udivmodsi4>:
    3cec:	a1 e2       	ldi	r26, 0x21	; 33
    3cee:	1a 2e       	mov	r1, r26
    3cf0:	aa 1b       	sub	r26, r26
    3cf2:	bb 1b       	sub	r27, r27
    3cf4:	fd 01       	movw	r30, r26
    3cf6:	0d c0       	rjmp	.+26     	; 0x3d12 <__udivmodsi4_ep>

00003cf8 <__udivmodsi4_loop>:
    3cf8:	aa 1f       	adc	r26, r26
    3cfa:	bb 1f       	adc	r27, r27
    3cfc:	ee 1f       	adc	r30, r30
    3cfe:	ff 1f       	adc	r31, r31
    3d00:	a2 17       	cp	r26, r18
    3d02:	b3 07       	cpc	r27, r19
    3d04:	e4 07       	cpc	r30, r20
    3d06:	f5 07       	cpc	r31, r21
    3d08:	20 f0       	brcs	.+8      	; 0x3d12 <__udivmodsi4_ep>
    3d0a:	a2 1b       	sub	r26, r18
    3d0c:	b3 0b       	sbc	r27, r19
    3d0e:	e4 0b       	sbc	r30, r20
    3d10:	f5 0b       	sbc	r31, r21

00003d12 <__udivmodsi4_ep>:
    3d12:	66 1f       	adc	r22, r22
    3d14:	77 1f       	adc	r23, r23
    3d16:	88 1f       	adc	r24, r24
    3d18:	99 1f       	adc	r25, r25
    3d1a:	1a 94       	dec	r1
    3d1c:	69 f7       	brne	.-38     	; 0x3cf8 <__udivmodsi4_loop>
    3d1e:	60 95       	com	r22
    3d20:	70 95       	com	r23
    3d22:	80 95       	com	r24
    3d24:	90 95       	com	r25
    3d26:	9b 01       	movw	r18, r22
    3d28:	ac 01       	movw	r20, r24
    3d2a:	bd 01       	movw	r22, r26
    3d2c:	cf 01       	movw	r24, r30
    3d2e:	08 95       	ret

00003d30 <__divmodsi4>:
    3d30:	97 fb       	bst	r25, 7
    3d32:	09 2e       	mov	r0, r25
    3d34:	05 26       	eor	r0, r21
    3d36:	0e d0       	rcall	.+28     	; 0x3d54 <__divmodsi4_neg1>
    3d38:	57 fd       	sbrc	r21, 7
    3d3a:	04 d0       	rcall	.+8      	; 0x3d44 <__divmodsi4_neg2>
    3d3c:	d7 df       	rcall	.-82     	; 0x3cec <__udivmodsi4>
    3d3e:	0a d0       	rcall	.+20     	; 0x3d54 <__divmodsi4_neg1>
    3d40:	00 1c       	adc	r0, r0
    3d42:	38 f4       	brcc	.+14     	; 0x3d52 <__divmodsi4_exit>

00003d44 <__divmodsi4_neg2>:
    3d44:	50 95       	com	r21
    3d46:	40 95       	com	r20
    3d48:	30 95       	com	r19
    3d4a:	21 95       	neg	r18
    3d4c:	3f 4f       	sbci	r19, 0xFF	; 255
    3d4e:	4f 4f       	sbci	r20, 0xFF	; 255
    3d50:	5f 4f       	sbci	r21, 0xFF	; 255

00003d52 <__divmodsi4_exit>:
    3d52:	08 95       	ret

00003d54 <__divmodsi4_neg1>:
    3d54:	f6 f7       	brtc	.-4      	; 0x3d52 <__divmodsi4_exit>
    3d56:	90 95       	com	r25
    3d58:	80 95       	com	r24
    3d5a:	70 95       	com	r23
    3d5c:	61 95       	neg	r22
    3d5e:	7f 4f       	sbci	r23, 0xFF	; 255
    3d60:	8f 4f       	sbci	r24, 0xFF	; 255
    3d62:	9f 4f       	sbci	r25, 0xFF	; 255
    3d64:	08 95       	ret

00003d66 <__prologue_saves__>:
    3d66:	2f 92       	push	r2
    3d68:	3f 92       	push	r3
    3d6a:	4f 92       	push	r4
    3d6c:	5f 92       	push	r5
    3d6e:	6f 92       	push	r6
    3d70:	7f 92       	push	r7
    3d72:	8f 92       	push	r8
    3d74:	9f 92       	push	r9
    3d76:	af 92       	push	r10
    3d78:	bf 92       	push	r11
    3d7a:	cf 92       	push	r12
    3d7c:	df 92       	push	r13
    3d7e:	ef 92       	push	r14
    3d80:	ff 92       	push	r15
    3d82:	0f 93       	push	r16
    3d84:	1f 93       	push	r17
    3d86:	cf 93       	push	r28
    3d88:	df 93       	push	r29
    3d8a:	cd b7       	in	r28, 0x3d	; 61
    3d8c:	de b7       	in	r29, 0x3e	; 62
    3d8e:	ca 1b       	sub	r28, r26
    3d90:	db 0b       	sbc	r29, r27
    3d92:	0f b6       	in	r0, 0x3f	; 63
    3d94:	f8 94       	cli
    3d96:	de bf       	out	0x3e, r29	; 62
    3d98:	0f be       	out	0x3f, r0	; 63
    3d9a:	cd bf       	out	0x3d, r28	; 61
    3d9c:	09 94       	ijmp

00003d9e <__epilogue_restores__>:
    3d9e:	2a 88       	ldd	r2, Y+18	; 0x12
    3da0:	39 88       	ldd	r3, Y+17	; 0x11
    3da2:	48 88       	ldd	r4, Y+16	; 0x10
    3da4:	5f 84       	ldd	r5, Y+15	; 0x0f
    3da6:	6e 84       	ldd	r6, Y+14	; 0x0e
    3da8:	7d 84       	ldd	r7, Y+13	; 0x0d
    3daa:	8c 84       	ldd	r8, Y+12	; 0x0c
    3dac:	9b 84       	ldd	r9, Y+11	; 0x0b
    3dae:	aa 84       	ldd	r10, Y+10	; 0x0a
    3db0:	b9 84       	ldd	r11, Y+9	; 0x09
    3db2:	c8 84       	ldd	r12, Y+8	; 0x08
    3db4:	df 80       	ldd	r13, Y+7	; 0x07
    3db6:	ee 80       	ldd	r14, Y+6	; 0x06
    3db8:	fd 80       	ldd	r15, Y+5	; 0x05
    3dba:	0c 81       	ldd	r16, Y+4	; 0x04
    3dbc:	1b 81       	ldd	r17, Y+3	; 0x03
    3dbe:	aa 81       	ldd	r26, Y+2	; 0x02
    3dc0:	b9 81       	ldd	r27, Y+1	; 0x01
    3dc2:	ce 0f       	add	r28, r30
    3dc4:	d1 1d       	adc	r29, r1
    3dc6:	0f b6       	in	r0, 0x3f	; 63
    3dc8:	f8 94       	cli
    3dca:	de bf       	out	0x3e, r29	; 62
    3dcc:	0f be       	out	0x3f, r0	; 63
    3dce:	cd bf       	out	0x3d, r28	; 61
    3dd0:	ed 01       	movw	r28, r26
    3dd2:	08 95       	ret

00003dd4 <_exit>:
    3dd4:	f8 94       	cli

00003dd6 <__stop_program>:
    3dd6:	ff cf       	rjmp	.-2      	; 0x3dd6 <__stop_program>
